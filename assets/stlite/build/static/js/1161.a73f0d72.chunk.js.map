{"version":3,"file":"static/js/1161.a73f0d72.chunk.js","mappings":"0LA0CA,MAAMA,UAAoBC,EAAAA,cAAkCC,WAAAA,GAAA,SAAAC,WAAA,KACzCC,gBAAkB,IAAIC,EAAAA,EAAiB,KAEjDC,MAAe,CACpBC,MAAOC,KAAKC,cAyCsC,KAC5CC,kBAAqBC,IAC3B,MAAM,UAAEC,EAAS,QAAEC,EAAO,WAAEC,GAAeN,KAAKO,MAChDH,EAAUI,eAAeH,EAASL,KAAKF,MAAMC,MAAOI,EAAQG,EAAW,EAGzE,KAIQG,cAAgB,KACtBT,KAAKU,UACH,CAACC,EAAGC,KACK,CAAEb,MAAOa,EAAUP,QAAQQ,YAEpC,IAAMb,KAAKE,kBAAkB,CAAEY,QAAQ,KACxC,EACF,KAEOC,aAAgBC,IACtBhB,KAAKU,SAAS,CAAEX,MAAOiB,IAAS,IAC9BhB,KAAKE,kBAAkB,CAAEY,QAAQ,KAClC,CACF,CA7DD,gBAAIb,GAGF,MAAMgB,EAAcjB,KAAKO,MAAMH,UAAUc,eAAelB,KAAKO,MAAMF,SACnE,YAAuBc,IAAhBF,EAA4BA,EAAcjB,KAAKO,MAAMF,QAAQQ,OACtE,CAEOO,iBAAAA,GACDpB,KAAKO,MAAMF,QAAQgB,SACrBrB,KAAKsB,qBAELtB,KAAKE,kBAAkB,CAAEY,QAAQ,GAErC,CAEOS,kBAAAA,GACLvB,KAAKwB,yBACP,CAEOC,oBAAAA,GACLzB,KAAKJ,gBAAgB8B,YACvB,CAEQF,uBAAAA,GACN,MAAM,SAAEH,GAAarB,KAAKO,MAAMF,QAC5BgB,GACFrB,KAAKsB,oBAET,CAEQA,kBAAAA,GACN,MAAM,MAAEvB,GAAUC,KAAKO,MAAMF,QAC7BL,KAAKO,MAAMF,QAAQgB,UAAW,EAC9BrB,KAAKU,SAAS,CAAEX,UAAS,KACvBC,KAAKE,kBAAkB,CAAEY,QAAQ,GAAQ,GAE7C,CA2BOa,MAAAA,GAA2B,IAADC,EAC/B,MAAM,QAAEvB,EAAO,MAAEwB,EAAK,SAAEC,EAAQ,UAAE1B,GAAcJ,KAAKO,OAC/C,MAAER,GAAUC,KAAKF,MASvB,OANAE,KAAKJ,gBAAgBmC,wBACnB3B,EACAC,EAAQ2B,OACRhC,KAAKS,gBAILwB,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdC,MAAO9B,EAAQ8B,MACfC,iBAAiBC,EAAAA,EAAAA,IACQ,QADuBT,EAC9CvB,EAAQ+B,uBAAe,IAAAR,OAAA,EAAvBA,EAAyB7B,OAE3BuC,KAAMjC,EAAQiC,KACdC,SAAUvC,KAAKe,aACfe,SAAUA,EACVD,MAAOA,EACP9B,MAAOA,GAGb,EAGF,S,kDCvHO,MAAMF,EAAgBH,WAAAA,GAAA,KACnB8C,uBAAiB,OAEjBC,mBAAa,OAEbC,gBAAU,EAWXX,uBAAAA,CACL3B,EACA4B,EACAW,GAI4B,MAA1B3C,KAAKwC,mBACLxC,KAAKyC,gBAAkBrC,GACvBJ,KAAK0C,aAAeV,IAMtBhC,KAAK0B,cAGAkB,EAAAA,EAAAA,IAAcZ,KAKnBhC,KAAKwC,kBAAoBpC,EAAUyC,uBAAuBb,EAAQW,GAClE3C,KAAKyC,cAAgBrC,EACrBJ,KAAK0C,WAAaV,GACpB,CAOON,UAAAA,GAAoB,IAADoB,EACF,QAAtBA,EAAA9C,KAAKwC,yBAAiB,IAAAM,GAAtBA,EAAwBpB,aACxB1B,KAAKwC,uBAAoBrB,EACzBnB,KAAKyC,mBAAgBtB,EACrBnB,KAAK0C,gBAAavB,CACpB,E","sources":["../../../streamlit/frontend/lib/src/components/widgets/ColorPicker/ColorPicker.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { ColorPicker as ColorPickerProto } from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport BaseColorPicker from \"@streamlit/lib/src/components/shared/BaseColorPicker\"\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: ColorPickerProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: string\n}\n\nclass ColorPicker extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): string {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setStringValue(element, this.state.value, source, fragmentId)\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onColorClose = (color: string): void => {\n    this.setState({ value: color }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { element, width, disabled, widgetMgr } = this.props\n    const { value } = this.state\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <BaseColorPicker\n        label={element.label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        help={element.help}\n        onChange={this.onColorClose}\n        disabled={disabled}\n        width={width}\n        value={value}\n      />\n    )\n  }\n}\n\nexport default ColorPicker\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["ColorPicker","React","constructor","arguments","formClearHelper","FormClearHelper","state","value","this","initialValue","commitWidgetValue","source","widgetMgr","element","fragmentId","props","setStringValue","onFormCleared","setState","_","prevProps","default","fromUi","onColorClose","color","storedValue","getStringValue","undefined","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","disconnect","render","_element$labelVisibil","width","disabled","manageFormClearListener","formId","_jsx","BaseColorPicker","label","labelVisibility","labelVisibilityProtoValueToEnum","help","onChange","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}