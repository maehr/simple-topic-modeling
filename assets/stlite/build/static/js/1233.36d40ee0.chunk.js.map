{"version":3,"file":"static/js/1233.36d40ee0.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/src/lib/components/shared/InputInstructions/styled-components.ts","../../../streamlit/frontend/src/lib/components/shared/InputInstructions/InputInstructions.tsx","../../../streamlit/frontend/src/lib/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/src/lib/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { keyframes } from \"@emotion/react\"\n\nconst blink = keyframes`\n  50% {\n    color: rgba(0, 0, 0, 0);\n  }\n`\n\nexport interface StyledMessageProps {\n  includeDot: boolean\n  shouldBlink: boolean\n}\n\nexport const StyledMessage = styled.span<StyledMessageProps>(\n  ({ includeDot, shouldBlink, theme }) => ({\n    ...(includeDot\n      ? {\n          \"&::before\": {\n            opacity: 1,\n            content: '\"â€¢\"',\n            animation: \"none\",\n            color: theme.colors.gray,\n            margin: \"0 5px\",\n          },\n        }\n      : {}),\n    ...(shouldBlink\n      ? {\n          color: theme.colors.red,\n          animationName: `${blink}`,\n          animationDuration: \"0.5s\",\n          animationIterationCount: 5,\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { isFromMac } from \"src/lib/util/utils\"\nimport { StyledWidgetInstructions } from \"src/lib/components/widgets/BaseWidget\"\nimport { StyledMessage } from \"./styled-components\"\n\nexport interface Props {\n  dirty: boolean\n  value: string\n  maxLength?: number\n  className?: string\n  type?: \"multiline\" | \"single\" | \"chat\"\n}\n\nconst InputInstructions = ({\n  dirty,\n  value,\n  maxLength,\n  className,\n  type = \"single\",\n}: Props): ReactElement => {\n  const messages: ReactElement[] = []\n  const addMessage = (text: string, shouldBlink = false): void => {\n    messages.push(\n      <StyledMessage\n        key={messages.length}\n        includeDot={messages.length > 0}\n        shouldBlink={shouldBlink}\n      >\n        {text}\n      </StyledMessage>\n    )\n  }\n\n  if (dirty) {\n    if (type === \"multiline\") {\n      if (isFromMac()) {\n        addMessage(\"Press âŒ˜+Enter to apply\")\n      } else {\n        addMessage(\"Press Ctrl+Enter to apply\")\n      }\n    } else if (type === \"single\") {\n      addMessage(\"Press Enter to apply\")\n    }\n  }\n\n  if (maxLength && (type !== \"chat\" || dirty)) {\n    addMessage(\n      `${value.length}/${maxLength}`,\n      dirty && value.length >= maxLength\n    )\n  }\n\n  return (\n    <StyledWidgetInstructions\n      data-testid=\"InputInstructions\"\n      className={className}\n    >\n      {messages}\n    </StyledWidgetInstructions>\n  )\n}\n\nexport default InputInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nconst CONTROLS_WIDTH = 32 // px\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  // Mimic the logic from createThemeOverrides.\n  borderColor:\n    theme.colors.widgetBorderColor ||\n    theme.colors.widgetBackgroundColor ||\n    theme.colors.bgColor,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.lg,\n  overflow: \"hidden\", // Fix rounded corner being overlayed with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: `${CONTROLS_WIDTH}px`,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  // Mimic the logic from createThemeOverrides.\n  backgroundColor:\n    theme.colors.widgetBackgroundColor || theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:last-of-type\": {\n    borderTopRightRadius: theme.radii.lg,\n    borderBottomRightRadius: theme.radii.lg,\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport const StyledInstructionsContainer = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  marginRight: theme.spacing.twoXS,\n  left: 0,\n  right: `${CONTROLS_WIDTH * 2}px`,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { Plus, Minus } from \"@emotion-icons/open-iconic\"\nimport { sprintf } from \"sprintf-js\"\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport { logWarning } from \"src/lib/util/log\"\nimport { NumberInput as NumberInputProto } from \"src/lib/proto\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport TooltipIcon from \"src/lib/components/shared/TooltipIcon\"\nimport { Placement } from \"src/lib/components/shared/Tooltip\"\n\nimport Icon from \"src/lib/components/shared/Icon\"\nimport { Input as UIInput } from \"baseui/input\"\nimport InputInstructions from \"src/lib/components/shared/InputInstructions/InputInstructions\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/lib/components/widgets/BaseWidget\"\n\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/util/utils\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\nexport interface State {\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  dirty: boolean\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n\n  /**\n   * The value with applied format that is going to be shown to the user\n   */\n  formattedValue: string\n\n  /**\n   * True if the input is selected\n   */\n  isFocused: boolean\n}\n\nclass NumberInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  private inputRef = React.createRef<HTMLInputElement | HTMLTextAreaElement>()\n\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      dirty: false,\n      value: this.initialValue,\n      formattedValue: this.formatValue(this.initialValue),\n      isFocused: false,\n    }\n  }\n\n  get initialValue(): number {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf\n    const storedValue = this.isIntData()\n      ? this.props.widgetMgr.getIntValue(this.props.element)\n      : this.props.widgetMgr.getDoubleValue(this.props.element)\n\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value, formattedValue: this.formatValue(value) }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  private formatValue = (value: number): string => {\n    const format = getNonEmptyString(this.props.element.format)\n    if (format == null) {\n      return value.toString()\n    }\n\n    try {\n      return sprintf(format, value)\n    } catch (e) {\n      // Don't explode if we have a malformed format string.\n      logWarning(`Error in sprintf(${format}, ${value}): ${e}`)\n      return String(value)\n    }\n  }\n\n  private isIntData = (): boolean => {\n    return this.props.element.dataType === NumberInputProto.DataType.INT\n  }\n\n  private getMin = (): number => {\n    return this.props.element.hasMin ? this.props.element.min : -Infinity\n  }\n\n  private getMax = (): number => {\n    return this.props.element.hasMax ? this.props.element.max : +Infinity\n  }\n\n  private getStep = (): number => {\n    const { step } = this.props.element\n\n    if (step) {\n      return step\n    }\n    if (this.isIntData()) {\n      return 1\n    }\n    return 0.01\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { value } = this.state\n    const { element, widgetMgr } = this.props\n    const data = this.props.element\n\n    const min = this.getMin()\n    const max = this.getMax()\n\n    if (min > value || value > max) {\n      const node = this.inputRef.current\n      if (node) {\n        node.reportValidity()\n      }\n    } else {\n      const valueToBeSaved = value || value === 0 ? value : data.default\n\n      if (this.isIntData()) {\n        widgetMgr.setIntValue(element, valueToBeSaved, source)\n      } else {\n        widgetMgr.setDoubleValue(element, valueToBeSaved, source)\n      }\n\n      this.setState({\n        dirty: false,\n        value: valueToBeSaved,\n        formattedValue: this.formatValue(valueToBeSaved),\n      })\n    }\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onBlur = (): void => {\n    if (this.state.dirty) {\n      this.commitWidgetValue({ fromUi: true })\n    }\n\n    this.setState({ isFocused: false })\n  }\n\n  private onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n\n    let numValue: number\n\n    if (this.isIntData()) {\n      numValue = parseInt(value, 10)\n    } else {\n      numValue = parseFloat(value)\n    }\n\n    this.setState({\n      dirty: true,\n      value: numValue,\n      formattedValue: value,\n    })\n  }\n\n  private onKeyDown = (\n    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { key } = e\n\n    switch (key) {\n      case \"ArrowUp\":\n        e.preventDefault()\n\n        this.modifyValueUsingStep(\"increment\")()\n        break\n      case \"ArrowDown\":\n        e.preventDefault()\n\n        this.modifyValueUsingStep(\"decrement\")()\n        break\n      default: // Do nothing\n    }\n  }\n\n  private onKeyPress = (\n    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    if (e.key === \"Enter\" && this.state.dirty) {\n      this.commitWidgetValue({ fromUi: true })\n    }\n  }\n\n  /** True if the input's current value can be decremented by its step. */\n  private get canDecrement(): boolean {\n    return this.state.value - this.getStep() >= this.getMin()\n  }\n\n  /** True if the input's current value can be incremented by its step. */\n  private get canIncrement(): boolean {\n    return this.state.value + this.getStep() <= this.getMax()\n  }\n\n  private modifyValueUsingStep =\n    (modifier: \"increment\" | \"decrement\"): any =>\n    (): void => {\n      const { value } = this.state\n      const step = this.getStep()\n\n      switch (modifier) {\n        case \"increment\":\n          if (this.canIncrement) {\n            this.setState(\n              {\n                dirty: true,\n                value: value + step,\n              },\n              () => {\n                this.commitWidgetValue({ fromUi: true })\n              }\n            )\n          }\n          break\n        case \"decrement\":\n          if (this.canDecrement) {\n            this.setState(\n              {\n                dirty: true,\n                value: value - step,\n              },\n              () => {\n                this.commitWidgetValue({ fromUi: true })\n              }\n            )\n          }\n          break\n        default: // Do nothing\n      }\n    }\n\n  public render(): React.ReactNode {\n    const { element, width, disabled, widgetMgr } = this.props\n    const { formattedValue, dirty, isFocused } = this.state\n\n    const style = { width }\n\n    const disableDecrement = !this.canDecrement || disabled\n    const disableIncrement = !this.canIncrement || disabled\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stNumberInput\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <StyledInputContainer className={isFocused ? \"focused\" : \"\"}>\n          <UIInput\n            type=\"number\"\n            inputRef={this.inputRef}\n            value={formattedValue}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            onChange={this.onChange}\n            onKeyPress={this.onKeyPress}\n            onKeyDown={this.onKeyDown}\n            disabled={disabled}\n            aria-label={element.label}\n            overrides={{\n              Input: {\n                props: {\n                  step: this.getStep(),\n                  min: this.getMin(),\n                  max: this.getMax(),\n                },\n                style: {\n                  lineHeight: \"1.4\",\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  paddingRight: \".5rem\",\n                  paddingLeft: \".5rem\",\n                  paddingBottom: \".5rem\",\n                  paddingTop: \".5rem\",\n                },\n              },\n              InputContainer: {\n                style: () => ({\n                  borderTopRightRadius: 0,\n                  borderBottomRightRadius: 0,\n                }),\n              },\n              Root: {\n                style: () => ({\n                  borderTopRightRadius: 0,\n                  borderBottomRightRadius: 0,\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  borderLeftWidth: 0,\n                  borderRightWidth: 0,\n                  borderTopWidth: 0,\n                  borderBottomWidth: 0,\n                }),\n              },\n            }}\n          />\n          <StyledInputControls>\n            <StyledInputControl\n              className=\"step-down\"\n              onClick={this.modifyValueUsingStep(\"decrement\")}\n              disabled={disableDecrement}\n            >\n              <Icon\n                content={Minus}\n                size=\"xs\"\n                color={this.canDecrement ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n            <StyledInputControl\n              className=\"step-up\"\n              onClick={this.modifyValueUsingStep(\"increment\")}\n              disabled={disableIncrement}\n            >\n              <Icon\n                content={Plus}\n                size=\"xs\"\n                color={this.canIncrement ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n          </StyledInputControls>\n        </StyledInputContainer>\n        <StyledInstructionsContainer>\n          <InputInstructions\n            dirty={dirty}\n            value={formattedValue}\n            className=\"input-instructions\"\n          />\n        </StyledInstructionsContainer>\n      </div>\n    )\n  }\n}\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return value == null || value === \"\" ? undefined : value\n}\n\nexport default NumberInput\n"],"names":["blink","keyframes","StyledMessage","includeDot","shouldBlink","theme","opacity","content","animation","color","colors","gray","margin","red","animationName","animationDuration","animationIterationCount","dirty","value","maxLength","className","type","messages","addMessage","text","push","length","isFromMac","StyledInputContainer","display","flexDirection","flexWrap","alignItems","borderWidth","borderStyle","borderColor","widgetBorderColor","widgetBackgroundColor","bgColor","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","lg","overflow","primary","input","MozAppearance","WebkitAppearance","spacing","none","StyledInputControls","StyledInputControl","border","height","sizes","full","width","justifyContent","bodyText","transition","backgroundColor","secondaryBg","white","outline","borderTopRightRadius","borderBottomRightRadius","cursor","fadedText40","StyledInstructionsContainer","position","marginRight","twoXS","left","right","CONTROLS_WIDTH","props","formClearHelper","FormClearHelper","inputRef","React","formatValue","format","undefined","getNonEmptyString","element","toString","sprintf","e","logWarning","String","isIntData","dataType","NumberInputProto","getMin","hasMin","min","Infinity","getMax","hasMax","max","getStep","step","commitWidgetValue","source","state","widgetMgr","data","node","current","reportValidity","valueToBeSaved","default","setIntValue","setDoubleValue","setState","formattedValue","onFormCleared","_","prevProps","fromUi","onBlur","isFocused","onFocus","onChange","numValue","target","parseInt","parseFloat","onKeyDown","key","preventDefault","modifyValueUsingStep","onKeyPress","modifier","canIncrement","canDecrement","initialValue","storedValue","this","getIntValue","getDoubleValue","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","disabled","style","disableDecrement","disableIncrement","manageFormClearListener","formId","label","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","placement","Placement","overrides","Input","lineHeight","paddingRight","paddingLeft","paddingBottom","paddingTop","InputContainer","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","onClick","Icon","Minus","size","Plus","InputInstructions"],"sourceRoot":""}