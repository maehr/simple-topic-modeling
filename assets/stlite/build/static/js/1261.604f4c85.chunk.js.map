{"version":3,"file":"static/js/1261.604f4c85.chunk.js","mappings":"oMAqBMA,EAAiB,IAQR,SAASC,EAAM,GAIA,IAH5BC,EAAO,EAAPA,QACAC,EAAK,EAALA,MACAC,EAAS,EAATA,UAEMC,GAAWC,EAAAA,EAAAA,QAAyB,MAIlCC,EAAsBL,EAAtBK,KAAWC,EAAWN,EAAhBO,IACRA,GAAMC,EAAAA,EAAAA,IAAwBF,IAEpCG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAYP,EAASQ,QAErBC,EAA2B,WAC3BF,IAEFA,EAAUG,YAAcb,EAAQc,UAEpC,EAMA,OAJIJ,GACFA,EAAUK,iBAAiB,iBAAkBH,GAGxC,WACDF,GACFA,EAAUM,oBAAoB,iBAAkBJ,EAEpD,CACF,GAAG,CAACZ,IAaJ,GAAIK,IAASY,EAAAA,GAAAA,KAAAA,eAAgC,CAO3C,IAAMC,EAAmB,IAAVjB,EAAsB,IAARA,EAAeH,EAE5C,OACE,mBACEqB,MAAOZ,EACPa,IAvBgB,SAACb,GACrB,IAAQO,EAAcd,EAAdc,UACR,OAAIA,EACI,GAAN,OAAUP,EAAG,kBAAUO,GAElBP,CACT,CAiBWc,CAAcd,GACnBN,MAAOA,EACPiB,OAAQA,EACRI,YAAY,IACZC,MAAM,4BACNC,iBAAe,GAGrB,CAEA,OACE,kBACEC,IAAKtB,EACLuB,UAAQ,EACRN,IAAKlB,EAAUyB,cAAcpB,GAC7BqB,UAAU,UACVC,MAAO,CAAE5B,MAAAA,EAAOiB,OAAkB,IAAVjB,EAAcH,OAAiBgC,IAG7D,C","sources":["../../../streamlit/frontend/src/lib/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useRef } from \"react\"\nimport { Video as VideoProto } from \"src/lib/proto\"\nimport { StreamlitEndpoints } from \"src/lib/StreamlitEndpoints\"\nimport { useStliteMediaObjectUrl } from \"@stlite/kernel\"\n\nconst DEFAULT_HEIGHT = 528\n\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: VideoProto\n}\n\nexport default function Video({\n  element,\n  width,\n  endpoints,\n}: VideoProps): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n\n  const { type, url: rawUrl } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        // setStartTime\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime } = element\n    if (startTime) {\n      return `${url}?start=${startTime}`\n    }\n    return url\n  }\n\n  /* Is this a YouTube link? If so we need a fancier tag.\n       NOTE: This part assumes the URL is already an \"embed\" link.\n    */\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    // At some point the width 0 will be passed to this component\n    // which is caused by the AutoSizer of the VerticalLayout\n    // Width 0 will result in height being 0, which results in issue\n    // https://github.com/streamlit/streamlit/issues/5069\n    // To avoid this, when we detect width is 0, we set height to 528,\n    // which is default height based on the default streamlit width\n    const height = width !== 0 ? width * 0.75 : DEFAULT_HEIGHT\n\n    return (\n      <iframe\n        title={url}\n        src={getYoutubeSrc(url)}\n        width={width}\n        height={height}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  return (\n    <video\n      ref={videoRef}\n      controls\n      src={endpoints.buildMediaURL(url)}\n      className=\"stVideo\"\n      style={{ width, height: width === 0 ? DEFAULT_HEIGHT : undefined }}\n    />\n  )\n}\n"],"names":["DEFAULT_HEIGHT","Video","element","width","endpoints","videoRef","useRef","type","rawUrl","url","useStliteMediaObjectUrl","useEffect","videoNode","current","setStartTime","currentTime","startTime","addEventListener","removeEventListener","VideoProto","height","title","src","getYoutubeSrc","frameBorder","allow","allowFullScreen","ref","controls","buildMediaURL","className","style","undefined"],"sourceRoot":""}