{"version":3,"file":"static/js/1286.a4397885.chunk.js","mappings":"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","sources":["../../../node_modules/@glideapps/glide-data-grid/dist/esm/internal/data-grid-overlay-editor/data-grid-overlay-editor-style.js","../../../node_modules/@glideapps/glide-data-grid/src/internal/data-grid-overlay-editor/use-stay-on-screen.ts","../../../node_modules/@glideapps/glide-data-grid/src/internal/data-grid-overlay-editor/data-grid-overlay-editor.tsx"],"sourcesContent":["import { styled } from \"@linaria/react\";\nconst _exp2 = /*#__PURE__*/() => p => p.targetX;\nconst _exp3 = /*#__PURE__*/() => p => p.targetY;\nconst _exp4 = /*#__PURE__*/() => p => p.targetWidth;\nconst _exp5 = /*#__PURE__*/() => p => p.targetHeight;\nconst _exp6 = /*#__PURE__*/() => p => p.targetY + 10;\nconst _exp7 = /*#__PURE__*/() => p => Math.max(0, (p.targetHeight - 28) / 2);\nexport const DataGridOverlayEditorStyle = /*#__PURE__*/styled('div')({\n  name: \"DataGridOverlayEditorStyle\",\n  class: \"gdg-d19meir1\",\n  propsAsIs: false,\n  vars: {\n    \"d19meir1-0\": [_exp3(), \"px\"],\n    \"d19meir1-1\": [_exp2(), \"px\"],\n    \"d19meir1-2\": [_exp4(), \"px\"],\n    \"d19meir1-3\": [_exp5(), \"px\"],\n    \"d19meir1-4\": [_exp6(), \"px\"],\n    \"d19meir1-5\": [_exp7(), \"px\"]\n  }\n});\n\n","import * as React from \"react\";\n\nfunction useRefState(): [HTMLElement | undefined, React.RefCallback<HTMLElement | null>] {\n    const [refState, setRefState] = React.useState<HTMLElement | null>();\n    return [refState ?? undefined, setRefState];\n}\n\ninterface StayOnScreen {\n    ref: React.RefCallback<HTMLElement | null>;\n    style: React.CSSProperties;\n}\n\nexport function useStayOnScreen(): StayOnScreen {\n    const [ref, setRef] = useRefState();\n    const [xOffset, setXOffset] = React.useState(0);\n    const [isIntersecting, setIsIntersecting] = React.useState(true);\n\n    React.useLayoutEffect(() => {\n        if (ref === undefined) return;\n        if (!(\"IntersectionObserver\" in window)) return;\n\n        const observer = new IntersectionObserver(\n            ents => {\n                if (ents.length === 0) return;\n                setIsIntersecting(ents[0].isIntersecting);\n            },\n            { threshold: 1 }\n        );\n        observer.observe(ref);\n\n        return () => observer.disconnect();\n    }, [ref]);\n\n    React.useEffect(() => {\n        if (isIntersecting || ref === undefined) return;\n\n        let rafHandle: number | undefined;\n        const fn = () => {\n            const { right: refRight } = ref.getBoundingClientRect();\n\n            setXOffset(cv => Math.min(cv + window.innerWidth - refRight - 10, 0));\n            rafHandle = requestAnimationFrame(fn);\n        };\n\n        rafHandle = requestAnimationFrame(fn);\n        return () => {\n            if (rafHandle !== undefined) {\n                cancelAnimationFrame(rafHandle);\n            }\n        };\n    }, [ref, isIntersecting]);\n\n    const style = React.useMemo(() => {\n        return { transform: `translateX(${xOffset}px)` };\n    }, [xOffset]);\n\n    return {\n        ref: setRef,\n        style,\n    };\n}\n","import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport ClickOutsideContainer from \"../click-outside-container/click-outside-container.js\";\nimport { makeCSSStyle, type Theme, ThemeContext } from \"../../common/styles.js\";\nimport type { GetCellRendererCallback } from \"../../cells/cell-types.js\";\nimport {\n    type EditableGridCell,\n    type GridCell,\n    isEditableGridCell,\n    isInnerOnlyCell,\n    isObjectEditorCallbackResult,\n    type Item,\n    type ProvideEditorCallback,\n    type ProvideEditorCallbackResult,\n    type Rectangle,\n    type ValidatedGridCell,\n} from \"../data-grid/data-grid-types.js\";\nimport { DataGridOverlayEditorStyle } from \"./data-grid-overlay-editor-style.js\";\nimport type { OverlayImageEditorProps } from \"./private/image-overlay-editor.js\";\nimport { useStayOnScreen } from \"./use-stay-on-screen.js\";\n\ntype ImageEditorType = React.ComponentType<OverlayImageEditorProps>;\n\ninterface DataGridOverlayEditorProps {\n    readonly target: Rectangle;\n    readonly cell: Item;\n    readonly content: GridCell;\n    readonly className?: string;\n    readonly id: string;\n    readonly initialValue?: string;\n    readonly bloom?: readonly [number, number];\n    readonly theme: Theme;\n    readonly onFinishEditing: (newCell: GridCell | undefined, movement: readonly [-1 | 0 | 1, -1 | 0 | 1]) => void;\n    readonly forceEditMode: boolean;\n    readonly highlight: boolean;\n    readonly imageEditorOverride?: ImageEditorType;\n    readonly getCellRenderer: GetCellRendererCallback;\n    readonly markdownDivCreateNode?: (content: string) => DocumentFragment;\n    readonly provideEditor?: ProvideEditorCallback<GridCell>;\n    readonly validateCell?: (\n        cell: Item,\n        newValue: EditableGridCell,\n        prevValue: GridCell\n    ) => boolean | ValidatedGridCell;\n    readonly isOutsideClick?: (e: MouseEvent | TouchEvent) => boolean;\n}\n\nconst DataGridOverlayEditor: React.FunctionComponent<DataGridOverlayEditorProps> = p => {\n    const {\n        target,\n        content,\n        onFinishEditing: onFinishEditingIn,\n        forceEditMode,\n        initialValue,\n        imageEditorOverride,\n        markdownDivCreateNode,\n        highlight,\n        className,\n        theme,\n        id,\n        cell,\n        bloom,\n        validateCell,\n        getCellRenderer,\n        provideEditor,\n        isOutsideClick,\n    } = p;\n\n    const [tempValue, setTempValueRaw] = React.useState<GridCell | undefined>(forceEditMode ? content : undefined);\n    const lastValueRef = React.useRef(tempValue ?? content);\n    lastValueRef.current = tempValue ?? content;\n\n    const [isValid, setIsValid] = React.useState(() => {\n        if (validateCell === undefined) return true;\n        return !(isEditableGridCell(content) && validateCell?.(cell, content, lastValueRef.current) === false);\n    });\n\n    const onFinishEditing = React.useCallback<typeof onFinishEditingIn>(\n        (newCell, movement) => {\n            onFinishEditingIn(isValid ? newCell : undefined, movement);\n        },\n        [isValid, onFinishEditingIn]\n    );\n\n    const setTempValue = React.useCallback(\n        (newVal: GridCell | undefined) => {\n            if (validateCell !== undefined && newVal !== undefined && isEditableGridCell(newVal)) {\n                const validResult = validateCell(cell, newVal, lastValueRef.current);\n                if (validResult === false) {\n                    setIsValid(false);\n                } else if (typeof validResult === \"object\") {\n                    newVal = validResult;\n                    setIsValid(true);\n                } else {\n                    setIsValid(true);\n                }\n            }\n            setTempValueRaw(newVal);\n        },\n        [cell, validateCell]\n    );\n\n    const finished = React.useRef(false);\n    const customMotion = React.useRef<[-1 | 0 | 1, -1 | 0 | 1] | undefined>(undefined);\n\n    const onClickOutside = React.useCallback(() => {\n        onFinishEditing(tempValue, [0, 0]);\n        finished.current = true;\n    }, [tempValue, onFinishEditing]);\n\n    const onEditorFinished = React.useCallback(\n        (newValue: GridCell | undefined, movement?: readonly [-1 | 0 | 1, -1 | 0 | 1]) => {\n            onFinishEditing(newValue, movement ?? customMotion.current ?? [0, 0]);\n            finished.current = true;\n        },\n        [onFinishEditing]\n    );\n\n    const onKeyDown = React.useCallback(\n        async (event: React.KeyboardEvent) => {\n            let save = false;\n            if (event.key === \"Escape\") {\n                event.stopPropagation();\n                event.preventDefault();\n                customMotion.current = [0, 0];\n            } else if (event.key === \"Enter\" && !event.shiftKey) {\n                event.stopPropagation();\n                event.preventDefault();\n                customMotion.current = [0, 1];\n                save = true;\n            } else if (event.key === \"Tab\") {\n                event.stopPropagation();\n                event.preventDefault();\n                customMotion.current = [event.shiftKey ? -1 : 1, 0];\n                save = true;\n            }\n\n            window.setTimeout(() => {\n                if (!finished.current && customMotion.current !== undefined) {\n                    onFinishEditing(save ? tempValue : undefined, customMotion.current);\n                    finished.current = true;\n                }\n            }, 0);\n        },\n        [onFinishEditing, tempValue]\n    );\n\n    const targetValue = tempValue ?? content;\n\n    const [editorProvider, useLabel] = React.useMemo((): [ProvideEditorCallbackResult<GridCell>, boolean] | [] => {\n        if (isInnerOnlyCell(content)) return [];\n        const external = provideEditor?.(content);\n        if (external !== undefined) return [external, false];\n        return [getCellRenderer(content)?.provideEditor?.(content), false];\n    }, [content, getCellRenderer, provideEditor]);\n\n    const { ref, style: stayOnScreenStyle } = useStayOnScreen();\n\n    let pad = true;\n    let editor: React.ReactNode;\n    let style = true;\n    let styleOverride: React.CSSProperties | undefined;\n\n    if (editorProvider !== undefined) {\n        pad = editorProvider.disablePadding !== true;\n        style = editorProvider.disableStyling !== true;\n        const isObjectEditor = isObjectEditorCallbackResult(editorProvider);\n        if (isObjectEditor) {\n            styleOverride = editorProvider.styleOverride;\n        }\n        const CustomEditor = isObjectEditor ? editorProvider.editor : editorProvider;\n        editor = (\n            <CustomEditor\n                isHighlighted={highlight}\n                onChange={setTempValue}\n                value={targetValue}\n                initialValue={initialValue}\n                onFinishedEditing={onEditorFinished}\n                validatedSelection={isEditableGridCell(targetValue) ? targetValue.selectionRange : undefined}\n                forceEditMode={forceEditMode}\n                target={target}\n                imageEditorOverride={imageEditorOverride}\n                markdownDivCreateNode={markdownDivCreateNode}\n                isValid={isValid}\n                theme={theme}\n            />\n        );\n    }\n\n    styleOverride = { ...styleOverride, ...stayOnScreenStyle };\n\n    // Consider imperatively creating and adding the element to the dom?\n    const portalElement = document.getElementById(\"portal\");\n    if (portalElement === null) {\n        // eslint-disable-next-line no-console\n        console.error(\n            'Cannot open Data Grid overlay editor, because portal not found.  Please add `<div id=\"portal\" />` as the last child of your `<body>`.'\n        );\n        return null;\n    }\n\n    let classWrap = style ? \"gdg-style\" : \"gdg-unstyle\";\n    if (!isValid) {\n        classWrap += \" gdg-invalid\";\n    }\n\n    if (pad) {\n        classWrap += \" gdg-pad\";\n    }\n\n    const bloomX = bloom?.[0] ?? 1;\n    const bloomY = bloom?.[1] ?? 1;\n\n    return createPortal(\n        <ThemeContext.Provider value={theme}>\n            <ClickOutsideContainer\n                style={makeCSSStyle(theme)}\n                className={className}\n                onClickOutside={onClickOutside}\n                isOutsideClick={isOutsideClick}>\n                <DataGridOverlayEditorStyle\n                    ref={ref}\n                    id={id}\n                    className={classWrap}\n                    style={styleOverride}\n                    as={useLabel === true ? \"label\" : undefined}\n                    targetX={target.x - bloomX}\n                    targetY={target.y - bloomY}\n                    targetWidth={target.width + bloomX * 2}\n                    targetHeight={target.height + bloomY * 2}>\n                    <div className=\"gdg-clip-region\" onKeyDown={onKeyDown}>\n                        {editor}\n                    </div>\n                </DataGridOverlayEditorStyle>\n            </ClickOutsideContainer>\n        </ThemeContext.Provider>,\n        portalElement\n    );\n};\n\nexport default DataGridOverlayEditor;\n"],"names":["DataGridOverlayEditorStyle","styled","name","class","propsAsIs","vars","p","targetY","targetX","targetWidth","targetHeight","Math","max","useStayOnScreen","ref","setRef","refState","setRefState","React","undefined","useRefState","xOffset","setXOffset","isIntersecting","setIsIntersecting","window","observer","IntersectionObserver","ents","length","threshold","observe","disconnect","rafHandle","fn","right","refRight","getBoundingClientRect","cv","min","innerWidth","requestAnimationFrame","cancelAnimationFrame","style","transform","concat","_bloom$","_bloom$2","target","content","onFinishEditing","onFinishEditingIn","forceEditMode","initialValue","imageEditorOverride","markdownDivCreateNode","highlight","className","theme","id","cell","bloom","validateCell","getCellRenderer","provideEditor","isOutsideClick","tempValue","setTempValueRaw","lastValueRef","current","isValid","setIsValid","isEditableGridCell","newCell","movement","setTempValue","newVal","validResult","finished","customMotion","onClickOutside","onEditorFinished","newValue","_ref","onKeyDown","async","save","event","key","stopPropagation","preventDefault","shiftKey","setTimeout","targetValue","editorProvider","useLabel","_getCellRenderer","_getCellRenderer$prov","isInnerOnlyCell","external","call","stayOnScreenStyle","editor","styleOverride","pad","disablePadding","disableStyling","isObjectEditor","isObjectEditorCallbackResult","CustomEditor","isHighlighted","onChange","value","onFinishedEditing","validatedSelection","selectionRange","portalElement","document","getElementById","console","error","classWrap","bloomX","bloomY","createPortal","ThemeContext","ClickOutsideContainer","makeCSSStyle","as","x","y","width","height"],"sourceRoot":""}