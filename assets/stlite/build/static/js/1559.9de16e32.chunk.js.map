{"version":3,"file":"static/js/1559.9de16e32.chunk.js","mappings":"yLAsBA,MAAMA,EAAiB,IAaR,SAASC,EAAKC,GAIC,IAJA,QAC5BC,EAAO,MACPC,EAAK,UACLC,GACWH,EACX,MAAMI,GAAWC,EAAAA,EAAAA,QAAyB,OAIpC,KAAEC,EAAMC,IAAKC,EAAM,UAAEC,EAAS,UAAEC,GAAcT,EAC9CM,GAAMI,EAAAA,EAAAA,IAAwBH,IAGpCI,EAAAA,EAAAA,YAAU,KACJR,EAASS,UACXT,EAASS,QAAQC,YAAcL,EACjC,GACC,CAACA,KAEJG,EAAAA,EAAAA,YAAU,KACR,MAAMG,EAAYX,EAASS,QAErBG,EAA2BA,KAC3BD,IAEFA,EAAUD,YAAcb,EAAQQ,UAClC,EAOF,OAJIM,GACFA,EAAUE,iBAAiB,iBAAkBD,GAGxC,KACDD,GACFA,EAAUG,oBAAoB,iBAAkBF,EAClD,CACD,GACA,CAACf,IAEJ,MAAMkB,EAAiBZ,IACrB,MAAM,UAAEE,GAAcR,EACtB,OAAIQ,EACI,GAANW,OAAUb,EAAG,WAAAa,OAAUX,GAElBF,CAAG,EAMZ,GAAID,IAASe,EAAAA,GAAAA,KAAAA,eAAgC,CAO3C,MAAMC,EAAmB,IAAVpB,EAAsB,IAARA,EAAeJ,EAE5C,OACEyB,EAAAA,EAAAA,KAAA,UACE,cAAY,UACZC,MAAOjB,EACPkB,IAAKN,EAAcZ,GACnBL,MAAOA,EACPoB,OAAQA,EACRI,MAAO,CAAEC,YAAa,cACtBC,YAAY,IACZC,MAAM,4BACNC,iBAAe,GAGrB,CAIA,OACEP,EAAAA,EAAAA,KAAA,SACE,cAAY,UACZQ,IAAK3B,EACL4B,UAAQ,EACRP,IAAKtB,EAAU8B,cAAc1B,GAC7B2B,UAAU,UACVR,MAAO,CAAExB,QAAOoB,OAAkB,IAAVpB,EAAcJ,OAAiBqC,GACvDC,YACEC,EAAAA,IAAc3B,EAAU4B,OAAS,EAAI,iBAAcH,EACpDI,SAEA7B,GACCA,EAAU8B,KAAI,CAACC,EAAoBC,KACjCnB,EAAAA,EAAAA,KAAA,SAEEoB,KAAK,WACLlB,IAAKtB,EAAU8B,cAAcQ,EAASlC,KACtCqC,MAAOH,EAASG,MAChBC,QAAiB,IAARH,GAJJA,MASjB,C","sources":["../../../streamlit/frontend/lib/src/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useRef } from \"react\"\nimport { Video as VideoProto } from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { IS_DEV_ENV } from \"@streamlit/lib/src/baseconsts\"\nimport { useStliteMediaObjectUrl } from \"@stlite/kernel\"\n\nconst DEFAULT_HEIGHT = 528\n\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: VideoProto\n}\n\nexport interface Subtitle {\n  label: string\n  url: string\n}\n\nexport default function Video({\n  element,\n  width,\n  endpoints,\n}: VideoProps): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n\n  const { type, url: rawUrl, startTime, subtitles } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        // setStartTime\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime } = element\n    if (startTime) {\n      return `${url}?start=${startTime}`\n    }\n    return url\n  }\n\n  /* Is this a YouTube link? If so we need a fancier tag.\n       NOTE: This part assumes the URL is already an \"embed\" link.\n    */\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    // At some point the width 0 will be passed to this component\n    // which is caused by the AutoSizer of the VerticalLayout\n    // Width 0 will result in height being 0, which results in issue\n    // https://github.com/streamlit/streamlit/issues/5069\n    // To avoid this, when we detect width is 0, we set height to 528,\n    // which is default height based on the default streamlit width\n    const height = width !== 0 ? width * 0.75 : DEFAULT_HEIGHT\n\n    return (\n      <iframe\n        data-testid=\"stVideo\"\n        title={url}\n        src={getYoutubeSrc(url)}\n        width={width}\n        height={height}\n        style={{ colorScheme: \"light dark\" }}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  // Only in dev mode we set crossOrigin to \"anonymous\" to avoid CORS issues\n  // when streamlit frontend and backend are running on different ports\n  return (\n    <video\n      data-testid=\"stVideo\"\n      ref={videoRef}\n      controls\n      src={endpoints.buildMediaURL(url)}\n      className=\"stVideo\"\n      style={{ width, height: width === 0 ? DEFAULT_HEIGHT : undefined }}\n      crossOrigin={\n        IS_DEV_ENV && subtitles.length > 0 ? \"anonymous\" : undefined\n      }\n    >\n      {subtitles &&\n        subtitles.map((subtitle: Subtitle, idx: number) => (\n          <track\n            key={idx}\n            kind=\"captions\"\n            src={endpoints.buildMediaURL(subtitle.url)}\n            label={subtitle.label}\n            default={idx === 0}\n          />\n        ))}\n    </video>\n  )\n}\n"],"names":["DEFAULT_HEIGHT","Video","_ref","element","width","endpoints","videoRef","useRef","type","url","rawUrl","startTime","subtitles","useStliteMediaObjectUrl","useEffect","current","currentTime","videoNode","setStartTime","addEventListener","removeEventListener","getYoutubeSrc","concat","VideoProto","height","_jsx","title","src","style","colorScheme","frameBorder","allow","allowFullScreen","ref","controls","buildMediaURL","className","undefined","crossOrigin","IS_DEV_ENV","length","children","map","subtitle","idx","kind","label","default"],"sourceRoot":""}