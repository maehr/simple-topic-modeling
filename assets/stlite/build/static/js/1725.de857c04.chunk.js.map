{"version":3,"file":"static/js/1725.de857c04.chunk.js","mappings":"iKA2CKA,E,uDCzBQC,GAAkB,mCAAW,YAAQ,MAAQ,CACxDC,QAAS,OACTC,cAAe,MACfC,SAAU,OAEVC,OALgD,EAALC,MAK7BC,QAAQC,GACvB,GAAC,IAEWC,GAAuB,mCAAW,iBAAO,CACpDP,QAAS,OACTC,cAAe,SACfO,WAAY,UACZC,MAAO,OACPC,SAAU,EACX,GAAC,IAEWC,GAAgB,mCAAW,gBAAGP,EAAK,EAALA,MAAK,MAAQ,CACtDQ,WAAYR,EAAMS,aAAaC,SAC/BC,SAAUX,EAAMY,UAAUC,GAC1BC,MAAOd,EAAMe,OAAOC,YACpBC,UAAW,SACXC,UAAWlB,EAAMC,QAAQkB,GACzBC,SAAU,aACVC,QAAS,WACV,GAAC,I,YDOF,SANK3B,GAAAA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAMlB,CANKA,IAAAA,EAAa,KAiFlB,OAAe4B,EAAAA,EAAAA,IAxER,SAAmB,GAMQ,IAK5BC,EAVJlB,EAAK,EAALA,MACAmB,EAAY,EAAZA,aACAC,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAC,EAAS,EAATA,UAEMC,GAASC,EAAAA,EAAAA,IAAmBJ,EAAQK,MAKpCC,EAAaN,EAAQpB,MAE3B,GACE0B,IAAerC,EAAcsC,eAC7BD,IAAerC,EAAcuC,UAG7BV,OAAiBW,OACZ,GAAIH,IAAerC,EAAcyC,YAEtCZ,EAAiBlB,MACZ,MAAI0B,EAAa,GAItB,MAAMK,MAAM,wBAAD,OAAyBL,IAFpCR,EAAiBQ,CAGnB,CAEA,IAAMM,EAAgB,CAAC,EAcvB,OAZIX,GAAUF,GACZa,EAASC,UAAYZ,EACrBW,EAAS,cAAgB,YAEzBA,EAAShC,MAAQkB,EAEbQ,IAAerC,EAAcuC,YAE/BI,EAASE,SAAW,UAKtB,SAAC5C,EAAe,CAAC6C,MAAO,CAAEnC,MAAAA,GAAQ,SAC/BuB,EAAOa,KAAI,SAACC,EAAgBC,GAC3B,IAAMC,EAAQF,EACd,OACE,UAACvC,EAAoB,CAAW,cAAY,UAAS,UAClDyC,EAAMC,QAELC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,IAAeH,EAAMC,UAErC,gBACEL,MAAOH,EACPW,IAAKrB,EAAUsB,cAAcL,EAAMM,KACnCC,IAAKR,EAAIS,aAGZR,EAAMS,UACL,SAAC9C,EAAa,CAAC,cAAY,UAAUiC,MAAOH,EAAS,oBAC9CO,EAAMS,QAAO,SAbGV,EAkB/B,KAGN,G","sources":["../../../streamlit/frontend/src/lib/components/elements/ImageList/ImageList.tsx","../../../streamlit/frontend/src/lib/components/elements/ImageList/styled-components.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport ReactHtmlParser from \"react-html-parser\"\nimport { useStliteImageList } from \"@stlite/kernel\"\n\nimport {\n  IImage,\n  Image as ImageProto,\n  ImageList as ImageListProto,\n} from \"src/lib/proto\"\nimport withFullScreenWrapper from \"src/lib/hocs/withFullScreenWrapper\"\nimport { xssSanitizeSvg } from \"src/lib/util/UriUtil\"\nimport { StreamlitEndpoints } from \"src/lib/StreamlitEndpoints\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  isFullScreen: boolean\n  element: ImageListProto\n  height?: number\n}\n\nenum WidthBehavior {\n  OriginalWidth = -1,\n  ColumnWidth = -2,\n  AutoWidth = -3,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nexport function ImageList({\n  width,\n  isFullScreen,\n  element,\n  height,\n  endpoints,\n}: ImageListProps): ReactElement {\n  const images = useStliteImageList(element.imgs)\n\n  // The width field in the proto sets the image width, but has special\n  // cases for -1, -2, and -3.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    protoWidth === WidthBehavior.OriginalWidth ||\n    protoWidth === WidthBehavior.AutoWidth\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (protoWidth === WidthBehavior.ColumnWidth) {\n    // Use the column width\n    containerWidth = width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: any = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle[\"object-fit\"] = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n\n    if (protoWidth === WidthBehavior.AutoWidth) {\n      // Cap the image width, so it doesn't exceed the column width\n      imgStyle.maxWidth = \"100%\"\n    }\n  }\n\n  return (\n    <StyledImageList style={{ width }}>\n      {images.map((iimage: IImage, idx: number): ReactElement => {\n        const image = iimage as ImageProto\n        return (\n          <StyledImageContainer key={idx} data-testid=\"stImage\">\n            {image.markup ? (\n              // SVGs are received unsanitized\n              ReactHtmlParser(xssSanitizeSvg(image.markup))\n            ) : (\n              <img\n                style={imgStyle}\n                src={endpoints.buildMediaURL(image.url)}\n                alt={idx.toString()}\n              />\n            )}\n            {image.caption && (\n              <StyledCaption data-testid=\"caption\" style={imgStyle}>\n                {` ${image.caption} `}\n              </StyledCaption>\n            )}\n          </StyledImageContainer>\n        )\n      })}\n    </StyledImageList>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n}))\n\nexport const StyledImageContainer = styled.div(() => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: \"0.125rem\",\n}))\n"],"names":["WidthBehavior","StyledImageList","display","flexDirection","flexWrap","rowGap","theme","spacing","lg","StyledImageContainer","alignItems","width","flexGrow","StyledCaption","fontFamily","genericFonts","bodyFont","fontSize","fontSizes","sm","color","colors","fadedText60","textAlign","marginTop","xs","wordWrap","padding","withFullScreenWrapper","containerWidth","isFullScreen","element","height","endpoints","images","useStliteImageList","imgs","protoWidth","OriginalWidth","AutoWidth","undefined","ColumnWidth","Error","imgStyle","maxHeight","maxWidth","style","map","iimage","idx","image","markup","ReactHtmlParser","xssSanitizeSvg","src","buildMediaURL","url","alt","toString","caption"],"sourceRoot":""}