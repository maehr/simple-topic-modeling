{"version":3,"file":"static/js/258.46a69dec.chunk.js","mappings":"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","sources":["../../../node_modules/native-file-system-adapter/src/adapters/memory.js"],"sourcesContent":["import { errors } from '../util.js'\nimport config from '../config.js'\n\nconst { File, Blob, DOMException } = config\nconst { INVALID, GONE, MISMATCH, MOD_ERR, SYNTAX, SECURITY, DISALLOWED } = errors\n\nexport class Sink {\n\n  /**\n   * @param {FileHandle} fileHandle\n   * @param {File} file\n   */\n  constructor (fileHandle, file) {\n    this.fileHandle = fileHandle\n    this.file = file\n    this.size = file.size\n    this.position = 0\n  }\n\n  write (chunk) {\n    let file = this.file\n\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.position = chunk.position\n          if (this.size < chunk.position) {\n            this.file = new File(\n              [this.file, new ArrayBuffer(chunk.position - this.size)],\n              this.file.name,\n              this.file\n            )\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException(...SYNTAX('write requires a data argument'))\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          if (this.size < chunk.position) {\n            throw new DOMException(...INVALID)\n          }\n          this.position = chunk.position\n          return\n        } else {\n          throw new DOMException(...SYNTAX('seek requires a position argument'))\n        }\n      } else if (chunk.type === 'truncate') {\n        if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n          file = chunk.size < this.size\n            ? new File([file.slice(0, chunk.size)], file.name, file)\n            : new File([file, new Uint8Array(chunk.size - this.size)], file.name)\n\n          this.size = file.size\n          if (this.position > file.size) {\n            this.position = file.size\n          }\n          this.file = file\n          return\n        } else {\n          throw new DOMException(...SYNTAX('truncate requires a size argument'))\n        }\n      }\n    }\n\n    chunk = new Blob([chunk])\n\n    let blob = this.file\n    // Calc the head and tail fragments\n    const head = blob.slice(0, this.position)\n    const tail = blob.slice(this.position + chunk.size)\n\n    // Calc the padding\n    let padding = this.position - head.size\n    if (padding < 0) {\n      padding = 0\n    }\n    blob = new File([\n      head,\n      new Uint8Array(padding),\n      chunk,\n      tail\n    ], blob.name)\n\n    this.size = blob.size\n    this.position += chunk.size\n\n    this.file = blob\n  }\n  close () {\n    if (this.fileHandle._deleted) throw new DOMException(...GONE)\n    this.fileHandle._file = this.file\n    this.file =\n    this.position =\n    this.size = null\n    if (this.fileHandle.onclose) {\n      this.fileHandle.onclose(this.fileHandle)\n    }\n  }\n}\n\nexport class FileHandle {\n  constructor (name = '', file = new File([], name), writable = true) {\n    this._file = file\n    this.name = name\n    this.kind = 'file'\n    this._deleted = false\n    this.writable = writable\n    this.readable = true\n  }\n\n  async getFile () {\n    if (this._deleted) throw new DOMException(...GONE)\n    return this._file\n  }\n\n  async createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n    if (this._deleted) throw new DOMException(...GONE)\n\n    const file = opts.keepExistingData\n      ? await this.getFile()\n      : new File([], this.name)\n\n    return new Sink(this, file)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  async _destroy () {\n    this._deleted = true\n    this._file = null\n  }\n}\n\nexport class FolderHandle {\n\n  /** @param {string} name */\n  constructor (name, writable = true) {\n    this.name = name\n    this.kind = 'directory'\n    this._deleted = false\n    /** @type {Object.<string, (FolderHandle|FileHandle)>} */\n    this._entries = {}\n    this.writable = writable\n    this.readable = true\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    if (this._deleted) throw new DOMException(...GONE)\n    yield* Object.entries(this._entries)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getDirectoryHandle (name, opts) {\n    if (this._deleted) throw new DOMException(...GONE)\n    const entry = this._entries[name]\n    if (entry) { // entry exist\n      if (entry instanceof FileHandle) {\n        throw new DOMException(...MISMATCH)\n      } else {\n        return entry\n      }\n    } else {\n      if (opts.create) {\n        return (this._entries[name] = new FolderHandle(name))\n      } else {\n        throw new DOMException(...GONE)\n      }\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getFileHandle (name, opts) {\n    const entry = this._entries[name]\n    const isFile = entry instanceof FileHandle\n    if (entry && isFile) return entry\n    if (entry && !isFile) throw new DOMException(...MISMATCH)\n    if (!entry && !opts.create) throw new DOMException(...GONE)\n    if (!entry && opts.create) {\n      return (this._entries[name] = new FileHandle(name))\n    }\n  }\n\n  async removeEntry (name, opts) {\n    const entry = this._entries[name]\n    if (!entry) throw new DOMException(...GONE)\n    await entry._destroy(opts.recursive)\n    delete this._entries[name]\n  }\n\n  async _destroy (recursive) {\n    for (let x of Object.values(this._entries)) {\n      if (!recursive) throw new DOMException(...MOD_ERR)\n      await x._destroy(recursive)\n    }\n    this._entries = {}\n    this._deleted = true\n  }\n}\n\nconst fs = new FolderHandle('')\n\nexport default () => fs\n"],"names":["File","Blob","DOMException","config","INVALID","GONE","MISMATCH","MOD_ERR","SYNTAX","SECURITY","DISALLOWED","errors","Sink","constructor","fileHandle","file","this","size","position","write","chunk","type","Number","isInteger","ArrayBuffer","name","data","slice","Uint8Array","blob","head","tail","padding","close","_deleted","_file","onclose","FileHandle","arguments","length","undefined","writable","kind","readable","getFile","createWritable","opts","keepExistingData","isSameEntry","other","_destroy","FolderHandle","_entries","entries","Object","getDirectoryHandle","entry","create","getFileHandle","isFile","removeEntry","recursive","x","values","fs"],"sourceRoot":""}