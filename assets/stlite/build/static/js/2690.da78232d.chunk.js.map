{"version":3,"file":"static/js/2690.da78232d.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/src/lib/components/widgets/Slider/styled-components.ts","../../../streamlit/frontend/src/lib/components/widgets/Slider/Slider.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\n\nexport interface StyledSliderProps {\n  disabled: boolean\n}\n\nexport const StyledThumb = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    alignItems: \"center\",\n    backgroundColor: disabled ? theme.colors.gray : theme.colors.primary,\n    borderTopLeftRadius: \"100%\",\n    borderTopRightRadius: \"100%\",\n    borderBottomLeftRadius: \"100%\",\n    borderBottomRightRadius: \"100%\",\n    borderTopStyle: \"none\",\n    borderBottomStyle: \"none\",\n    borderRightStyle: \"none\",\n    borderLeftStyle: \"none\",\n    boxShadow: \"none\",\n    display: \"flex\",\n    height: theme.radii.xl,\n    justifyContent: \"center\",\n    width: theme.radii.xl,\n    \":focus\": {\n      outline: \"none\",\n    },\n    \":focus-visible\": {\n      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`,\n    },\n  })\n)\n\nexport const StyledThumbValue = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    fontFamily: theme.genericFonts.codeFont,\n    fontSize: theme.fontSizes.sm,\n    paddingBottom: theme.spacing.twoThirdsSmFont,\n    color: disabled ? theme.colors.gray : theme.colors.primary,\n    top: \"-22px\",\n    position: \"absolute\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: theme.colors.transparent,\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n  })\n)\n\nexport const StyledTickBar = styled.div(({ theme }) => ({\n  paddingBottom: theme.spacing.none,\n  paddingLeft: theme.spacing.none,\n  paddingRight: theme.spacing.none,\n  paddingTop: theme.spacing.twoThirdsSmFont,\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledTickBarItem = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n    fontSize: theme.fontSizes.sm,\n    fontFamily: theme.genericFonts.codeFont,\n    color: disabled ? theme.colors.fadedText40 : \"inherit\",\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { pick } from \"lodash\"\nimport { StyleProps, Slider as UISlider } from \"baseui/slider\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport { Slider as SliderProto } from \"src/lib/proto\"\nimport { debounce, labelVisibilityProtoValueToEnum } from \"src/lib/util/utils\"\nimport moment from \"moment\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/lib/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/lib/components/shared/TooltipIcon\"\nimport { Placement } from \"src/lib/components/shared/Tooltip\"\nimport { EmotionTheme } from \"src/lib/theme\"\nimport {\n  StyledThumb,\n  StyledThumbValue,\n  StyledTickBar,\n  StyledTickBarItem,\n} from \"./styled-components\"\n\nconst DEBOUNCE_TIME_MS = 200\n\nexport interface Props {\n  disabled: boolean\n  element: SliderProto\n  theme: EmotionTheme\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number[]\n}\n\nclass Slider extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State\n\n  private sliderRef = React.createRef<HTMLDivElement>()\n\n  private thumbRef: React.MutableRefObject<HTMLDivElement>[] = []\n\n  private thumbValueRef: React.RefObject<HTMLDivElement>[] = []\n\n  private readonly commitWidgetValueDebounced: (source: Source) => void\n\n  public constructor(props: Props) {\n    super(props)\n    this.commitWidgetValueDebounced = debounce(\n      DEBOUNCE_TIME_MS,\n      this.commitWidgetValue.bind(this)\n    )\n    this.state = { value: this.initialValue }\n  }\n\n  get initialValue(): number[] {\n    const storedValue = this.props.widgetMgr.getDoubleArrayValue(\n      this.props.element\n    )\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    // Check default thumb value's alignment vs. slider container\n    for (\n      let i = 0;\n      i < Math.min(this.thumbRef.length, this.thumbValueRef.length);\n      i++\n    ) {\n      this.thumbValueAlignment(\n        this.thumbRef[i].current,\n        this.thumbValueRef[i].current\n      )\n    }\n\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setDoubleArrayValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({ value }: { value: number[] }): void => {\n    this.setState({ value }, () =>\n      this.commitWidgetValueDebounced({ fromUi: true })\n    )\n  }\n\n  /**\n   * Return the value of the slider. This will either be an array with\n   * one value (for a single value slider), or an array with two\n   * values (for a range slider).\n   */\n  private get value(): number[] {\n    const { min, max } = this.props.element\n    const { value } = this.state\n    let start = value[0]\n    let end = value.length > 1 ? value[1] : value[0]\n    // Adjust the value if it's out of bounds.\n    if (start > end) {\n      start = end\n    }\n    if (start < min) {\n      start = min\n    }\n    if (start > max) {\n      start = max\n    }\n    if (end < min) {\n      end = min\n    }\n    if (end > max) {\n      end = max\n    }\n    return value.length > 1 ? [start, end] : [start]\n  }\n\n  private isDateTimeType(): boolean {\n    const { dataType } = this.props.element\n    return (\n      dataType === SliderProto.DataType.DATETIME ||\n      dataType === SliderProto.DataType.DATE ||\n      dataType === SliderProto.DataType.TIME\n    )\n  }\n\n  private formatValue(value: number): string {\n    const { format, options } = this.props.element\n    if (this.isDateTimeType()) {\n      // Python datetime uses microseconds, but JS & Moment uses milliseconds\n      // The timestamp is always set to the UTC timezone, even so, the actual timezone\n      // for this timestamp in the backend could be different.\n      // However, the frontend component does not need to know about the actual timezone.\n      return moment.utc(value / 1000).format(format)\n    }\n\n    if (options.length > 0) {\n      return sprintf(format, options[value])\n    }\n\n    return sprintf(format, value)\n  }\n\n  private thumbValueAlignment(\n    thumb: HTMLDivElement | null,\n    thumbValue: HTMLDivElement | null\n  ): void {\n    const slider = this.sliderRef.current\n\n    if (slider && thumb && thumbValue) {\n      const sliderPosition = slider.getBoundingClientRect()\n      const thumbPosition = thumb.getBoundingClientRect()\n      const thumbValuePosition = thumbValue.getBoundingClientRect()\n\n      const thumbMidpoint = thumbPosition.left + thumbPosition.width / 2\n      const thumbValueOverflowsLeft =\n        thumbMidpoint - thumbValuePosition.width / 2 < sliderPosition.left\n      const thumbValueOverflowsRight =\n        thumbMidpoint + thumbValuePosition.width / 2 > sliderPosition.right\n\n      thumbValue.style.left = thumbValueOverflowsLeft ? \"0\" : \"\"\n      thumbValue.style.right = thumbValueOverflowsRight ? \"0\" : \"\"\n    }\n  }\n\n  // eslint-disable-next-line react/display-name\n  private renderThumb = React.forwardRef<HTMLDivElement, StyleProps>(\n    (props: StyleProps, ref): JSX.Element => {\n      const { $value, $thumbIndex } = props\n      const thumbIndex = $thumbIndex || 0\n      this.thumbRef[thumbIndex] = ref as React.MutableRefObject<HTMLDivElement>\n      this.thumbValueRef[thumbIndex] ||= React.createRef<HTMLDivElement>()\n\n      const formattedValue = $value\n        ? this.formatValue($value[$thumbIndex as number])\n        : \"\"\n      const passThrough = pick(props, [\n        \"role\",\n        \"style\",\n        \"aria-valuemax\",\n        \"aria-valuemin\",\n        \"aria-valuenow\",\n        \"tabIndex\",\n        \"onKeyUp\",\n        \"onKeyDown\",\n        \"onMouseEnter\",\n        \"onMouseLeave\",\n        \"draggable\",\n      ])\n      const ariaValueText: Record<string, string> = {}\n\n      if (this.props.element.options.length > 0 || this.isDateTimeType()) {\n        ariaValueText[\"aria-valuetext\"] = formattedValue\n      }\n\n      // Check the thumb value's alignment vs. slider container\n      this.thumbValueAlignment(\n        this.thumbRef[thumbIndex].current,\n        this.thumbValueRef[thumbIndex].current\n      )\n\n      return (\n        <StyledThumb\n          {...passThrough}\n          disabled={props.$disabled === true}\n          ref={this.thumbRef[thumbIndex]}\n          aria-valuetext={formattedValue}\n          aria-label={this.props.element.label}\n        >\n          <StyledThumbValue\n            className=\"StyledThumbValue\"\n            data-testid=\"stThumbValue\"\n            disabled={props.$disabled === true}\n            ref={this.thumbValueRef[thumbIndex]}\n          >\n            {formattedValue}\n          </StyledThumbValue>\n        </StyledThumb>\n      )\n    }\n  )\n\n  private renderTickBar = (): JSX.Element => {\n    const { disabled, element } = this.props\n    const { max, min } = element\n\n    return (\n      <StyledTickBar data-testid=\"stTickBar\">\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMin\">\n          {this.formatValue(min)}\n        </StyledTickBarItem>\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMax\">\n          {this.formatValue(max)}\n        </StyledTickBarItem>\n      </StyledTickBar>\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { disabled, element, theme, width, widgetMgr } = this.props\n    const { colors, fonts, fontSizes, spacing } = theme\n    const style = { width }\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div ref={this.sliderRef} className=\"stSlider\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UISlider\n          min={element.min}\n          max={element.max}\n          step={element.step}\n          value={this.value}\n          onChange={this.handleChange}\n          disabled={disabled}\n          overrides={{\n            Root: {\n              style: {\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            Thumb: this.renderThumb,\n            Tick: {\n              style: {\n                fontFamily: fonts.monospace,\n                fontSize: fontSizes.sm,\n              },\n            },\n            Track: {\n              style: {\n                backgroundColor: \"none !important\",\n                paddingBottom: 0,\n                paddingLeft: 0,\n                paddingRight: 0,\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            InnerTrack: {\n              style: ({ $disabled }: StyleProps) => ({\n                height: \"4px\",\n                ...($disabled ? { background: colors.darkenedBgMix25 } : {}),\n              }),\n            },\n            TickBar: this.renderTickBar,\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Slider)\n"],"names":["StyledThumb","disabled","theme","alignItems","backgroundColor","colors","gray","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderTopStyle","borderBottomStyle","borderRightStyle","borderLeftStyle","boxShadow","display","height","radii","xl","justifyContent","width","outline","transparentize","StyledThumbValue","fontFamily","genericFonts","codeFont","fontSize","fontSizes","sm","paddingBottom","spacing","twoThirdsSmFont","color","top","position","whiteSpace","transparent","lineHeight","lineHeights","base","fontWeight","StyledTickBar","none","paddingLeft","paddingRight","paddingTop","StyledTickBarItem","fadedText40","Slider","props","formClearHelper","FormClearHelper","state","sliderRef","React","thumbRef","thumbValueRef","commitWidgetValueDebounced","commitWidgetValue","source","widgetMgr","setDoubleArrayValue","element","value","onFormCleared","setState","_","prevProps","default","fromUi","handleChange","renderThumb","ref","$value","$thumbIndex","thumbIndex","formattedValue","formatValue","passThrough","pick","options","length","isDateTimeType","thumbValueAlignment","current","$disabled","label","className","renderTickBar","max","min","debounce","bind","initialValue","storedValue","this","getDoubleArrayValue","undefined","i","Math","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","start","end","dataType","SliderProto","format","moment","sprintf","thumb","thumbValue","slider","sliderPosition","getBoundingClientRect","thumbPosition","thumbValuePosition","thumbMidpoint","left","thumbValueOverflowsLeft","thumbValueOverflowsRight","right","style","fonts","manageFormClearListener","formId","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","content","placement","Placement","step","onChange","overrides","Root","Thumb","Tick","monospace","Track","InnerTrack","background","darkenedBgMix25","TickBar","withTheme"],"sourceRoot":""}