{"version":3,"file":"static/js/2825.39de2e9d.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Selectbox/Selectbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport { Selectbox as SelectboxProto } from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport UISelectbox from \"@streamlit/lib/src/components/shared/Dropdown\"\nimport {\n  labelVisibilityProtoValueToEnum,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface Props {\n  disabled: boolean\n  element: SelectboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number | null\n}\n\nexport class Selectbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number | null {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue ?? this.props.element.default ?? null\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value: value ?? null }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setIntValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default ?? null }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (value: number | null): void => {\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const { options, help, label, labelVisibility, formId, placeholder } =\n      this.props.element\n    const { disabled, widgetMgr } = this.props\n    const clearable =\n      isNullOrUndefined(this.props.element.default) && !disabled\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UISelectbox\n        label={label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          labelVisibility?.value\n        )}\n        options={options}\n        disabled={disabled}\n        width={this.props.width}\n        onChange={this.onChange}\n        value={this.state.value}\n        help={help}\n        placeholder={placeholder}\n        clearable={clearable}\n      />\n    )\n  }\n}\n\nexport default withTheme(Selectbox)\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","Selectbox","React","arguments","formClearHelper","state","value","initialValue","commitWidgetValue","source","props","setIntValue","element","onFormCleared","setState","_","prevProps","_prevProps$element$de","default","fromUi","onChange","_ref","storedValue","getIntValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","render","options","help","label","labelVisibility","placeholder","disabled","clearable","isNullOrUndefined","_jsx","UISelectbox","labelVisibilityProtoValueToEnum","width","withTheme"],"sourceRoot":""}