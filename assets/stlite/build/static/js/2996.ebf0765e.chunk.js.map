{"version":3,"file":"static/js/2996.ebf0765e.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/Toast/styled-components.tsx","../../../streamlit/frontend/lib/src/components/elements/Toast/Toast.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledViewButton = styled.button(({ theme }) => ({\n  fontSize: theme.fontSizes.sm,\n  lineHeight: \"1.4rem\",\n  color: theme.colors.gray60,\n  backgroundColor: theme.colors.transparent,\n  border: \"none\",\n  boxShadow: \"none\",\n  padding: \"0px\",\n  \"&:hover, &:active, &:focus\": {\n    border: \"none\",\n    outline: \"none\",\n    boxShadow: \"none\",\n  },\n  \"&:hover\": {\n    color: theme.colors.primary,\n  },\n}))\n\ninterface StyledToastMessageProps {\n  expanded: boolean\n}\n\nexport const StyledToastMessage = styled.div<StyledToastMessageProps>(\n  ({ theme, expanded }) => ({\n    maxHeight: expanded ? \"none\" : theme.breakpoints.toast,\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { toaster, ToastOverrides } from \"baseui/toast\"\n\nimport {\n  hasLightBackgroundColor,\n  EmotionTheme,\n} from \"@streamlit/lib/src/theme\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport { Kind } from \"@streamlit/lib/src/components/shared/AlertContainer\"\nimport AlertElement from \"@streamlit/lib/src/components/elements/AlertElement/AlertElement\"\n\nimport { StyledViewButton, StyledToastMessage } from \"./styled-components\"\n\nexport interface ToastProps {\n  theme: EmotionTheme\n  body: string\n  icon?: string\n  width: number\n}\n\nfunction generateToastOverrides(\n  expanded: boolean,\n  theme: EmotionTheme\n): ToastOverrides {\n  const lightBackground = hasLightBackgroundColor(theme)\n  return {\n    Body: {\n      props: {\n        \"data-testid\": \"stToast\",\n      },\n      style: {\n        width: \"288px\",\n        marginTop: \"8px\",\n        // Warnings logged if you use shorthand property here:\n        borderTopLeftRadius: theme.radii.lg,\n        borderTopRightRadius: theme.radii.lg,\n        borderBottomLeftRadius: theme.radii.lg,\n        borderBottomRightRadius: theme.radii.lg,\n        backgroundColor: lightBackground\n          ? theme.colors.gray10\n          : theme.colors.gray90,\n        color: theme.colors.bodyText,\n        // Take standard BaseWeb shadow and adjust for dark backgrounds\n        boxShadow: lightBackground\n          ? \"0px 4px 16px rgba(0, 0, 0, 0.16)\"\n          : \"0px 4px 16px rgba(0, 0, 0, 0.7)\",\n      },\n    },\n    InnerContainer: {\n      style: {\n        maxHeight: expanded ? \"none\" : \"88px\",\n        overflow: \"hidden\",\n        fontSize: theme.fontSizes.sm,\n        lineHeight: \"1.4rem\",\n      },\n    },\n    CloseIcon: {\n      style: {\n        color: theme.colors.bodyText,\n        marginRight: \"-5px\",\n        width: \"1.2rem\",\n        height: \"1.2rem\",\n      },\n    },\n  }\n}\n\n// Function used to truncate toast messages that are longer than three lines.\nfunction shortenMessage(fullMessage: string): string {\n  const characterLimit = 114\n\n  if (fullMessage.length > characterLimit) {\n    let message = fullMessage.replace(/^(.{114}[^\\s]*).*/, \"$1\")\n\n    if (message.length > characterLimit) {\n      message = message.split(\" \").slice(0, -1).join(\" \")\n    }\n\n    return message\n  }\n\n  return fullMessage\n}\n\nexport function Toast({ theme, body, icon, width }: ToastProps): ReactElement {\n  const fullMessage = icon ? `${icon}&ensp;${body}` : body\n  const displayMessage = shortenMessage(fullMessage)\n  const shortened = fullMessage !== displayMessage\n\n  const [expanded, setExpanded] = useState(!shortened)\n  const [toastKey, setToastKey] = useState<React.Key>(0)\n\n  const handleClick = useCallback((): void => {\n    setExpanded(!expanded)\n  }, [expanded])\n\n  const styleOverrides = useMemo(\n    () => generateToastOverrides(expanded, theme),\n    [expanded, theme]\n  )\n\n  const toastContent = useMemo(\n    () => (\n      <>\n        <StyledToastMessage expanded={expanded}>\n          <StreamlitMarkdown\n            source={expanded ? fullMessage : displayMessage}\n            allowHTML={false}\n            isToast\n          />\n        </StyledToastMessage>\n        {shortened && (\n          <StyledViewButton\n            data-testid=\"toastViewButton\"\n            className=\"toastViewButton\"\n            onClick={handleClick}\n          >\n            {expanded ? \"view less\" : \"view more\"}\n          </StyledViewButton>\n        )}\n      </>\n    ),\n    [shortened, expanded, fullMessage, displayMessage, handleClick]\n  )\n\n  useEffect(() => {\n    // Handles the error case where st.sidebar.toast is called since\n    // baseweb would throw error anyway (no toast container in sidebar)\n    if (theme.inSidebar) return\n\n    // Uses toaster utility to create toast on mount and generate unique key\n    // to reference that toast for update/removal\n    const newKey = toaster.info(toastContent, {\n      overrides: { ...styleOverrides },\n    })\n    setToastKey(newKey)\n\n    return () => {\n      // Disable transition so toast doesn't flicker on removal\n      toaster.update(newKey, {\n        overrides: { Body: { style: { transitionDuration: 0 } } },\n      })\n      // Remove toast on unmount\n      toaster.clear(newKey)\n    }\n\n    // Array must be empty to run as mount/cleanup\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    // Handles expand/collapse button behavior for long toast messages\n    toaster.update(toastKey, {\n      children: toastContent,\n      overrides: { ...styleOverrides },\n    })\n  }, [toastKey, toastContent, styleOverrides])\n\n  const sidebarErrorMessage = (\n    <AlertElement\n      kind={Kind.ERROR}\n      body=\"Streamlit API Error: `st.toast` cannot be called directly on the sidebar with `st.sidebar.toast`.\n        See our `st.toast` API [docs](https://docs.streamlit.io/library/api-reference/status/st.toast) for more information.\"\n      width={width}\n    />\n  )\n  return (\n    // Shows error if toast is called on st.sidebar\n    <>{theme.inSidebar && sidebarErrorMessage}</>\n  )\n}\n\nexport default withTheme(Toast)\n"],"names":["StyledViewButton","_styled","target","_ref","theme","fontSize","fontSizes","sm","lineHeight","color","colors","gray60","backgroundColor","transparent","border","boxShadow","padding","outline","primary","StyledToastMessage","_ref2","expanded","maxHeight","breakpoints","toast","withTheme","body","icon","width","fullMessage","concat","displayMessage","length","message","replace","split","slice","join","shortenMessage","shortened","setExpanded","useState","toastKey","setToastKey","handleClick","useCallback","styleOverrides","useMemo","lightBackground","hasLightBackgroundColor","Body","props","style","marginTop","borderTopLeftRadius","radii","lg","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","gray10","gray90","bodyText","InnerContainer","overflow","CloseIcon","marginRight","height","generateToastOverrides","toastContent","_jsxs","_Fragment","children","_jsx","StreamlitMarkdown","source","allowHTML","isToast","className","onClick","useEffect","inSidebar","newKey","toaster","overrides","transitionDuration","sidebarErrorMessage","AlertElement","kind","Kind"],"sourceRoot":""}