{"version":3,"file":"static/js/3359.d5df9d85.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/src/lib/components/shared/ProgressBar/ProgressBar.tsx","../../../streamlit/frontend/src/lib/components/widgets/CameraInput/styled-components.ts","../../../streamlit/frontend/src/lib/components/widgets/CameraInput/CameraInputButton.tsx","../../../streamlit/frontend/src/lib/components/widgets/CameraInput/SwitchFacingModeButton.tsx","../../../streamlit/frontend/src/lib/components/widgets/CameraInput/WebcamComponent.tsx","../../../streamlit/frontend/src/lib/components/widgets/CameraInput/CameraInput.tsx","../../../streamlit/frontend/src/lib/components/widgets/FileUploader/UploadFileInfo.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { EmotionTheme, isPresetTheme } from \"src/lib/theme\"\nimport {\n  ProgressBar as UIProgressBar,\n  ProgressBarOverrides,\n} from \"baseui/progress-bar\"\nimport { mergeOverrides } from \"baseui\"\nimport { Overrides } from \"baseui/overrides\"\nimport { LibContext } from \"src/lib/components/core/LibContext\"\n\nexport enum Size {\n  EXTRASMALL = \"xs\",\n  SMALL = \"sm\",\n  MEDIUM = \"md\",\n  LARGE = \"lg\",\n  EXTRALARGE = \"xl\",\n}\n\nexport interface ProgressBarProps {\n  width?: number\n  value: number\n  overrides?: Overrides<any>\n  size?: Size\n}\n\nfunction ProgressBar({\n  value,\n  width,\n  size = Size.SMALL,\n  overrides,\n}: ProgressBarProps): ReactElement {\n  const theme: EmotionTheme = useTheme()\n  const heightMap = {\n    xs: theme.spacing.twoXS,\n    sm: theme.spacing.sm,\n    md: theme.spacing.lg,\n    lg: theme.spacing.xl,\n    xl: theme.spacing.twoXL,\n  }\n  const { activeTheme } = React.useContext(LibContext)\n  const usingCustomTheme = !isPresetTheme(activeTheme)\n  const defaultOverrides: Overrides<ProgressBarOverrides> = {\n    BarContainer: {\n      style: {\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n      },\n    },\n    Bar: {\n      style: ({ $theme }: { $theme: any }) => ({\n        width: width ? width.toString() : undefined,\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n        height: heightMap[size],\n        backgroundColor: $theme.colors.progressbarTrackFill,\n        borderTopLeftRadius: theme.spacing.twoXS,\n        borderTopRightRadius: theme.spacing.twoXS,\n        borderBottomLeftRadius: theme.spacing.twoXS,\n        borderBottomRightRadius: theme.spacing.twoXS,\n      }),\n    },\n    BarProgress: {\n      style: () => ({\n        backgroundColor: usingCustomTheme\n          ? theme.colors.primary\n          : theme.colors.blue70,\n        borderTopLeftRadius: theme.spacing.twoXS,\n        borderTopRightRadius: theme.spacing.twoXS,\n        borderBottomLeftRadius: theme.spacing.twoXS,\n        borderBottomRightRadius: theme.spacing.twoXS,\n      }),\n    },\n  }\n\n  return (\n    <UIProgressBar\n      value={value}\n      overrides={mergeOverrides(defaultOverrides, overrides)}\n    />\n  )\n}\n\nexport default ProgressBar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { CSSObject } from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\nimport { MouseEvent, ReactNode } from \"react\"\nimport { EmotionTheme } from \"src/lib/theme\"\n\nexport interface CameraInputButtonProps {\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => any\n  disabled?: boolean\n  children: ReactNode\n  progress?: number | null\n}\n\nexport interface StyledCameraInputProps {\n  width: number\n}\n\nenum Size {\n  XSMALL = \"xsmall\",\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n}\n\nfunction getSizeStyle(size: Size, theme: EmotionTheme): CSSObject {\n  switch (size) {\n    case Size.XSMALL:\n      return {\n        padding: `${theme.spacing.twoXS} ${theme.spacing.sm}`,\n        fontSize: theme.fontSizes.sm,\n      }\n    case Size.SMALL:\n      return {\n        padding: `${theme.spacing.twoXS} ${theme.spacing.md}`,\n      }\n    case Size.LARGE:\n      return {\n        padding: `${theme.spacing.md} ${theme.spacing.md}`,\n      }\n    default:\n      return {\n        padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n      }\n  }\n}\n\ntype RequiredCameraInputButtonProps = Required<CameraInputButtonProps>\n\nexport const StyledCameraInput = styled.div<StyledCameraInputProps>(() => ({\n  // This is used to position the \"Switch facing mode\" button\n  // with respect to the webcam block.\n  position: \"relative\",\n  overflow: \"hidden\",\n  width: \"100%\",\n  objectFit: \"contain\",\n}))\n\nexport interface StyledBoxProps {\n  width: number\n}\n\nexport const StyledBox = styled.div<StyledBoxProps>(({ theme, width }) => ({\n  backgroundColor: theme.colors.secondaryBg,\n  borderRadius: `${theme.radii.lg} ${theme.radii.lg} 0 0`,\n  width: \"100%\",\n  height: (width * 9) / 16,\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n}))\n\nexport const StyledDescription = styled.p(({ theme }) => ({\n  marginTop: theme.spacing.sm,\n  textAlign: \"center\",\n}))\n\nexport interface StyledImgProps {\n  opacity: string\n}\n\nexport const StyledImg = styled.img<StyledImgProps>(({ theme, opacity }) => ({\n  borderRadius: `${theme.radii.lg} ${theme.radii.lg} 0 0`,\n  objectFit: \"contain\",\n  opacity,\n}))\n\nexport const StyledLink = styled.a(({ theme }) => ({\n  color: theme.colors.primary,\n  display: \"block\",\n  textDecoration: \"none\",\n}))\n\nexport const StyledSpan = styled.span(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n}))\n\nexport const StyledSwitchFacingModeButton = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  top: theme.spacing.lg,\n  right: theme.spacing.lg,\n  zIndex: 1,\n  color: theme.colors.fadedText40,\n  mixBlendMode: \"difference\",\n  opacity: 0.6,\n}))\n\nexport const StyledWebcamWrapper = styled.div(() => ({\n  display: \"flex\",\n}))\n\nexport const StyledProgressBar = styled.div(() => ({\n  height: \"fit-content\",\n  width: \"100%\",\n  position: \"absolute\",\n  bottom: 0,\n}))\n\nexport const StyledCameraInputBaseButton =\n  styled.button<RequiredCameraInputButtonProps>(({ theme }) => ({\n    position: \"relative\",\n    display: \"inline-flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: theme.colors.lightenedBg05,\n    border: `1px solid ${theme.colors.fadedText10}`,\n    borderRadius: `0 0 ${theme.radii.lg} ${theme.radii.lg}`,\n    \"&:hover\": {\n      borderColor: theme.colors.primary,\n      color: theme.colors.primary,\n    },\n    \"&:active\": {\n      color: theme.colors.white,\n      borderColor: theme.colors.primary,\n      backgroundColor: theme.colors.primary,\n    },\n    \"&:focus:not(:active)\": {\n      borderColor: theme.colors.primary,\n      color: theme.colors.primary,\n    },\n    \"&:disabled, &:disabled:hover, &:disabled:active\": {\n      color: theme.colors.fadedText40,\n    },\n    fontWeight: theme.fontWeights.normal,\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    margin: 0,\n    lineHeight: theme.lineHeights.base,\n    color: \"inherit\",\n    width: \"100%\",\n    userSelect: \"none\",\n    \"&:focus\": {\n      outline: \"none\",\n    },\n    \"&:focus-visible\": {\n      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`,\n    },\n    ...getSizeStyle(Size.MEDIUM, theme),\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { MouseEvent, ReactElement, ReactNode } from \"react\"\n\nimport ProgressBar, {\n  Size as ProgressBarSize,\n} from \"src/lib/components/shared/ProgressBar\"\nimport {\n  StyledCameraInputBaseButton,\n  StyledProgressBar,\n} from \"./styled-components\"\n\nexport interface CameraInputButtonProps {\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => any\n  disabled?: boolean\n  children: ReactNode\n  progress?: number | null\n}\n\nfunction CameraInputButton({\n  disabled,\n  onClick,\n  children,\n  progress,\n}: CameraInputButtonProps): ReactElement {\n  return (\n    <StyledCameraInputBaseButton\n      disabled={disabled || false}\n      onClick={onClick || (() => {})}\n      progress={progress || null}\n      data-testid=\"stCameraInputButton\"\n    >\n      {children}\n      {progress && (\n        <StyledProgressBar>\n          <ProgressBar\n            value={progress}\n            size={ProgressBarSize.EXTRASMALL}\n            overrides={{\n              Bar: {\n                style: {\n                  borderTopLeftRadius: \"0px\",\n                  borderTopRightRadius: \"0px\",\n                },\n              },\n              BarProgress: {\n                style: {\n                  borderTopLeftRadius: \"0px\",\n                  borderTopRightRadius: \"0px\",\n                },\n              },\n              BarContainer: {\n                style: {\n                  borderTopLeftRadius: \"0px\",\n                  borderTopRightRadius: \"0px\",\n                },\n              },\n            }}\n          />\n        </StyledProgressBar>\n      )}\n    </StyledCameraInputBaseButton>\n  )\n}\n\nexport default CameraInputButton\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { SwitchCamera } from \"@emotion-icons/material-rounded\"\n\nimport BaseButton, {\n  BaseButtonKind,\n} from \"src/lib/components/shared/BaseButton\"\nimport Icon from \"src/lib/components/shared/Icon\"\nimport Tooltip, { Placement } from \"src/lib/components/shared/Tooltip\"\nimport themeColors from \"src/lib/theme/emotionBaseTheme/themeColors\"\nimport { StyledSwitchFacingModeButton } from \"./styled-components\"\n\nexport enum FacingMode {\n  USER = \"user\",\n  ENVIRONMENT = \"environment\",\n}\n\nexport interface SwitchFacingModeButtonProps {\n  switchFacingMode: () => void\n}\n\nconst SwitchFacingModeButton = ({\n  switchFacingMode,\n}: SwitchFacingModeButtonProps): ReactElement => {\n  return (\n    <StyledSwitchFacingModeButton>\n      <Tooltip content={\"Switch camera\"} placement={Placement.TOP_RIGHT}>\n        <BaseButton kind={BaseButtonKind.MINIMAL} onClick={switchFacingMode}>\n          <Icon\n            content={SwitchCamera}\n            size=\"twoXL\"\n            color={themeColors.white}\n          />\n        </BaseButton>\n      </Tooltip>\n    </StyledSwitchFacingModeButton>\n  )\n}\n\nexport default SwitchFacingModeButton\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Video } from \"@emotion-icons/open-iconic\"\nimport { useTheme } from \"@emotion/react\"\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { isMobile } from \"react-device-detect\"\nimport Webcam from \"react-webcam\"\nimport { debounce } from \"src/lib/util/utils\"\n\nimport Icon from \"src/lib/components/shared/Icon\"\nimport { EmotionTheme } from \"src/lib/theme\"\nimport themeColors from \"src/lib/theme/emotionBaseTheme/themeColors\"\nimport { CAMERA_PERMISSION_URL } from \"src/lib/urls\"\n\nimport CameraInputButton from \"./CameraInputButton\"\nimport SwitchFacingModeButton, { FacingMode } from \"./SwitchFacingModeButton\"\nimport {\n  StyledBox,\n  StyledCameraInput,\n  StyledDescription,\n  StyledLink,\n} from \"./styled-components\"\n\nexport interface Props {\n  handleCapture: (capturedPhoto: string | null) => void\n  width: number\n  disabled: boolean\n  clearPhotoInProgress: boolean\n  setClearPhotoInProgress: (clearPhotoInProgress: boolean) => void\n  facingMode: FacingMode\n  setFacingMode: () => void\n}\n\nexport enum WebcamPermission {\n  PENDING = \"pending\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\n\ninterface AskForCameraPermissionProps {\n  width: number\n}\n\nexport const AskForCameraPermission = ({\n  width,\n}: AskForCameraPermissionProps): ReactElement => {\n  return (\n    <StyledBox width={width}>\n      <Icon size=\"threeXL\" color={themeColors.gray60} content={Video} />\n      <StyledDescription>\n        This app would like to use your camera.\n        <StyledLink\n          href={CAMERA_PERMISSION_URL}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Learn how to allow access.\n        </StyledLink>\n      </StyledDescription>\n    </StyledBox>\n  )\n}\n\nconst WebcamComponent = ({\n  handleCapture,\n  width,\n  disabled,\n  clearPhotoInProgress,\n  setClearPhotoInProgress,\n  facingMode,\n  setFacingMode,\n}: Props): ReactElement => {\n  const [webcamPermission, setWebcamPermissionState] = useState(\n    WebcamPermission.PENDING\n  )\n  const videoRef = useRef<Webcam>(null)\n\n  const [debouncedWidth, setDebouncedWidth] = useState(width)\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const memoizedSetDebouncedCallback = useCallback(\n    debounce(1000, setDebouncedWidth),\n    []\n  )\n\n  useEffect(() => {\n    memoizedSetDebouncedCallback(width)\n  }, [width, memoizedSetDebouncedCallback])\n\n  function capture(): void {\n    if (videoRef.current !== null) {\n      const imageSrc = videoRef.current.getScreenshot()\n      handleCapture(imageSrc)\n    }\n  }\n\n  const theme: EmotionTheme = useTheme()\n\n  return (\n    <StyledCameraInput width={debouncedWidth}>\n      {webcamPermission !== WebcamPermission.SUCCESS &&\n      !disabled &&\n      !clearPhotoInProgress ? (\n        <AskForCameraPermission width={debouncedWidth} />\n      ) : (\n        isMobile && <SwitchFacingModeButton switchFacingMode={setFacingMode} />\n      )}\n      <StyledBox\n        hidden={\n          webcamPermission !== WebcamPermission.SUCCESS &&\n          !disabled &&\n          !clearPhotoInProgress\n        }\n        width={debouncedWidth}\n      >\n        {!disabled && (\n          <Webcam\n            audio={false}\n            ref={videoRef}\n            screenshotFormat=\"image/jpeg\"\n            screenshotQuality={1}\n            width={debouncedWidth}\n            // We keep Aspect ratio of container always equal 16 / 9.\n            // The aspect ration of video stream may be different depending on a camera.\n            height={(debouncedWidth * 9) / 16}\n            style={{\n              borderRadius: `${theme.radii.lg} ${theme.radii.lg} 0 0`,\n            }}\n            onUserMediaError={() => {\n              setWebcamPermissionState(WebcamPermission.ERROR)\n            }}\n            onUserMedia={() => {\n              setWebcamPermissionState(WebcamPermission.SUCCESS)\n              setClearPhotoInProgress(false)\n            }}\n            videoConstraints={{\n              width: { ideal: debouncedWidth },\n              facingMode,\n            }}\n          />\n        )}\n      </StyledBox>\n      <CameraInputButton\n        onClick={capture}\n        disabled={\n          webcamPermission !== WebcamPermission.SUCCESS ||\n          disabled ||\n          clearPhotoInProgress\n        }\n      >\n        Take Photo\n      </CameraInputButton>\n    </StyledCameraInput>\n  )\n}\n\nexport default WebcamComponent\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { X } from \"@emotion-icons/open-iconic\"\nimport axios from \"axios\"\nimport _ from \"lodash\"\nimport React from \"react\"\n\nimport {\n  CameraInput as CameraInputProto,\n  FileUploaderState as FileUploaderStateProto,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"src/lib/proto\"\nimport Icon from \"src/lib/components/shared/Icon\"\nimport { Placement } from \"src/lib/components/shared/Tooltip\"\nimport TooltipIcon from \"src/lib/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"src/lib/components/widgets/BaseWidget\"\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport { FileUploadClient } from \"src/lib/FileUploadClient\"\nimport { logError } from \"src/lib/util/log\"\nimport { WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/util/utils\"\nimport {\n  UploadedStatus,\n  UploadFileInfo,\n  UploadingStatus,\n} from \"src/lib/components/widgets/FileUploader/UploadFileInfo\"\nimport CameraInputButton from \"./CameraInputButton\"\nimport { FacingMode } from \"./SwitchFacingModeButton\"\nimport {\n  StyledBox,\n  StyledCameraInput,\n  StyledSpan,\n  StyledImg,\n} from \"./styled-components\"\nimport WebcamComponent from \"./WebcamComponent\"\n\nexport interface Props {\n  element: CameraInputProto\n  widgetMgr: WidgetStateManager\n  uploadClient: FileUploadClient\n  disabled: boolean\n  width: number\n}\n\ntype FileUploaderStatus =\n  | \"ready\" // FileUploader can upload or delete files\n  | \"updating\" // at least one file is being uploaded or deleted\n\nexport interface State {\n  /**\n   * Base64-encoded image data of the current frame from the camera.\n   */\n  imgSrc: string | null\n\n  shutter: boolean\n\n  minShutterEffectPassed: boolean\n  /**\n   * List of files (snapshots) captured by the user.\n   * Should contain exact one element if the user has taken a snapshot.\n   */\n  files: UploadFileInfo[]\n\n  /**\n   * The most recent file ID we've received from the server. This gets sent\n   * back to the server during widget update so that it clean up\n   * orphaned files. File IDs start at 1 and only ever increase, so a\n   * file with a higher ID is guaranteed to be newer than one with a lower ID.\n   */\n  newestServerFileId: number\n\n  /**\n   * Represents whether the component is in clear photo mode,\n   * when snapshot removed and new Webcam component is not shown yet.\n   * Time interval between `Clear Photo` button clicked and access to Webcam received again\n   */\n  clearPhotoInProgress: boolean\n\n  /**\n   * User facing mode for mobile devices. If `user`, the camera will be facing the user (front camera).\n   * If `environment`, the camera will be facing the environment (back camera).\n   */\n  facingMode: FacingMode\n}\n\nconst MIN_SHUTTER_EFFECT_TIME_MS = 150\n\nclass CameraInput extends React.PureComponent<Props, State> {\n  private localFileIdCounter = 1\n\n  private RESTORED_FROM_WIDGET_STRING = \"RESTORED_FROM_WIDGET\"\n\n  private readonly formClearHelper = new FormClearHelper()\n\n  public constructor(props: Props) {\n    super(props)\n    this.state = this.initialValue\n  }\n\n  private getProgress = (): number | null | undefined => {\n    if (\n      this.state.files.length > 0 &&\n      this.state.files[this.state.files.length - 1].status.type === \"uploading\"\n    ) {\n      const status = this.state.files[this.state.files.length - 1]\n        .status as UploadingStatus\n      return status.progress\n    }\n    return undefined\n  }\n\n  private setClearPhotoInProgress = (clearPhotoInProgress: boolean): void => {\n    this.setState({ clearPhotoInProgress })\n  }\n\n  private setFacingMode = (): void => {\n    this.setState(prevState => ({\n      facingMode:\n        prevState.facingMode === FacingMode.USER\n          ? FacingMode.ENVIRONMENT\n          : FacingMode.USER,\n    }))\n  }\n\n  private handleCapture = (imgSrc: string | null): Promise<void> => {\n    if (imgSrc === null) {\n      return Promise.resolve()\n    }\n\n    this.setState({\n      imgSrc,\n      shutter: true,\n      minShutterEffectPassed: false,\n    })\n\n    const delay = (t: number): Promise<ReturnType<typeof setTimeout>> =>\n      new Promise(resolve => setTimeout(resolve, t))\n\n    const promise = urltoFile(\n      imgSrc,\n      `camera-input-${new Date().toISOString().replace(/:/g, \"_\")}.jpg`\n    )\n      .then(file => this.uploadFile(file))\n      .then(() => delay(MIN_SHUTTER_EFFECT_TIME_MS))\n      .then(() => {\n        this.setState((prevState, _) => {\n          return {\n            imgSrc,\n            shutter: prevState.shutter,\n            minShutterEffectPassed: true,\n          }\n        })\n      })\n      .catch(err => {\n        logError(err)\n      })\n\n    return promise\n  }\n\n  private removeCapture = (): void => {\n    if (this.state.files.length === 0) {\n      return\n    }\n\n    this.state.files.forEach(file => this.deleteFile(file.id))\n\n    this.setState({\n      imgSrc: null,\n      clearPhotoInProgress: true,\n    })\n  }\n\n  get initialValue(): State {\n    const emptyState = {\n      files: [],\n      newestServerFileId: 0,\n      imgSrc: null,\n      shutter: false,\n      minShutterEffectPassed: true,\n      clearPhotoInProgress: false,\n      facingMode: FacingMode.USER,\n    }\n    const { widgetMgr, element } = this.props\n\n    const widgetValue = widgetMgr.getFileUploaderStateValue(element)\n\n    if (widgetValue == null) {\n      return emptyState\n    }\n\n    const { maxFileId, uploadedFileInfo } = widgetValue\n    if (maxFileId == null || maxFileId === 0 || uploadedFileInfo == null) {\n      return emptyState\n    }\n\n    return {\n      files: uploadedFileInfo.map(f => {\n        const name = f.name as string\n        const size = f.size as number\n        const serverFileId = f.id as number\n\n        return new UploadFileInfo(name, size, this.nextLocalFileId(), {\n          type: \"uploaded\",\n          serverFileId,\n        })\n      }),\n      newestServerFileId: Number(maxFileId),\n      imgSrc:\n        uploadedFileInfo.length === 0 ? \"\" : this.RESTORED_FROM_WIDGET_STRING,\n      shutter: false,\n      minShutterEffectPassed: false,\n      clearPhotoInProgress: false,\n      facingMode: FacingMode.USER,\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  /**\n   * Return the FileUploader's current status, which is derived from\n   * its state.\n   */\n  public get status(): FileUploaderStatus {\n    const isFileUpdating = (file: UploadFileInfo): boolean =>\n      file.status.type === \"uploading\"\n\n    // If any of our files is Uploading or Deleting, then we're currently\n    // updating.\n    if (this.state.files.some(isFileUpdating)) {\n      return \"updating\"\n    }\n\n    return \"ready\"\n  }\n\n  public componentDidUpdate = (prevProps: Props): void => {\n    const { element, widgetMgr } = this.props\n\n    // TODO(vdonato): Rework this now that there's a short window where the app\n    // may reconnect to the server without losing its uploaded files. Just\n    // removing the if statement below (to avoid resetting widget state on a\n    // disconnect) seemed to work, but I'm not entirely sure if it's a complete\n    // fix.\n    //\n    // Widgets are disabled if the app is not connected anymore.\n    // If the app disconnects from the server, a new session is created and users\n    // will lose access to the files they uploaded in their previous session.\n    // If we are reconnecting, reset the camera input so that the widget is\n    // in sync with the new session.\n    if (prevProps.disabled !== this.props.disabled && this.props.disabled) {\n      this.reset()\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        new FileUploaderStateProto(),\n        { fromUi: false }\n      )\n      return\n    }\n\n    // Maybe send a widgetValue update to the widgetStateManager.\n\n    // If our status is not \"ready\", then we have uploads in progress.\n    // We won't submit a new widgetValue until all uploads have resolved.\n    if (this.status !== \"ready\") {\n      return\n    }\n\n    // If we have had no completed uploads, our widgetValue will be\n    // undefined, and we can early-out of the state update.\n    const newWidgetValue = this.createWidgetValue()\n    if (newWidgetValue === undefined) {\n      return\n    }\n\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (!_.isEqual(newWidgetValue, prevWidgetValue)) {\n      widgetMgr.setFileUploaderStateValue(element, newWidgetValue, {\n        fromUi: true,\n      })\n    }\n  }\n\n  /**\n   * When the server receives the widget value, it deletes \"orphaned\" uploaded\n   * files. An orphaned file is any file, associated with this uploader,\n   * whose file ID is not in the file ID list, and whose\n   * ID is <= `newestServerFileId`. This logic ensures that a FileUploader\n   * within a form doesn't have any of its \"unsubmitted\" uploads prematurely\n   * deleted when the script is re-run.\n   */\n  private createWidgetValue(): FileUploaderStateProto | undefined {\n    if (this.state.newestServerFileId === 0) {\n      // If newestServerFileId is 0, we've had no transaction with the server,\n      // and therefore no widget value.\n      return undefined\n    }\n\n    const uploadedFileInfo: UploadedFileInfoProto[] = this.state.files\n      .filter(f => f.status.type === \"uploaded\")\n      .map(f => {\n        const { name, size, status } = f\n        return new UploadedFileInfoProto({\n          id: (status as UploadedStatus).serverFileId,\n          name,\n          size,\n        })\n      })\n\n    return new FileUploaderStateProto({\n      maxFileId: this.state.newestServerFileId,\n      uploadedFileInfo,\n    })\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ files: [] }, () => {\n      const newWidgetValue = this.createWidgetValue()\n      if (newWidgetValue == null) {\n        return\n      }\n\n      this.setState({\n        imgSrc: null,\n      })\n\n      this.props.widgetMgr.setFileUploaderStateValue(\n        this.props.element,\n        newWidgetValue,\n        { fromUi: true }\n      )\n    })\n  }\n\n  public render(): React.ReactNode {\n    const { element, widgetMgr, disabled, width } = this.props\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <StyledCameraInput\n        width={width}\n        className=\"row-widget\"\n        data-testid=\"stCameraInput\"\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        {this.state.imgSrc ? (\n          <>\n            <StyledBox width={width}>\n              {this.state.imgSrc !== this.RESTORED_FROM_WIDGET_STRING && (\n                <StyledImg\n                  src={this.state.imgSrc}\n                  alt=\"Snapshot\"\n                  opacity={\n                    this.state.shutter || !this.state.minShutterEffectPassed\n                      ? \"50%\"\n                      : \"100%\"\n                  }\n                  width={width}\n                  height={(width * 9) / 16}\n                />\n              )}\n            </StyledBox>\n            <CameraInputButton\n              onClick={this.removeCapture}\n              progress={this.getProgress()}\n              disabled={!!this.getProgress() || disabled}\n            >\n              {this.getProgress() ? (\n                \"Uploading...\"\n              ) : (\n                <StyledSpan>\n                  <Icon content={X} margin=\"0 xs 0 0\" size=\"sm\" /> Clear photo\n                </StyledSpan>\n              )}\n            </CameraInputButton>\n          </>\n        ) : (\n          <WebcamComponent\n            handleCapture={this.handleCapture}\n            width={width}\n            disabled={disabled}\n            clearPhotoInProgress={this.state.clearPhotoInProgress}\n            setClearPhotoInProgress={this.setClearPhotoInProgress}\n            facingMode={this.state.facingMode}\n            setFacingMode={this.setFacingMode}\n          />\n        )}\n      </StyledCameraInput>\n    )\n  }\n\n  private nextLocalFileId(): number {\n    return this.localFileIdCounter++\n  }\n\n  /**\n   * Delete the file with the given ID:\n   * - Cancel the file upload if it's in progress\n   * - Remove the fileID from our local state\n   * We don't actually tell the server to delete the file. It will garbage\n   * collect it.\n   */\n  public deleteFile = (fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null) {\n      return\n    }\n\n    if (file.status.type === \"uploading\") {\n      // The file hasn't been uploaded. Let's cancel the request.\n      // However, it may have been received by the server so we'll still\n      // send out a request to delete.\n      file.status.cancelToken.cancel()\n    }\n\n    this.removeFile(fileId)\n  }\n\n  /** Append the given file to `state.files`. */\n  private addFile = (file: UploadFileInfo): void => {\n    this.setState(state => ({ files: [...state.files, file] }))\n  }\n\n  /** Remove the file with the given ID from `state.files`. */\n  private removeFile = (idToRemove: number): void => {\n    this.setState(state => ({\n      files: state.files.filter(file => file.id !== idToRemove),\n    }))\n  }\n\n  /**\n   * Return the file with the given ID, if one exists.\n   */\n  private getFile = (fileId: number): UploadFileInfo | undefined => {\n    return this.state.files.find(file => file.id === fileId)\n  }\n\n  /** Replace the file with the given id in `state.files`. */\n  private updateFile = (curFileId: number, newFile: UploadFileInfo): void => {\n    this.setState(curState => {\n      return {\n        files: curState.files.map(file =>\n          file.id === curFileId ? newFile : file\n        ),\n      }\n    })\n  }\n\n  /**\n   * Called when an upload has completed. Updates the file's status, and\n   * assigns it the new file ID returned from the server.\n   */\n  private onUploadComplete = (\n    localFileId: number,\n    serverFileId: number\n  ): void => {\n    // \"state.newestServerFileId\" must always hold the max fileID\n    // returned from the server.\n    this.setState(state => ({\n      newestServerFileId: Math.max(state.newestServerFileId, serverFileId),\n      shutter: false,\n    }))\n\n    const curFile = this.getFile(localFileId)\n    if (curFile == null || curFile.status.type !== \"uploading\") {\n      // The file may have been canceled right before the upload\n      // completed. In this case, we just bail.\n      return\n    }\n\n    this.updateFile(\n      curFile.id,\n      curFile.setStatus({ type: \"uploaded\", serverFileId })\n    )\n  }\n\n  /**\n   * Callback for file upload progress. Updates a single file's local `progress`\n   * state.\n   */\n  private onUploadProgress = (event: ProgressEvent, fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null || file.status.type !== \"uploading\") {\n      return\n    }\n\n    const newProgress = Math.round((event.loaded * 100) / event.total)\n    if (file.status.progress === newProgress) {\n      return\n    }\n\n    // Update file.progress\n    this.updateFile(\n      fileId,\n      file.setStatus({\n        type: \"uploading\",\n        cancelToken: file.status.cancelToken,\n        progress: newProgress,\n      })\n    )\n  }\n\n  /**\n   * Clear files and errors, and reset the widget to its READY state.\n   */\n  private reset = (): void => {\n    this.setState({ files: [], imgSrc: null })\n  }\n\n  public uploadFile = (file: File): void => {\n    // Create an UploadFileInfo for this file and add it to our state.\n    const cancelToken = axios.CancelToken.source()\n    const uploadingFileInfo = new UploadFileInfo(\n      file.name,\n      file.size,\n      this.nextLocalFileId(),\n      {\n        type: \"uploading\",\n        cancelToken,\n        progress: 1,\n      }\n    )\n    this.addFile(uploadingFileInfo)\n\n    this.props.uploadClient\n      .uploadFile(\n        this.props.element,\n        file,\n        e => this.onUploadProgress(e, uploadingFileInfo.id),\n        cancelToken.token\n      )\n      .then(newFileId =>\n        this.onUploadComplete(uploadingFileInfo.id, newFileId)\n      )\n      .catch(err => {\n        // If this was a cancel error, we don't show the user an error -\n        // the cancellation was in response to an action they took.\n        if (!axios.isCancel(err)) {\n          this.updateFile(\n            uploadingFileInfo.id,\n            uploadingFileInfo.setStatus({\n              type: \"error\",\n              errorMessage: err ? err.toString() : \"Unknown error\",\n            })\n          )\n        }\n      })\n  }\n}\n\nfunction urltoFile(url: string, filename: string): Promise<File> {\n  return fetch(url)\n    .then(res => res.arrayBuffer())\n    .then(buf => new File([buf], filename, { type: \"image/jpeg\" }))\n}\n\nexport default CameraInput\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CancelTokenSource } from \"axios\"\n\nexport interface UploadingStatus {\n  type: \"uploading\"\n  cancelToken: CancelTokenSource\n  progress: number\n}\n\nexport interface UploadedStatus {\n  type: \"uploaded\"\n\n  /** ID generated by the server. */\n  serverFileId: number\n}\n\nexport interface ErrorStatus {\n  type: \"error\"\n  errorMessage: string\n}\n\n/** The various statuses that an UploadedFileInfo can have. */\nexport type FileStatus = UploadingStatus | UploadedStatus | ErrorStatus\n\n/**\n * Wraps a File object with additional data used by FileUploader.\n * This class is immutable because it's used in within FileUploader.state.\n */\nexport class UploadFileInfo {\n  public readonly name: string\n\n  public readonly size: number\n\n  public readonly status: FileStatus\n\n  /**\n   * ID used to refer to the file locally, for update operations.\n   * If the file is uploaded, it will also have a serverID, which is\n   * used to refer to the file on the server.\n   */\n  public readonly id: number\n\n  /**\n   * Create a clone of this UploadFileInfo with the given status.\n   */\n  public setStatus(status: FileStatus): UploadFileInfo {\n    return new UploadFileInfo(this.name, this.size, this.id, status)\n  }\n\n  public constructor(\n    name: string,\n    size: number,\n    id: number,\n    status: FileStatus\n  ) {\n    this.name = name\n    this.size = size\n    this.id = id\n    this.status = status\n  }\n}\n"],"names":["Size","value","width","size","SMALL","overrides","theme","useTheme","heightMap","xs","spacing","twoXS","sm","md","lg","xl","twoXL","activeTheme","React","LibContext","usingCustomTheme","isPresetTheme","defaultOverrides","BarContainer","style","marginTop","none","marginBottom","marginRight","marginLeft","Bar","$theme","toString","undefined","height","backgroundColor","colors","progressbarTrackFill","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BarProgress","primary","blue70","mergeOverrides","StyledCameraInput","position","overflow","objectFit","StyledBox","secondaryBg","borderRadius","radii","display","flexDirection","justifyContent","alignItems","StyledDescription","textAlign","StyledImg","opacity","StyledLink","color","textDecoration","StyledSpan","StyledSwitchFacingModeButton","top","right","zIndex","fadedText40","mixBlendMode","StyledProgressBar","bottom","StyledCameraInputBaseButton","lightenedBg05","border","fadedText10","borderColor","white","fontWeight","fontWeights","normal","padding","margin","lineHeight","lineHeights","base","userSelect","outline","boxShadow","transparentize","XSMALL","fontSize","fontSizes","LARGE","getSizeStyle","MEDIUM","FacingMode","disabled","onClick","children","progress","ProgressBar","ProgressBarSize","WebcamPermission","switchFacingMode","Tooltip","content","placement","Placement","BaseButton","kind","BaseButtonKind","Icon","SwitchCamera","themeColors","AskForCameraPermission","Video","href","CAMERA_PERMISSION_URL","rel","target","handleCapture","clearPhotoInProgress","setClearPhotoInProgress","facingMode","setFacingMode","useState","PENDING","webcamPermission","setWebcamPermissionState","videoRef","useRef","debouncedWidth","setDebouncedWidth","memoizedSetDebouncedCallback","useCallback","debounce","useEffect","SUCCESS","isMobile","hidden","audio","ref","screenshotFormat","screenshotQuality","onUserMediaError","ERROR","onUserMedia","videoConstraints","ideal","current","imageSrc","getScreenshot","props","localFileIdCounter","RESTORED_FROM_WIDGET_STRING","formClearHelper","FormClearHelper","getProgress","state","files","length","status","type","setState","prevState","USER","ENVIRONMENT","imgSrc","Promise","resolve","shutter","minShutterEffectPassed","url","filename","Date","toISOString","replace","fetch","then","res","arrayBuffer","buf","File","file","uploadFile","t","setTimeout","_","catch","err","logError","removeCapture","forEach","deleteFile","id","componentDidUpdate","prevProps","element","widgetMgr","reset","setFileUploaderStateValue","FileUploaderStateProto","fromUi","newWidgetValue","createWidgetValue","prevWidgetValue","getFileUploaderStateValue","onFormCleared","fileId","getFile","cancelToken","cancel","removeFile","addFile","idToRemove","filter","find","updateFile","curFileId","newFile","curState","map","onUploadComplete","localFileId","serverFileId","newestServerFileId","Math","max","curFile","setStatus","onUploadProgress","event","newProgress","round","loaded","total","axios","uploadingFileInfo","UploadFileInfo","name","nextLocalFileId","uploadClient","e","token","newFileId","errorMessage","initialValue","emptyState","this","widgetValue","maxFileId","uploadedFileInfo","f","Number","disconnect","some","UploadedFileInfoProto","manageFormClearListener","formId","className","label","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","src","alt","X"],"sourceRoot":""}