{"version":3,"file":"static/js/4034.2d9ae7fd.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/src/lib/components/widgets/DateInput/DateInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport moment from \"moment\"\nimport { withTheme } from \"@emotion/react\"\nimport { Datepicker as UIDatePicker, DENSITY } from \"baseui/datepicker\"\nimport { PLACEMENT } from \"baseui/popover\"\nimport { DateInput as DateInputProto } from \"src/lib/proto\"\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/lib/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"src/lib/theme\"\nimport TooltipIcon from \"src/lib/components/shared/TooltipIcon\"\nimport { Placement } from \"src/lib/components/shared/Tooltip\"\n\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/util/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: DateInputProto\n  theme: EmotionTheme\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * An array with start and end date specified by the user via the UI. If the user\n   * didn't touch this widget's UI, the default value is used. End date is optional.\n   */\n  values: Date[]\n  /**\n   * Boolean to toggle between single-date picker and range date picker.\n   */\n  isRange: boolean\n  isEmpty: boolean\n}\n\n// Date format for communication (protobuf) support\nconst DATE_FORMAT = \"YYYY/MM/DD\"\n\n/** Convert an array of strings to an array of dates. */\nfunction stringsToDates(strings: string[]): Date[] {\n  return strings.map(val => new Date(val))\n}\n\n/** Convert an array of dates to an array of strings. */\nfunction datesToStrings(dates: Date[]): string[] {\n  return dates.map((value: Date) => moment(value as Date).format(DATE_FORMAT))\n}\n\nclass DateInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    values: this.initialValue,\n    isRange: this.props.element.isRange,\n    isEmpty: false,\n  }\n\n  get initialValue(): Date[] {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringArrayValue(\n      this.props.element\n    )\n    const stringArray =\n      storedValue !== undefined ? storedValue : this.props.element.default\n    return stringsToDates(stringArray)\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value: values } = this.props.element\n    this.props.element.setValue = false\n    this.setState(\n      {\n        values: values.map((v: string) => new Date(v)),\n      },\n      () => {\n        this.commitWidgetValue({ fromUi: false })\n      }\n    )\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringArrayValue(\n      this.props.element,\n      datesToStrings(this.state.values),\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    const defaultValue = stringsToDates(this.props.element.default)\n    this.setState({ values: defaultValue }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({\n    date,\n  }: {\n    date: Date | (Date | null | undefined)[] | null | undefined\n  }): void => {\n    if (date === null || date === undefined) {\n      this.setState({\n        values: [],\n        isEmpty: true,\n      })\n      return\n    }\n\n    const values: Date[] = []\n    if (Array.isArray(date)) {\n      date.forEach((dt: Date | null | undefined) => {\n        if (dt) {\n          values.push(dt)\n        }\n      })\n    } else {\n      values.push(date)\n    }\n\n    this.setState(\n      {\n        values,\n        isEmpty: !values,\n      },\n      () => {\n        if (!this.state.isEmpty) this.commitWidgetValue({ fromUi: true })\n      }\n    )\n  }\n\n  private handleClose = (): void => {\n    const { isEmpty } = this.state\n    if (isEmpty) {\n      this.setState(\n        (_, prevProps) => {\n          return {\n            values: stringsToDates(prevProps.element.default),\n            isEmpty: !stringsToDates(prevProps.element.default),\n          }\n        },\n        () => {\n          this.commitWidgetValue({ fromUi: true })\n        }\n      )\n    }\n  }\n\n  private getMaxDate = (): Date | undefined => {\n    const { element } = this.props\n    const maxDate = element.max\n\n    return maxDate && maxDate.length > 0\n      ? moment(maxDate, DATE_FORMAT).toDate()\n      : undefined\n  }\n\n  public render(): React.ReactNode {\n    const { width, element, disabled, theme, widgetMgr } = this.props\n    const { values, isRange } = this.state\n    const { colors, fontSizes, lineHeights } = theme\n\n    const style = { width }\n    const minDate = moment(element.min, DATE_FORMAT).toDate()\n    const maxDate = this.getMaxDate()\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stDateInput\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UIDatePicker\n          density={DENSITY.high}\n          formatString=\"yyyy/MM/dd\"\n          disabled={disabled}\n          onChange={this.handleChange}\n          onClose={this.handleClose}\n          overrides={{\n            Popover: {\n              props: {\n                placement: PLACEMENT.bottomLeft,\n                overrides: {\n                  Body: {\n                    style: {\n                      border: `1px solid ${colors.fadedText10}`,\n                    },\n                  },\n                },\n              },\n            },\n            CalendarContainer: {\n              style: {\n                fontSize: fontSizes.sm,\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            Week: {\n              style: {\n                fontSize: fontSizes.sm,\n              },\n            },\n            Day: {\n              style: ({\n                // Due to a bug in BaseWeb, where the range selection defaults to mono300 and can't be changed, we need to override the background colors for all these shared props:\n                // $pseudoHighlighted: Styles the range selection when you click an initial date, and hover over the end one, but NOT click it.\n                // $pseudoSelected: Styles when a range was selected, click outide, and click the calendar again.\n                // $selected: Styles the background below the red circle from the start and end dates.\n                // $isHovered: Styles the background below the end date when hovered.\n                $pseudoHighlighted,\n                $pseudoSelected,\n                $selected,\n                $isHovered,\n              }) => ({\n                fontSize: fontSizes.sm,\n                lineHeight: lineHeights.base,\n\n                \"::before\": {\n                  backgroundColor:\n                    $selected ||\n                    $pseudoSelected ||\n                    $pseudoHighlighted ||\n                    $isHovered\n                      ? `${colors.secondaryBg} !important`\n                      : colors.transparent,\n                },\n\n                \"::after\": {\n                  borderColor: colors.transparent,\n                },\n              }),\n            },\n            PrevButton: {\n              style: () => ({\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              }),\n            },\n            NextButton: {\n              style: {\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              },\n            },\n            Input: {\n              props: {\n                // The default maskChar ` ` causes empty dates to display as ` / / `\n                // Clearing the maskChar so empty dates will not display\n                maskChar: null,\n\n                overrides: {\n                  Root: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      borderLeftWidth: \"1px\",\n                      borderRightWidth: \"1px\",\n                      borderTopWidth: \"1px\",\n                      borderBottomWidth: \"1px\",\n                    },\n                  },\n\n                  Input: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      paddingRight: \".5rem\",\n                      paddingLeft: \".5rem\",\n                      paddingBottom: \".5rem\",\n                      paddingTop: \".5rem\",\n                    },\n                  },\n                },\n              },\n            },\n          }}\n          value={values}\n          minDate={minDate}\n          maxDate={maxDate}\n          range={isRange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(DateInput)\n"],"names":["DATE_FORMAT","stringsToDates","strings","map","val","Date","DateInput","formClearHelper","FormClearHelper","state","values","initialValue","isRange","props","element","isEmpty","commitWidgetValue","source","widgetMgr","setStringArrayValue","value","moment","format","onFormCleared","defaultValue","default","setState","fromUi","handleChange","date","undefined","Array","isArray","forEach","dt","push","handleClose","_","prevProps","getMaxDate","maxDate","max","length","toDate","storedValue","this","getStringArrayValue","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","v","width","disabled","theme","colors","fontSizes","lineHeights","style","minDate","min","manageFormClearListener","formId","className","label","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","content","placement","Placement","density","DENSITY","formatString","onChange","onClose","overrides","Popover","PLACEMENT","Body","border","fadedText10","CalendarContainer","fontSize","sm","paddingRight","spacing","paddingLeft","paddingBottom","paddingTop","Week","Day","$pseudoHighlighted","$pseudoSelected","$selected","$isHovered","lineHeight","base","backgroundColor","secondaryBg","transparent","borderColor","PrevButton","display","alignItems","justifyContent","outline","NextButton","Input","maskChar","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","range","React","withTheme"],"sourceRoot":""}