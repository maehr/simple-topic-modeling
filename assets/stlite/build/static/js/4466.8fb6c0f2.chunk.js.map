{"version":3,"file":"static/js/4466.8fb6c0f2.chunk.js","mappings":"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","sources":["../../../node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemFileHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemHandle.js","../../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","../../../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","../../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","../../../node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js","../../../node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","../../../node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","../../../node_modules/native-file-system-adapter/src/config.js","../../../node_modules/native-file-system-adapter/src/showDirectoryPicker.js","../../../node_modules/native-file-system-adapter/src/showOpenFilePicker.js","../../../node_modules/native-file-system-adapter/src/showSaveFilePicker.js","../../../node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js","../../../node_modules/native-file-system-adapter/src/util.js"],"sourcesContent":["import FileSystemHandle from './FileSystemHandle.js'\nimport { errors } from './util.js'\n\nconst { GONE, MOD_ERR } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nif (globalThis.FileSystemDirectoryHandle) {\n  const proto = globalThis.FileSystemDirectoryHandle.prototype\n\n  proto.resolve = async function resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  // Safari allows us operate on deleted files,\n  // so we need to check if they still exist.\n  // Hope to remove this one day.\n  async function ensureDoActuallyStillExist (handle) {\n    const root = await navigator.storage.getDirectory()\n    const path = await root.resolve(handle)\n    if (path === null) { throw new DOMException(...GONE) }\n  }\n\n  const entries = proto.entries\n  proto.entries = async function * () {\n    await ensureDoActuallyStillExist(this)\n    yield * entries.call(this)\n  }\n  proto[Symbol.asyncIterator] = async function * () {\n    yield * this.entries()\n  }\n\n  const removeEntry = proto.removeEntry\n  proto.removeEntry = async function (name, options = {}) {\n    return removeEntry.call(this, name, options).catch(async err => {\n      const unknown = err instanceof DOMException && err.name === 'UnknownError'\n      if (unknown && !options.recursive) {\n        const empty = (await entries.call(this).next()).done\n        if (!empty) { throw new DOMException(...MOD_ERR) }\n      }\n      throw err\n    })\n  }\n}\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\nimport { errors } from './util.js'\n\nconst { INVALID, SYNTAX, GONE } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\n// Safari doesn't support async createWritable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable\n) {\n  const wm = new WeakMap()\n\n  let workerUrl\n\n  // Worker code that should be inlined (can't use any external functions)\n  const code = () => {\n    let fileHandle, handle\n\n    onmessage = async evt => {\n      const port = evt.ports[0]\n      const cmd = evt.data\n      switch (cmd.type) {\n        case 'open':\n          const file = cmd.name\n\n          let dir = await navigator.storage.getDirectory()\n\n          for (const folder of cmd.path) {\n            dir = await dir.getDirectoryHandle(folder)\n          }\n\n          fileHandle = await dir.getFileHandle(file)\n          handle = await fileHandle.createSyncAccessHandle()\n          break\n        case 'write':\n          handle.write(cmd.data, { at: cmd.position })\n          handle.flush()\n          break\n        case 'truncate':\n          handle.truncate(cmd.size)\n          break\n        case 'abort':\n        case 'close':\n          handle.close()\n          break\n      }\n\n      port.postMessage(0)\n    }\n  }\n\n\n  globalThis.FileSystemFileHandle.prototype.createWritable = async function (options) {\n    // Safari only support writing data in a worker with sync access handle.\n    if (!workerUrl) {\n      const stringCode = `(${code.toString()})()`\n      const blob = new Blob([stringCode], {\n        type: 'text/javascript'\n      })\n      workerUrl = URL.createObjectURL(blob)\n    }\n    const worker = new Worker(workerUrl, { type: 'module' })\n\n    let position = 0\n    const textEncoder = new TextEncoder()\n    let size = await this.getFile().then(file => file.size)\n\n    const send = message => new Promise((resolve, reject) => {\n      const mc = new MessageChannel()\n      mc.port1.onmessage = evt => {\n        if (evt.data instanceof Error) reject(evt.data)\n        else resolve(evt.data)\n        mc.port1.close()\n        mc.port2.close()\n        mc.port1.onmessage = null\n      }\n      worker.postMessage(message, [mc.port2])\n    })\n\n    // Safari also don't support transferable file system handles.\n    // So we need to pass the path to the worker. This is a bit hacky and ugly.\n    const root = await navigator.storage.getDirectory()\n    const parent = await wm.get(this)\n    const path = await root.resolve(parent)\n\n    // Should likely never happen, but just in case...\n    if (path === null) throw new DOMException(...GONE)\n\n    let controller\n    await send({ type: 'open', path, name: this.name })\n\n    if (options?.keepExistingData === false) {\n      await send({ type: 'truncate', size: 0 })\n      size = 0\n    }\n\n    const ws = new FileSystemWritableFileStream({\n      start: ctrl => {\n        controller = ctrl\n      },\n      async write(chunk) {\n        const isPlainObject = chunk?.constructor === Object\n\n        if (isPlainObject) {\n          chunk = { ...chunk }\n        } else {\n          chunk = { type: 'write', data: chunk, position }\n        }\n\n        if (chunk.type === 'write') {\n          if (!('data' in chunk)) {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('write requires a data argument'))\n          }\n\n          chunk.position ??= position\n\n          if (typeof chunk.data === 'string') {\n            chunk.data = textEncoder.encode(chunk.data)\n          }\n\n          else if (chunk.data instanceof ArrayBuffer) {\n            chunk.data = new Uint8Array(chunk.data)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array) && ArrayBuffer.isView(chunk.data)) {\n            chunk.data = new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.data.byteLength)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array)) {\n            const ab = await new Response(chunk.data).arrayBuffer()\n            chunk.data = new Uint8Array(ab)\n          }\n\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            position = chunk.position\n          }\n          position += chunk.data.byteLength\n          size += chunk.data.byteLength\n        } else if (chunk.type === 'seek') {\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            if (size < chunk.position) {\n              throw new DOMException(...INVALID)\n            }\n            console.log('seeking', chunk)\n            position = chunk.position\n            return // Don't need to enqueue seek...\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('seek requires a position argument'))\n          }\n        } else if (chunk.type === 'truncate') {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            size = chunk.size\n            if (position > size) { position = size }\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('truncate requires a size argument'))\n          }\n        }\n\n        await send(chunk)\n      },\n      async close () {\n        await send({ type: 'close' })\n        worker.terminate()\n      },\n      async abort (reason) {\n        await send({ type: 'abort', reason })\n        worker.terminate()\n      },\n    })\n\n    return ws\n  }\n\n  const orig = FileSystemDirectoryHandle.prototype.getFileHandle\n  FileSystemDirectoryHandle.prototype.getFileHandle = async function (...args) {\n    const handle = await orig.call(this, ...args)\n    wm.set(handle, this)\n    return handle\n  }\n}\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n","const kAdapter = Symbol('adapter')\n\n/**\n * @typedef {Object} FileSystemHandlePermissionDescriptor\n * @property {('read'|'readwrite')} [mode='read']\n */\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  /** @param {FileSystemHandlePermissionDescriptor} descriptor */\n  async queryPermission (descriptor = {}) {\n    const { mode = 'read' } = descriptor\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\n// Safari safari doesn't support writable streams yet.\nif (globalThis.FileSystemHandle) {\n  globalThis.FileSystemHandle.prototype.queryPermission ??= function (descriptor) {\n    return 'granted'\n  }\n}\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  #writer\n  constructor (writer) {\n    super(writer)\n    this.#writer = writer\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  async close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  // The write(data) method steps are:\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    // 1. Let writer be the result of getting a writer for this.\n    const writer = this.getWriter()\n\n    // 2. Let result be the result of writing a chunk to writer given data.\n    const result = writer.write(data)\n\n    // 3. Release writer.\n    writer.releaseLock()\n\n    // 4. Return result.\n    return result\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\n// Safari safari doesn't support writable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable &&\n  !globalThis.FileSystemWritableFileStream\n) {\n  globalThis.FileSystemWritableFileStream = FileSystemWritableFileStream\n}\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.webkitdirectory = true\n  // Fallback to multiple files input for iOS Safari\n  input.multiple = true\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  Object.assign(input.style, {\n    position: 'fixed',\n    top: '-100000px',\n    left: '-100000px'\n  })\n\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve, { once: true })\n    input.click()\n  })\n  input.remove()\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.types] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n"],"names":["GONE","MOD_ERR","errors","kAdapter","Symbol","_Symbol$asyncIterator","asyncIterator","FileSystemDirectoryHandle","FileSystemHandle","constructor","adapter","super","_defineProperty","this","getDirectoryHandle","name","options","arguments","length","undefined","TypeError","includes","create","handle","entries","FileSystemFileHandle","_","entry","kind","getEntries","console","warn","getFileHandle","removeEntry","recursive","resolve","possibleDescendant","isSameEntry","openSet","path","current","pop","values","push","keys","Object","defineProperty","prototype","toStringTag","value","writable","enumerable","configurable","defineProperties","globalThis","proto","async","ensureDoActuallyStillExist","root","navigator","storage","getDirectory","DOMException","call","catch","err","next","done","INVALID","SYNTAX","createWritable","FileSystemWritableFileStream","getFile","wm","WeakMap","workerUrl","code","fileHandle","onmessage","port","evt","ports","cmd","data","type","file","dir","folder","createSyncAccessHandle","write","at","position","flush","truncate","size","close","postMessage","stringCode","concat","toString","blob","Blob","URL","createObjectURL","worker","Worker","textEncoder","TextEncoder","then","send","message","Promise","reject","mc","MessageChannel","port1","Error","port2","parent","get","controller","keepExistingData","start","ctrl","chunk","_chunk","_chunk2","_chunk2$position","encode","ArrayBuffer","Uint8Array","isView","ab","Response","arrayBuffer","buffer","byteOffset","byteLength","Number","isInteger","log","terminate","abort","reason","orig","_len","args","Array","_key","set","queryPermission","descriptor","mode","requestPermission","remove","other","_globalThis$FileSyste","_globalThis$FileSyste2","_classPrivateFieldInitSpec","obj","privateMap","privateCollection","has","_classPrivateFieldSet","receiver","action","WritableStream","config","_writer","writer","setPrototypeOf","_closed","w","getWriter","p","releaseLock","seek","result","ReadableStream","TransformStream","File","native","showDirectoryPicker","_preferPolyfill","input","document","createElement","webkitdirectory","multiple","style","top","left","body","appendChild","addEventListener","click","mod","getDirHandlesFromInput","def","accepts","showOpenFilePicker","opts","accept","map","e","extensions","mimeTypes","flat","join","assign","once","m","getFileHandlesFromInput","showSaveFilePicker","_name","suggestedName","FileHandle","DataTransferItem","getAsFileSystemHandle","webkitGetAsEntry","FolderHandle","all","isFile","driver","_globalThis$navigator","getOriginPrivateDirectory","module","default","MISMATCH","SECURITY","DISALLOWED","fromDataTransfer","memory","sandbox","fs","_entries","files","from","rootName","webkitRelativePath","split","forEach","shift","reduce"],"sourceRoot":""}