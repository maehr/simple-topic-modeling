{"version":3,"file":"static/js/4466.d25d1268.chunk.js","mappings":"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","sources":["../../../node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemFileHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","../../../node_modules/native-file-system-adapter/src/config.js","../../../node_modules/native-file-system-adapter/src/showDirectoryPicker.js","../../../node_modules/native-file-system-adapter/src/showOpenFilePicker.js","../../../node_modules/native-file-system-adapter/src/showSaveFilePicker.js","../../../node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js"],"sourcesContent":["import FileSystemHandle from './FileSystemHandle.js'\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n","const kAdapter = Symbol('adapter')\n\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  async queryPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  constructor (...args) {\n    super(...args)\n\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    const writer = this.getWriter()\n    const p = writer.write(data)\n    writer.releaseLock()\n    return p\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n\n  // Even with this check, the browser may support the attribute, but not the functionality (e.g. iOS Safari)\n  if (!('webkitdirectory' in input)) {\n    throw new Error(`HTMLInputElement.webkitdirectory is not supported`)\n  }\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  input.webkitdirectory = true\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n"],"names":["kAdapter","Symbol","_Symbol$asyncIterator","asyncIterator","FileSystemDirectoryHandle","FileSystemHandle","constructor","adapter","super","_defineProperty","this","getDirectoryHandle","name","options","arguments","length","undefined","TypeError","includes","create","handle","entries","FileSystemFileHandle","_","entry","kind","getEntries","console","warn","getFileHandle","removeEntry","recursive","resolve","possibleDescendant","isSameEntry","openSet","path","current","pop","values","push","keys","Object","defineProperty","prototype","toStringTag","value","writable","enumerable","configurable","defineProperties","createWritable","FileSystemWritableFileStream","getFile","queryPermission","mode","concat","requestPermission","remove","other","WritableStream","config","setPrototypeOf","_closed","close","w","getWriter","p","releaseLock","seek","position","write","type","truncate","size","data","Promise","reject","writer","ReadableStream","globalThis","TransformStream","DOMException","Blob","File","native","showDirectoryPicker","async","_preferPolyfill","input","document","createElement","Error","style","top","left","body","appendChild","webkitdirectory","addEventListener","click","then","mod","getDirHandlesFromInput","def","accepts","showOpenFilePicker","opts","multiple","accept","map","e","extensions","mimeTypes","flat","join","m","getFileHandlesFromInput","showSaveFilePicker","_name","suggestedName","FileHandle","DataTransferItem","getAsFileSystemHandle","webkitGetAsEntry","FolderHandle","all","isFile","driver","_globalThis$navigator","navigator","storage","getDirectory","getOriginPrivateDirectory","module","default"],"sourceRoot":""}