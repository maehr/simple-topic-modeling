{"version":3,"file":"static/js/4576.1c09b38f.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/CheckboxColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/SelectboxColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/isIntegerType.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/LinkColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/ImageColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/ProgressColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/DateTimeColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/ChartColumn.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/cells/DateTimeCell.tsx","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/cells/ImageCellEditor.tsx","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useTooltips.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/hooks/useCustomRenderer.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/Tooltip.tsx","../../../streamlit/frontend/src/lib/components/widgets/DataFrame/DataFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n  BaseGridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { toString, merge, isArray } from \"lodash\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\n\nimport { Type as ArrowType } from \"src/lib/dataframes/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (data instanceof Uint8Array) {\n    // Stlite: Uint8Array is used for any list data in fastparquet.\n    // It stores a json string representation in the Uint8Array.\n    // We need to convert this to a string first\n    // to later have it load as json.\n    data = new TextDecoder(\"utf-8\").decode(data)\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  }\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\nexport interface TextColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as TextColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars && cellData.length > parameters.max_chars) {\n      cellData = cellData.slice(0, parameters.max_chars)\n      corrected = true\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { notNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeBoolean,\n} from \"./utils\"\n\nexport interface SelectboxColumnParams {\n  /** A list of options available in the selectbox.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a selectbox. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction SelectboxColumn(props: BaseColumnProps): BaseColumn {\n  // The selectbox column can be either string, number or boolean type\n  // based on the options type.\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as SelectboxColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: props.isEditable,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        // Add empty option if the column is not configured as required:\n        ...(props.isRequired !== true ? [\"\"] : []),\n        ...parameters.options\n          .filter(opt => opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n      readonly: !props.isEditable,\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"selectbox\",\n    sortMode: \"default\",\n    getCell(data?: any, validate?: boolean): GridCell {\n      // Empty string refers to a missing value\n      let cellData = \"\"\n      if (notNullOrUndefined(data)) {\n        cellData = toSafeString(data)\n      }\n\n      if (validate && !cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n\n      if (!props.isEditable) {\n        // TODO (lukasmasuch): This is a temporary workaround until the following PR is merged:\n        // https://github.com/glideapps/glide-data-grid/pull/657\n        // The issue is that measuring dropdown cells is not supported yet.\n        // This results in dropdown columns not correctly adapting the width to the content.\n        // Therefore, we use a text cell here so that we are not affecting the behavior\n        // for read-only cells.\n\n        return {\n          kind: GridCellKind.Text,\n          isMissingValue: cellData === \"\",\n          data: cellData !== \"\" ? cellData : null,\n          displayData: cellData,\n          allowOverlay: true,\n          contentAlignment: props.contentAlignment,\n          readonly: true,\n          style: props.isIndex ? \"faded\" : \"normal\",\n        } as TextCell\n      }\n\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === \"\",\n        copyData: cellData, // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(\n      cell: DropdownCellType | TextCell\n    ): string | number | boolean | null {\n      if (cell.kind === GridCellKind.Text) {\n        return cell.data === undefined ? null : cell.data\n      }\n\n      if (cell.data?.value === undefined || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nSelectboxColumn.isEditableType = true\n\nexport default SelectboxColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { isString } from \"lodash\"\n\nimport { isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  toSafeArray,\n  toSafeString,\n  isMissingValueCell,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                isString(x) && x.includes(\",\") ? x.replace(/,/g, \" \") : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if a given arrow type name is an integer type.\n */\nexport function isIntegerType(arrowTypeName: string): boolean {\n  return (\n    (arrowTypeName.startsWith(\"int\") &&\n      !arrowTypeName.startsWith(\"interval\")) ||\n    arrowTypeName === \"range\" ||\n    arrowTypeName.startsWith(\"uint\")\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\nimport { isIntegerType } from \"src/lib/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n  countDecimals,\n  truncateDecimals,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min_value?: number\n  // The maximum allowed value for editing.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // This will also influence the maximum precision. This will impact the number of decimals\n  // allowed to be entered as well as the number of decimals displayed (if format is not specified).\n  // This is set to 1 for integer types.\n  readonly step?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      // Set step to 1 for integer types\n      step: isIntegerType(arrowTypeName) ? 1 : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min_value: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n    } as NumberColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as NumberColumnParams\n\n  const allowNegative =\n    isNullOrUndefined(parameters.min_value) || parameters.min_value < 0\n\n  const fixedDecimals =\n    notNullOrUndefined(parameters.step) && !Number.isNaN(parameters.step)\n      ? countDecimals(parameters.step)\n      : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n  } as NumberCell\n\n  const validateInput = (data?: any): boolean | number => {\n    let cellData: number | null = toSafeNumber(data)\n\n    if (isNullOrUndefined(cellData)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (Number.isNaN(cellData)) {\n      return false\n    }\n\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    // Apply max_value configuration option:\n    if (\n      notNullOrUndefined(parameters.max_value) &&\n      cellData > parameters.max_value\n    ) {\n      cellData = parameters.max_value\n      corrected = true\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(parameters.min_value) &&\n      cellData < parameters.min_value\n    ) {\n      // Only return false, since correcting it negatively impacts\n      // the user experience.\n      return false\n    }\n\n    // TODO(lukasmasuch): validate step size?\n    // if (notNullOrUndefined(parameters.step) && parameters.step !== 1)\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"number\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      let cellData: number | null = toSafeNumber(data)\n      let displayData = \"\"\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Cut decimals:\n        if (notNullOrUndefined(fixedDecimals)) {\n          cellData = truncateDecimals(cellData, fixedDecimals)\n        }\n\n        // Check if the value is larger than the maximum supported value:\n        if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n          )\n        }\n\n        try {\n          displayData = formatNumber(\n            cellData,\n            parameters.format,\n            fixedDecimals\n          )\n        } catch (error) {\n          return getErrorCell(\n            toSafeString(cellData),\n            notNullOrUndefined(parameters.format)\n              ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n              : `Failed to format the number. Error: ${error}`\n          )\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, UriCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeString,\n  getErrorCell,\n  ColumnCreator,\n} from \"./utils\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Uri,\n    data: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as UriCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars) {\n      if (cellData.length > parameters.max_chars) {\n        // Correct the value\n        cellData = cellData.slice(0, parameters.max_chars)\n        corrected = true\n      }\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: notNullOrUndefined(data) ? toSafeString(data) : null,\n        isMissingValue: isNullOrUndefined(data),\n      } as UriCell\n    },\n    getCellValue(cell: UriCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"src/lib/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    allowAdd: false,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { isNullOrUndefined, notNullOrUndefined } from \"src/lib/util/utils\"\nimport { isIntegerType } from \"src/lib/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  mergeColumnParameters,\n  formatNumber,\n  toSafeNumber,\n  countDecimals,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-timezone\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  mergeColumnParameters,\n  toSafeDate,\n  getErrorCell,\n  toSafeString,\n  formatMoment,\n} from \"./utils\"\nimport { DateTimeCell } from \"./cells/DateTimeCell\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-time-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DateTimeCell\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      if (!props.isEditable) {\n        // TODO (lukasmasuch): This is a temporary workaround until the following PR is merged:\n        // https://github.com/glideapps/glide-data-grid/pull/656\n        // The issue is that measuring custom cells is not supported yet.\n        // This results in datetime columns not correctly adapting the width to the content.\n        // Therefore, we use a text cell here so that we are not affecting the current\n        // behavior for read-only cells.\n\n        return {\n          kind: GridCellKind.Text,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: copyData !== \"\" ? copyData : null,\n          displayData: displayDate,\n          allowOverlay: true,\n          contentAlignment: props.contentAlignment,\n          readonly: true,\n          style: props.isIndex ? \"faded\" : \"normal\",\n        } as TextCell\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DateTimeCell\n    },\n    getCellValue(cell: DateTimeCell | TextCell): string | null {\n      if (cell.kind === GridCellKind.Text) {\n        return cell.data === undefined ? null : cell.data\n      }\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  toSafeArray,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n} from \"./utils\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (chart_type === \"line\" && convertedChartData.length <= 2) {\n        // TODO(lukasmasuch): This is only a temporary workaround to prevent\n        // an error in glide-data-grid that occurs during cell drawing when the\n        // line chart has less than 3 values. This needs to a fix in glide-data-grid.\n        return getEmptyCell()\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(\"line_chart\", props, \"line\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(\"bar_chart\", props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport styled from \"@emotion/styled\"\n\nimport {\n  CustomCell,\n  CustomRenderer,\n  drawTextCell,\n  GridCellKind,\n  ProvideEditorCallback,\n  TextCellEntry,\n} from \"@glideapps/glide-data-grid\"\n\nexport const StyledInputBox = styled.input`\n  min-height: 26px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  font-size: var(--gdg-editor-font-size);\n  font-family: var(--gdg-font-family);\n  color: var(--gdg-text-dark);\n  ::-webkit-calendar-picker-indicator {\n    background-color: white;\n  }\n`\n\nexport interface DateTimeCellProps {\n  readonly kind: \"date-time-cell\"\n  /* The current value of the datetime cell. */\n  readonly date: Date | undefined | null\n  /* The current display value of the datetime cell. */\n  readonly displayDate: string\n  /* Defines the type of the HTML input element. */\n  readonly format: DateKind\n  /* Timezone offset in minutes.\n  This can be used to adjust the date by a given timezone offset. */\n  readonly timezoneOffset?: number\n  /* Minimum value that can be entered by the user.\n  This is passed to the min attribute of the HTML input element. */\n  readonly min?: string | Date\n  /* Maximum value that can be entered by the user.\n  This is passed to the max attribute of the HTML input element. */\n  readonly max?: string | Date\n  /* Granularity that the date must adhere.\n  This is passed to the step attribute of the HTML input element. */\n  readonly step?: string\n}\n\nexport type DateKind = \"date\" | \"time\" | \"datetime-local\"\n\nexport const formatValueForHTMLInput = (\n  dateKind: DateKind,\n  date: Date | undefined | null\n): string => {\n  if (date === undefined || date === null) {\n    return \"\"\n  }\n  const isoDate = date.toISOString()\n  switch (dateKind) {\n    case \"date\":\n      return isoDate.split(\"T\")[0]\n    case \"datetime-local\":\n      return isoDate.replace(\"Z\", \"\")\n    case \"time\":\n      return isoDate.split(\"T\")[1].replace(\"Z\", \"\")\n    default:\n      throw new Error(`Unknown date kind ${dateKind}`)\n  }\n}\n\nexport type DateTimeCell = CustomCell<DateTimeCellProps>\n\nconst Editor: ReturnType<ProvideEditorCallback<DateTimeCell>> = cell => {\n  const cellData = cell.value.data\n  const { format, displayDate } = cellData\n\n  const step =\n    cellData.step !== undefined && !Number.isNaN(Number(cellData.step))\n      ? Number(cellData.step)\n      : undefined\n\n  const minValue =\n    cellData.min instanceof Date\n      ? formatValueForHTMLInput(format, cellData.min)\n      : cellData.min\n\n  const maxValue =\n    cellData.max instanceof Date\n      ? formatValueForHTMLInput(format, cellData.max)\n      : cellData.max\n\n  let date = cellData.date\n  // Convert timezone offset to milliseconds\n  const timezoneOffsetMs = cellData.timezoneOffset\n    ? cellData.timezoneOffset * 60 * 1000\n    : 0\n  if (timezoneOffsetMs && date) {\n    // Adjust based on the timezone offset\n    date = new Date(date.getTime() + timezoneOffsetMs)\n  }\n  const value = formatValueForHTMLInput(format, date)\n  if (cell.value.readonly) {\n    return (\n      <TextCellEntry\n        highlight={true}\n        autoFocus={false}\n        disabled={true}\n        value={displayDate ?? \"\"}\n        onChange={() => undefined}\n      />\n    )\n  }\n\n  return (\n    <StyledInputBox\n      data-testid={\"date-time-cell\"}\n      required\n      type={format}\n      defaultValue={value}\n      min={minValue}\n      max={maxValue}\n      step={step}\n      autoFocus={true}\n      onChange={event => {\n        if (isNaN(event.target.valueAsNumber)) {\n          // The user has cleared the date, contribute as undefined\n          cell.onChange({\n            ...cell.value,\n            data: {\n              ...cell.value.data,\n              date: undefined,\n            },\n          })\n        } else {\n          cell.onChange({\n            ...cell.value,\n            data: {\n              ...cell.value.data,\n              // use valueAsNumber because valueAsDate is null for \"datetime-local\"\n              // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#technical_summary\n              date: new Date(event.target.valueAsNumber - timezoneOffsetMs),\n            },\n          })\n        }\n      }}\n    />\n  )\n}\n\nexport const DateTimeCellRenderer: CustomRenderer<DateTimeCell> = {\n  kind: GridCellKind.Custom,\n  isMatch: (cell: CustomCell): cell is DateTimeCell =>\n    (cell.data as any).kind === \"date-time-cell\",\n  draw: (args, cell) => {\n    const { displayDate } = cell.data\n    drawTextCell(args, displayDate, cell.contentAlign)\n    return true\n  },\n  measure: (ctx, cell) => {\n    const { displayDate } = cell.data\n    // 8 per side is the default padding of a cell in glide-data-grid\n    // used for measuring the width of the cell\n    return ctx.measureText(displayDate).width + 16\n  },\n  provideEditor: () => ({\n    editor: Editor,\n  }),\n  onPaste: (v, d) => {\n    // TODO(lukasmasuch): This code is not used in our implementation,\n    // it's mostly for the glide-data-grid implementation which we try to merge\n    // into the upstream library.\n    let parseDateTimestamp = NaN\n    // We only try to parse the value if it is not empty/undefined/null:\n    if (v) {\n      // Support for unix timestamps (milliseconds since 1970-01-01):\n      parseDateTimestamp = Number(v).valueOf()\n\n      if (Number.isNaN(parseDateTimestamp)) {\n        // Support for parsing ISO 8601 date strings:\n        parseDateTimestamp = Date.parse(v)\n        if (d.format === \"time\" && Number.isNaN(parseDateTimestamp)) {\n          // The pasted value was not a valid date string\n          // Try to interpret value as time string instead (HH:mm:ss)\n          parseDateTimestamp = Date.parse(`1970-01-01T${v}Z`)\n        }\n      }\n    }\n    return {\n      ...d,\n      date: Number.isNaN(parseDateTimestamp)\n        ? undefined\n        : new Date(parseDateTimestamp),\n    }\n  },\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { ImageEditorType } from \"@glideapps/glide-data-grid\"\nimport styled from \"@emotion/styled\"\n\nconst StyledImage = styled.img(() => ({\n  maxWidth: \"100%\",\n  maxHeight: \"600px\",\n  objectFit: \"scale-down\",\n}))\n\nexport const ImageCellEditor: ImageEditorType = ({ urls }) => {\n  const imageData = urls && urls.length > 0 ? urls[0] : \"\"\n  // Allow external image links to be opened in a new tab on click\n  if (imageData.startsWith(\"http\")) {\n    return (\n      <a href={imageData} target=\"_blank\" rel=\"noreferrer noopener\">\n        <StyledImage src={imageData}></StyledImage>\n      </a>\n    )\n  }\n\n  return <StyledImage src={imageData}></StyledImage>\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ObjectColumn from \"./ObjectColumn\"\nimport TextColumn from \"./TextColumn\"\nimport CheckboxColumn from \"./CheckboxColumn\"\nimport SelectboxColumn from \"./SelectboxColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\nimport LinkColumn from \"./LinkColumn\"\nimport ImageColumn from \"./ImageColumn\"\nimport ProgressColumn from \"./ProgressColumn\"\nimport DateTimeColumn, { DateColumn, TimeColumn } from \"./DateTimeColumn\"\nimport { LineChartColumn, BarChartColumn } from \"./ChartColumn\"\n\nimport { DateTimeCellRenderer } from \"./cells/DateTimeCell\"\nexport { ImageCellEditor } from \"./cells/ImageCellEditor\"\n\nimport { ColumnCreator } from \"./utils\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n *\n * These names must match the column names used in the backend.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    checkbox: CheckboxColumn,\n    selectbox: SelectboxColumn,\n    list: ListColumn,\n    number: NumberColumn,\n    link: LinkColumn,\n    datetime: DateTimeColumn,\n    date: DateColumn,\n    time: TimeColumn,\n    line_chart: LineChartColumn,\n    bar_chart: BarChartColumn,\n    image: ImageColumn,\n    progress: ProgressColumn,\n  })\n)\n\nexport const CustomCells = [DateTimeCellRenderer]\n\nexport {\n  ObjectColumn,\n  TextColumn,\n  CheckboxColumn,\n  SelectboxColumn,\n  ListColumn,\n  NumberColumn,\n  LinkColumn,\n  DateTimeColumn,\n  DateColumn,\n  TimeColumn,\n  LineChartColumn,\n  BarChartColumn,\n  ImageColumn,\n  ProgressColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\nimport moment from \"moment\"\n\nimport {\n  DataFrameCell,\n  Quiver,\n  Type as ArrowType,\n} from \"src/lib/dataframes/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  CheckboxColumn,\n  NumberColumn,\n  TextColumn,\n  SelectboxColumn,\n  ListColumn,\n  isErrorCell,\n  DateTimeColumn,\n  TimeColumn,\n  DateColumn,\n  removeLineBreaks,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"decimal\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  // TODO(lukasmasuch): use data.dimensions instead here?\n  const numIndices = data.types?.index?.length ?? 0\n  const numColumns = data.columns?.[0]?.length ?? 0\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      Quiver.getTypeName(column.arrowType) === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(Quiver.adjustTimestamp(arrowCell.content, arrowCell.field))\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { merge } from \"lodash\"\n\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"src/lib/proto\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\nimport { logWarning, logError } from \"src/lib/util/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"src/lib/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"src/lib/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the proto message.\n *\n * @param element - The proto message of the dataframe element.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(element: ArrowProto): Map<string, any> {\n  if (!element.columns) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(element.columns)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  // TODO(lukasmasuch): We might use state to store the column config as additional optimization?\n  const columnConfigMapping = getColumnConfig(element)\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  let configuredColumns: BaseColumn[] = getAllColumnsFromArrow(data)\n    .map(column => {\n      // Apply column configurations\n      let updatedColumn = {\n        ...column,\n        ...applyColumnConfig(column, columnConfigMapping),\n        isStretched: stretchColumns,\n      } as BaseColumnProps\n\n      const ColumnType = getColumnType(updatedColumn)\n\n      // Make sure editing is deactivated if the column is read-only, disabled,\n      // or a not editable type.\n      if (\n        element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n        disabled ||\n        ColumnType.isEditableType === false\n      ) {\n        updatedColumn = {\n          ...updatedColumn,\n          isEditable: false,\n        }\n      }\n\n      if (\n        element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n        updatedColumn.isEditable == true\n      ) {\n        // Set editable icon for all editable columns:\n        updatedColumn = {\n          ...updatedColumn,\n          icon: \"editable\",\n        }\n      }\n\n      return ColumnType(updatedColumn)\n    })\n    .filter(column => {\n      // Filter out all columns that are hidden\n      return !column.isHidden\n    })\n\n  // Reorder columns based on the user configuration:\n  if (element.columnOrder && element.columnOrder.length > 0) {\n    const orderedColumns: BaseColumn[] = []\n\n    // Add all index columns to the beginning of the list:\n    configuredColumns.forEach(column => {\n      if (column.isIndex) {\n        orderedColumns.push(column)\n      }\n    })\n\n    // Reorder non-index columns based on the configured column order:\n    element.columnOrder.forEach(columnName => {\n      const column = configuredColumns.find(\n        column => column.name === columnName\n      )\n      if (column && !column.isIndex) {\n        orderedColumns.push(column)\n      }\n    })\n\n    configuredColumns = orderedColumns\n  }\n\n  // If all columns got filtered out, we add an empty index column\n  // to prevent errors from glide-data-grid.\n  const columns =\n    configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport { BaseColumn, isMissingValueCell } from \"./columns\"\nimport { INDEX_IDENTIFIER } from \"./hooks/useColumnLoader\"\n\n/**\n * Get the column name for a given column to use in the widget state.\n * This is either the column name or the index identifier for index columns.\n */\nfunction getColumnName(column: BaseColumn): string {\n  // TODO(lukasmasuch): We need to adapt this once we want to support multi-index columns.\n  return column.isIndex\n    ? INDEX_IDENTIFIER\n    : isNullOrUndefined(column.name)\n    ? \"\"\n    : column.name\n}\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_rows: {} as Record<number, Record<string, any>>,\n      added_rows: [] as Record<string, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // row position -> column name -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        const editedRow: Record<string, any> = {}\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            editedRow[getColumnName(column)] = column.getCellValue(cell)\n          }\n        })\n        currentState.edited_rows[rowIndex] = editedRow\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column name -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<string, any> = {}\n      // This flags is used to check if the row is incomplete\n      // (i.e. missing required values) and should therefore not be included in\n      // the current state version.\n      let isIncomplete = false\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            // If the cell is missing a required value, the row is incomplete\n            isIncomplete = true\n          }\n\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[getColumnName(column)] = cellValue\n          }\n        }\n      })\n      if (!isIncomplete) {\n        currentState.added_rows.push(addedRow)\n      }\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (_k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    // Clear existing state:\n    this.editedCells = new Map()\n    this.addedRows = []\n    this.deletedRows = []\n\n    // Parse JSON editing string:\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Map column name to columns\n    const columnsByName = new Map<string, BaseColumn>()\n    columns.forEach(column => {\n      columnsByName.set(getColumnName(column), column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_rows).forEach(key => {\n      const rowIndex = Number(key)\n      const editedRow = editingState.edited_rows[key]\n      Object.keys(editedRow).forEach((colName: string) => {\n        const cellValue = editedRow[colName]\n        const column = columnsByName.get(colName)\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            if (!this.editedCells.has(rowIndex)) {\n              this.editedCells.set(rowIndex, new Map())\n            }\n            this.editedCells.get(rowIndex)?.set(column.indexNumber, cell)\n          }\n        }\n      })\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<string, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colName => {\n        const cellValue = row[colName]\n\n        const column = columnsByName.get(colName)\n\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            addedRow.set(column.indexNumber, cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme, SpriteMap } from \"@glideapps/glide-data-grid\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"src/lib/theme\"\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): Partial<GlideTheme> & {\n  tableBorderRadius: string\n  headerIcons: SpriteMap\n} {\n  const theme: EmotionTheme = useTheme()\n\n  const headerIcons = React.useMemo<SpriteMap>(() => {\n    return {\n      // Material design icon `edit_note`:\n      // https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Aedit_note%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048\n      // We need to provide this as string as explained explained here: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#headericons\n      editable: p =>\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40\" viewBox=\"0 96 960 960\" width=\"40\" fill=\"${p.bgColor}\"><path d=\"m800.641 679.743-64.384-64.384 29-29q7.156-6.948 17.642-6.948 10.485 0 17.742 6.948l29 29q6.948 7.464 6.948 17.95 0 10.486-6.948 17.434l-29 29Zm-310.64 246.256v-64.383l210.82-210.821 64.384 64.384-210.821 210.82h-64.383Zm-360-204.872v-50.254h289.743v50.254H130.001Zm0-162.564v-50.255h454.615v50.255H130.001Zm0-162.307v-50.255h454.615v50.255H130.001Z\"/></svg>`,\n    }\n  }, [])\n\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    horizontalBorderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    textGroupHeader: theme.colors.fadedText60,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText40,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n    // Unused settings:\n    // lineHeight\n    // Custom settings\n    tableBorderRadius: theme.radii.lg,\n    // Configure custom SVG icons used in the column header:\n    headerIcons,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridCell, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { logError } from \"src/lib/util/log\"\n\nimport { getCellFromArrow } from \"src/lib/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"src/lib/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"src/lib/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || editingState.current.isAddedRow(originalRow)) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (editedCell !== undefined) {\n          return editedCell\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        logError(error)\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"src/lib/proto\"\nimport { notNullOrUndefined } from \"src/lib/util/utils\"\n\nconst ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = 52\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  rowHeight: number\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  // +2 pixels for borders\n  return Math.max(numRows * ROW_HEIGHT + 1 + 2, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    rowHeight: ROW_HEIGHT,\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  EditableGridCell,\n  GridCell,\n  DataEditorProps,\n  GridSelection,\n  Item,\n  ValidatedGridCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { logWarning } from \"src/lib/util/log\"\nimport { notNullOrUndefined } from \"src/lib/util/utils\"\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"src/lib/components/widgets/DataFrame/columns\"\nimport EditingState from \"src/lib/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\" | \"validateCell\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param applyEdits - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  applyEdits: (clearSelection?: boolean, triggerRerun?: boolean) => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      if (!column.isEditable) {\n        return\n      }\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue, true)\n      // Only update the cell if the new cell is not causing any errors:\n      if (!isErrorCell(newCell)) {\n        editingState.current.setCell(originalCol, originalRow, {\n          ...newCell,\n          lastUpdated: performance.now(),\n        })\n\n        applyEdits()\n      } else {\n        logWarning(\n          `Not applying the cell edit since it causes this error:\\n ${newCell.data}`\n        )\n      }\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, applyEdits]\n  )\n\n  /**\n   * Appends a new empty row to the end of the table.\n   */\n  const appendEmptyRow = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      // For the default value, we trust the developer to make a valid choice,\n      // so we do not validate the value here.\n      newRow.set(column.indexNumber, column.getCell(column.defaultValue))\n    })\n    editingState.current.addRow(newRow)\n  }, [columns, editingState, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user adds a new row in the table UI.\n   */\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    appendEmptyRow()\n    applyEdits()\n  }, [appendEmptyRow, applyEdits, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user deletes a row or cell value in the table UI.\n   */\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        applyEdits(true)\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            // Only allow deletion if the column is editable and not configured as required\n            if (column.isEditable && !column.isRequired) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      applyEdits,\n      onCellEdited,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid when the user pastes data into the table.\n   */\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          appendEmptyRow()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue, true)\n            // We are not editing cells if the pasted value leads to an error:\n            if (notNullOrUndefined(newCell) && !isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      appendEmptyRow,\n      applyEdits,\n      refreshCells,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid to validate the data inputted into a cell by the user.\n   */\n  const validateCell = React.useCallback(\n    (cell: Item, newValue: EditableGridCell) => {\n      const col = cell[0]\n      if (col >= columns.length) {\n        // This should never happen.\n        // But we return true (default) to avoid any unknown issues.\n        return true\n      }\n\n      const column = columns[col]\n      if (column.validateInput) {\n        // We get the actual raw value of the new cell and\n        // validate it based on the column validateInput implementation:\n        const validationResult = column.validateInput(\n          column.getCellValue(newValue)\n        )\n        if (validationResult === true || validationResult === false) {\n          // Only return if the validation result is a valid boolean value (true or false)\n          // validationResult can also be other values, so we need to check this specifically.\n          return validationResult\n        }\n        // If it is any other value, we return it as a corrected cell:\n        return column.getCell(validationResult) as ValidatedGridCell\n      }\n      // If no validation is implemented, we accept the value:\n      return true\n    },\n    [columns]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n    validateCell,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  // Apply column widths from state:\n  const sizedColumns = columns.map(column => {\n    if (\n      column.id &&\n      columnSizes.has(column.id) &&\n      columnSizes.get(column.id) !== undefined\n    ) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n        // Deactivate grow whenever a column gets manually resized\n        grow: 0,\n      } as GridColumn\n    }\n    return column\n  })\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"src/lib/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridCell,\n  DataEditorProps,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"src/lib/util/utils\"\nimport {\n  BaseColumn,\n  hasTooltip,\n  isMissingValueCell,\n} from \"src/lib/components/widgets/DataFrame/columns\"\n\n// Debounce time for triggering the tooltip on hover.\nexport const DEBOUNCE_TIME_MS = 600\n// Tooltip message for required cells that are empty.\nexport const REQUIRED_CELL_TOOLTIP = \"⚠️ Please fill out this cell.\"\n\nexport type TooltipsReturn = {\n  // The tooltip to show (if any):\n  tooltip: { content: string; left: number; top: number } | undefined\n  // A callback to clear the tooltip:\n  clearTooltip: () => void\n  // The glide-data-grid function that is called when a cell is hovered:\n} & Pick<DataEditorProps, \"onItemHovered\">\n\n/**\n * Hook that can show a tooltip when hovering over a cell or header if configured.\n *\n * The tooltip is shown after a delay, and is cleared when the user clicks outside,\n * fires escape, or moves outside of the target cell.\n *\n * @param columns columns of the datagrid\n * @param getCellContent function that returns the cell content for a given cell position\n * @returns the tooltip to show (if any), a callback to clear the tooltip, and the\n * onItemHovered callback to pass to the datagrid\n */\nfunction useTooltips(\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): TooltipsReturn {\n  const [tooltip, setTooltip] = React.useState<\n    { content: string; left: number; top: number } | undefined\n  >()\n  const timeoutRef = React.useRef<any>(null)\n\n  const onItemHovered = React.useCallback(\n    (args: GridMouseEventArgs) => {\n      // Always reset the tooltips on any change here\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = 0\n      setTooltip(undefined)\n\n      if ((args.kind === \"header\" || args.kind === \"cell\") && args.location) {\n        const colIdx = args.location[0]\n        const rowIdx = args.location[1]\n        let tooltipContent: string | undefined\n\n        if (colIdx < 0 || colIdx >= columns.length) {\n          // Ignore negative column index (Row index column)\n          // and column index that is out of bounds\n          return\n        }\n\n        const column = columns[colIdx]\n\n        if (args.kind === \"header\" && notNullOrUndefined(column)) {\n          tooltipContent = column.help\n        } else if (args.kind === \"cell\") {\n          // TODO(lukasmasuch): Ignore the last row if num_rows=dynamic (trailing row).\n\n          const cell = getCellContent([colIdx, rowIdx])\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            tooltipContent = REQUIRED_CELL_TOOLTIP\n          } else if (hasTooltip(cell)) {\n            tooltipContent = cell.tooltip\n          }\n        }\n\n        if (tooltipContent) {\n          timeoutRef.current = setTimeout(() => {\n            if (tooltipContent) {\n              setTooltip({\n                content: tooltipContent,\n                left: args.bounds.x + args.bounds.width / 2,\n                top: args.bounds.y,\n              })\n            }\n          }, DEBOUNCE_TIME_MS)\n        }\n      }\n    },\n    [columns, getCellContent, setTooltip, timeoutRef]\n  )\n\n  const clearTooltip = React.useCallback(() => {\n    setTooltip(undefined)\n  }, [setTooltip])\n\n  return {\n    tooltip,\n    clearTooltip,\n    onItemHovered,\n  }\n}\n\nexport default useTooltips\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  DrawCustomCellCallback,\n  Rectangle,\n  Theme as GlideTheme,\n  drawTextCell,\n} from \"@glideapps/glide-data-grid\"\nimport { useExtraCells } from \"@glideapps/glide-data-grid-cells\"\n\nimport {\n  BaseColumn,\n  CustomCells,\n  isMissingValueCell,\n} from \"src/lib/components/widgets/DataFrame/columns\"\n\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n\n/**\n * Draw a red indicator in the top right corner of the cell\n * to indicate that the cell is required.\n */\nexport function drawRequiredIndicator(\n  ctx: CanvasRenderingContext2D,\n  rect: Rectangle,\n  theme: GlideTheme\n): void {\n  ctx.save()\n  ctx.beginPath()\n  // We are first moving the drawing position under the top right corner\n  // 8 pixels from left side (this is the size triangle)\n  // and 1 pixel from top side (to be under the cell border).\n  ctx.moveTo(rect.x + rect.width - 8, rect.y + 1)\n  // We draw the first line to the top right corner.\n  ctx.lineTo(rect.x + rect.width, rect.y + 1)\n  // We draw the second line 8 pixel down on the right cell border\n  ctx.lineTo(rect.x + rect.width, rect.y + 1 + 8)\n  // And now its enough to just fill it with a color to get a triangle.\n  ctx.fillStyle = theme.accentColor\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n */\nexport const drawMissingPlaceholder: DrawCustomCellCallback = args => {\n  const { cell, theme } = args\n  drawTextCell(\n    {\n      ...args,\n      theme: {\n        ...theme,\n        textDark: theme.textLight,\n        textMedium: theme.textLight,\n      },\n      // The following props are just added for technical reasons:\n      // @ts-expect-error\n      spriteManager: {},\n      hyperWrapping: false,\n    },\n    NULL_VALUE_TOKEN,\n    cell.contentAlign\n  )\n  return true\n}\n\n/**\n * Create return type for useCustomRenderer hook based on the DataEditorProps.\n */\ntype CustomRendererReturn = Pick<\n  DataEditorProps,\n  \"drawCell\" | \"customRenderers\"\n>\n\n/**\n * Custom hook that creates some custom cell renderers compatible with glide-data-grid.\n *\n * This includes capabilities like showing a faded placeholder for missing values or\n * a red indicator for required cells.\n *\n * @param columns - The columns of the table.\n * @param hasSelectionRow - Whether the table has the selection row activated (e.g. for dynamic editing).\n *\n * @returns An object containing the following properties:\n * - `drawCell`: A function that overwrites some rendering that can be\n *    passed to the `DataEditor` component.\n * - `customRenderers`: A map of custom cell renderers used by custom cells\n *    that can be passed to the `DataEditor` component.\n */\nfunction useCustomRenderer(\n  columns: BaseColumn[],\n  hasSelectionRow: boolean\n): CustomRendererReturn {\n  const drawCell: DrawCustomCellCallback = React.useCallback(\n    args => {\n      const { cell, theme, ctx, rect } = args\n      const colPos = hasSelectionRow ? args.col - 1 : args.col\n      if (isMissingValueCell(cell) && colPos < columns.length) {\n        let contentRendered = false\n        const column = columns[colPos]\n\n        // We explicitly ignore some cell types here (e.g. checkbox, progress...) since\n        // they are taking care of rendering their missing value state themselves (usually as empty cell).\n        // All other cell types are rendered with a placeholder symbol and a faded text color via drawMissingPlaceholder.\n        if (\n          ![\"checkbox\", \"line_chart\", \"bar_chart\", \"progress\"].includes(\n            column.kind\n          )\n        ) {\n          drawMissingPlaceholder(args)\n          contentRendered = true\n        }\n\n        if (column.isRequired && column.isEditable) {\n          // If the cell value is missing, and it is configured as required & editable,\n          // we draw a red indicator in the top right corner of the cell.\n          drawRequiredIndicator(ctx, rect, theme)\n        }\n\n        return contentRendered\n      }\n\n      return false\n    },\n    [columns, hasSelectionRow]\n  )\n\n  // Load extra cell renderers from the glide-data-grid-cells package:\n  const extraCellArgs = useExtraCells()\n\n  return {\n    drawCell,\n    customRenderers: [...extraCellArgs.customRenderers, ...CustomCells],\n  }\n}\n\nexport default useCustomRenderer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer = styled.div(({ theme }) => ({\n  position: \"relative\",\n  display: \"inline-block\",\n\n  \"& .glideDataEditor\": {\n    height: \"100%\",\n    minWidth: \"100%\",\n    borderRadius: theme.radii.lg,\n  },\n\n  \"& .dvn-scroller\": {\n    scrollbarWidth: \"thin\",\n    [\"overflowX\" as any]: \"overlay !important\",\n    [\"overflowY\" as any]: \"overlay !important\",\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Popover, PLACEMENT, ACCESSIBILITY_TYPE } from \"baseui/popover\"\n\nimport StreamlitMarkdown from \"src/lib/components/shared/StreamlitMarkdown/StreamlitMarkdown\"\nimport { StyledTooltipContentWrapper } from \"src/lib/components/shared/Tooltip/styled-components\"\nimport { hasLightBackgroundColor } from \"src/lib/theme/utils\"\nimport { EmotionTheme } from \"src/lib/theme\"\n\nexport interface TooltipProps {\n  // The top position of the tooltip.\n  top: number\n  // The left position of the tooltip.\n  left: number\n  // The markdown content of the tooltip.\n  content: string\n  // Callback from useTooltips hook to clear the tooltip\n  clearTooltip: () => void\n}\n\n/**\n * A tooltip that can be positioned anywhere on the screen.\n *\n * This is mostly the same as the shared tooltip implementation, but\n * we cannot use that one since it is a StatefulTooltip and requires\n * a target component and cannot be triggered programmatically.\n * We need to be able to position the tooltip anywhere on the screen, so we use a Popover\n * instead. Since Popover doesn't support positioning to a virtual position,\n * we are using an invisible div as a workaround.\n *\n * @param top The top position of the tooltip.\n * @param left The left position of the tooltip.\n * @param content The markdown content of the tooltip.\n * @returns The tooltip react element.\n */\nfunction Tooltip({\n  top,\n  left,\n  content,\n  clearTooltip,\n}: TooltipProps): ReactElement {\n  const [open, setOpen] = React.useState(true)\n  const theme: EmotionTheme = useTheme()\n  const { colors, fontSizes, radii } = theme\n\n  const closeTooltip = React.useCallback((): void => {\n    setOpen(false)\n    clearTooltip()\n  }, [clearTooltip, setOpen])\n\n  return (\n    <Popover\n      content={\n        <StyledTooltipContentWrapper className=\"stTooltipContent\">\n          <StreamlitMarkdown\n            style={{ fontSize: fontSizes.sm }}\n            source={content}\n            allowHTML={false}\n          />\n        </StyledTooltipContentWrapper>\n      }\n      placement={PLACEMENT.top}\n      accessibilityType={ACCESSIBILITY_TYPE.tooltip}\n      showArrow={false}\n      popoverMargin={5}\n      onClickOutside={closeTooltip}\n      onEsc={closeTooltip}\n      overrides={{\n        Body: {\n          style: {\n            // This is annoying, but a bunch of warnings get logged when the\n            // shorthand version `borderRadius` is used here since the long\n            // names are used by BaseWeb and mixing the two is apparently\n            // bad :(\n            borderTopLeftRadius: radii.md,\n            borderTopRightRadius: radii.md,\n            borderBottomLeftRadius: radii.md,\n            borderBottomRightRadius: radii.md,\n\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n\n            backgroundColor: \"transparent\",\n          },\n        },\n        Inner: {\n          style: {\n            backgroundColor: hasLightBackgroundColor(theme)\n              ? colors.bgColor\n              : colors.secondaryBg,\n            color: colors.bodyText,\n            fontSize: fontSizes.sm,\n            fontWeight: \"normal\",\n            // See the long comment about `borderRadius`. The same applies here\n            // to `padding`.\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n          },\n        },\n      }}\n      isOpen={open}\n    >\n      <div\n        className=\"stTooltipTarget\"\n        style={{\n          // This is an invisible div that's used to position the tooltip.\n          // The position is provided from outside via the `top` and `left` properties.\n          // This a workaround for the fact that BaseWeb's Popover  doesn't support\n          // positioning to a virtual position and always requires a target\n          // component for positioning.\n          position: \"fixed\",\n          top,\n          left,\n        }}\n      ></div>\n    </Popover>\n  )\n}\n\nexport default Tooltip\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  GridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\n\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport withFullScreenWrapper from \"src/lib/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"src/lib/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"src/lib/proto\"\nimport { WidgetInfo, WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"src/lib/util/utils\"\n\nimport EditingState from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n  useTooltips,\n  useCustomRenderer,\n} from \"./hooks\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  getTextCell,\n  ImageCellEditor,\n} from \"./columns\"\nimport { StyledResizableContainer } from \"./styled-components\"\nimport Tooltip from \"./Tooltip\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\n\n// Min column width used for manual and automatic resizing\nconst MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nconst MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nconst MAX_COLUMN_AUTO_WIDTH = 500\n// Debounce time for triggering a widget state update\n// This prevents to rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 100\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n}: DataFrameProps): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n\n  const theme = useCustomTheme()\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  // This callback is used to clear all selections (row/column/cell)\n  const clearSelection = React.useCallback(() => {\n    setGridSelection({\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: undefined,\n    })\n  }, [])\n\n  // This callback is used to refresh the rendering of selected cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: [number, number]\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  // On the first rendering, try to load initial widget state if\n  // it exist. This is required in the case that other elements\n  // are inserted before this widget.\n  React.useEffect(\n    () => {\n      if (element.editingMode !== READ_ONLY) {\n        const initialWidgetValue = widgetMgr.getStringValue(element)\n        if (initialWidgetValue) {\n          editingState.current.fromJson(initialWidgetValue, originalColumns)\n          setNumRows(editingState.current.getNumRows())\n        }\n      }\n    },\n    // TODO: fix incorrect hook usage. Could misbehave with add_rows so leaving here for now\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback should be called after any edits have been applied to the data.\n   * It will finish up the editing by updating the number of rows, clearing the selection,\n   * and triggering a rerun of the script.\n   *\n   * @param clearSelections - Whether to clear the selection. This is usually done after deleting rows.\n   * @param triggerRerun - Whether to trigger a rerun of the script after applying edits\n   */\n  const applyEdits = React.useCallback(\n    (clearSelections = false, triggerRerun = true) => {\n      if (numRows !== editingState.current.getNumRows()) {\n        // Reset the number of rows if it has been changed in the editing state\n        setNumRows(editingState.current.getNumRows())\n      }\n\n      if (clearSelections) {\n        clearSelection()\n      }\n\n      // Use debounce to prevent rapid updates to the widget state.\n      debounce(DEBOUNCE_TIME_MS, () => {\n        const currentEditingState = editingState.current.toJson(columns)\n        let currentWidgetState = widgetMgr.getStringValue(\n          element as WidgetInfo\n        )\n\n        if (currentWidgetState === undefined) {\n          // Create an empty widget state\n          currentWidgetState = new EditingState(0).toJson([])\n        }\n\n        // Only update if there is actually a difference between editing and widget state\n        if (currentEditingState !== currentWidgetState) {\n          widgetMgr.setStringValue(\n            element as WidgetInfo,\n            currentEditingState,\n            {\n              fromUi: triggerRerun,\n            }\n          )\n        }\n      })()\n    },\n    [widgetMgr, element, numRows, clearSelection, columns]\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      applyEdits\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(\n    columns,\n    // TODO(lukasmasuch): if we add row selections, we need to set it to true here as well:\n    element.editingMode === DYNAMIC\n  )\n\n  const { columns: glideColumns, onColumnResize } = useColumnSizer(\n    columns.map(column => toGlideColumn(column))\n  )\n\n  const {\n    rowHeight,\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetEditingState\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, resetEditingState, widgetMgr])\n\n  return (\n    <StyledResizableContainer\n      className=\"stDataFrame\"\n      onBlur={() => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        if (!isFocused && !isTouchDevice) {\n          clearSelection()\n        }\n      }}\n    >\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${theme.tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, rowHeight]}\n        snapGap={rowHeight / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add an additional pixel if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height === 3\n                  ? resizableRef.current.size.height + 3\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={rowHeight}\n          headerHeight={rowHeight}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={onColumnResize}\n          // Freeze all index columns:\n          freezeColumns={\n            isEmptyTable\n              ? 0\n              : columns.filter((col: BaseColumn) => col.isIndex).length\n          }\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={(col: number) =>\n            // Show no border for last column in certain situations\n            // This is required to prevent the cell selection border to not be cut off\n            !(\n              col >= columns.length &&\n              (element.useContainerWidth || resizableSize.width === \"100%\")\n            )\n          }\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={!isTouchDevice ? \"rect\" : \"none\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate search:\n          keybindings={{ search: true, downFill: true }}\n          // Header click is used for column sorting:\n          onHeaderClicked={\n            // Deactivate sorting for empty state and for large dataframes:\n            isEmptyTable || isLargeTable ? undefined : sortColumn\n          }\n          gridSelection={gridSelection}\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            if (isFocused || isTouchDevice) {\n              // Only allow selection changes if the grid is focused.\n              // This is mainly done because there is a bug when overlay click actions\n              // are outside of the bounds of the table (e.g. select dropdown or date picker).\n              // This results in the first cell being selected for a short period of time\n              // But for touch devices, preventing this can cause issues to select cells.\n              // So we allow selection changes for touch devices even when it is not focused.\n              setGridSelection(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n            scrollbarWidthOverride: 1,\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={theme.headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkerTheme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n              rowMarkers: \"checkbox\",\n              rowSelectionMode: \"auto\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"names":["BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","kind","GridCellKind","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","isMissingValueCell","isMissingValue","getEmptyCell","toGlideColumn","column","id","title","hasMenu","themeOverride","icon","isStretched","grow","isIndex","width","mergeColumnParameters","defaultParams","userParams","isNullOrUndefined","merge","toSafeArray","Uint8Array","TextDecoder","decode","trim","startsWith","endsWith","split","JSON","parse","error","parsedData","stringify","_key","value","Number","isArray","map","includes","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","length","unformattedValue","numbro","notNullOrUndefined","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","undefined","style","minimumFractionDigits","maximumFractionDigits","notation","sprintf","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","moment","utc","isValid","parsedMomentTime","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","ObjectColumn","props","cellTemplate","contentAlignment","sortMode","isEditable","getCell","cellData","getCellValue","isEditableType","TextColumn","parameters","columnTypeOptions","validateRegex","validate","validateInput","isRequired","corrected","max_chars","slice","test","validationResult","CheckboxColumn","contentAlign","SelectboxColumn","dataType","options","Quiver","arrowType","uniqueTypes","Set","x","size","has","copyData","allowedValues","filter","opt","ListColumn","isString","isIntegerType","arrowTypeName","NumberColumn","step","min_value","allowNegative","fixedDecimals","max_value","decimals","trunc","isInteger","isSafeInteger","LinkColumn","ImageColumn","allowAdd","imageUrls","ProgressColumn","measureLabel","min","max","label","String","normalizeCellValue","applyTimezone","timezone","utcOffset","tz","BaseDateTimeColumn","defaultFormat","defaultStep","inputType","toISOString","defaultTimezoneOffset","minDate","maxDate","date","displayDate","timezoneOffset","DateTimeColumn","meta","hasTimezone","TimeColumn","DateColumn","BaseChartColumn","chart_type","y_min","y_max","values","displayValues","graphKind","yAxis","chartData","convertedChartData","normalizedChartData","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","v","join","LineChartColumn","BarChartColumn","StyledInputBox","formatValueForHTMLInput","dateKind","isoDate","Error","Editor","timezoneOffsetMs","highlight","autoFocus","disabled","onChange","required","type","defaultValue","event","target","valueAsNumber","DateTimeCellRenderer","isMatch","draw","args","drawTextCell","measure","ctx","measureText","provideEditor","editor","onPaste","d","parseDateTimestamp","valueOf","StyledImage","maxWidth","maxHeight","objectFit","ImageCellEditor","urls","imageData","href","rel","src","ColumnTypes","Map","Object","entries","object","checkbox","selectbox","list","number","link","datetime","time","line_chart","bar_chart","image","progress","CustomCells","extractCssProperty","htmlElementId","property","cssStyle","regex","match","exec","getIndexFromArrow","indexPosition","types","index","indexNames","name","isHidden","getColumnFromArrow","columnPosition","columns","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","content","contentType","field","parsedDate","unit","displayContent","cssId","fontColor","textDark","backgroundColor","bgCell","applyPandasStylerCss","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","getColumnType","ColumnType","customType","get","logWarning","typeName","getColumnTypeFromArrow","element","columnConfigMapping","logError","getColumnConfig","stretchColumns","useContainerWidth","configuredColumns","numIndices","numColumns","indexNumber","getAllColumnsFromArrow","updatedColumn","columnProps","columnConfig","hidden","type_config","alignment","default","help","applyColumnConfig","editingMode","ArrowProto","columnOrder","orderedColumns","forEach","columnName","find","getColumnName","numRows","editedCells","addedRows","deletedRows","this","columnsByIndex","set","currentState","edited_rows","added_rows","deleted_rows","row","rowIndex","_map","editedRow","colIndex","addedRow","isIncomplete","cellValue","_k","editingStateJson","editingState","columnsByName","keys","key","colName","col","isAddedRow","rowCache","rowCells","rows","sort","a","b","deleteRow","splice","delete","originalIndex","theme","useTheme","headerIcons","React","editable","p","bgColor","accentColor","colors","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","horizontalBorderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","bodyText","textMedium","textLight","fadedText40","textBubble","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","radii","lg","getCellContent","originalCol","originalRow","current","getOriginalRowIndex","editedCell","ROW_HEIGHT","MIN_TABLE_HEIGHT","containerWidth","containerHeight","isFullScreen","initialWidth","calculateMaxHeight","initialHeight","height","resizableSize","setResizableSize","rowHeight","minHeight","minWidth","fixedNumRows","getOriginalIndex","refreshCells","applyEdits","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","setCell","lastUpdated","performance","now","appendEmptyRow","newRow","addRow","onRowAppended","onDelete","selection","rowsToDelete","toArray","deleteRows","range","updatedCells","selectedArea","y","targetCol","targetRow","rowData","getNumRows","pasteDataValue","validateCell","useState","columnSizes","setColumnSizes","onColumnResize","_newSize","_colIndex","newSizeWithGrow","setSort","useGlideColumnSort","getCellContentSorted","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","tooltip","setTooltip","timeoutRef","onItemHovered","clearTimeout","location","tooltipContent","colIdx","rowIdx","hasTooltip","setTimeout","left","bounds","top","clearTooltip","hasSelectionRow","drawCell","rect","colPos","contentRendered","spriteManager","hyperWrapping","drawMissingPlaceholder","save","beginPath","moveTo","lineTo","fillStyle","fill","restore","drawRequiredIndicator","extraCellArgs","useExtraCells","customRenderers","StyledResizableContainer","position","display","borderRadius","scrollbarWidth","open","setOpen","closeTooltip","className","StreamlitMarkdown","fontSize","source","allowHTML","placement","PLACEMENT","accessibilityType","ACCESSIBILITY_TYPE","showArrow","popoverMargin","onClickOutside","onEsc","overrides","Body","borderTopLeftRadius","md","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingBottom","paddingLeft","paddingRight","Inner","hasLightBackgroundColor","color","fontWeight","isOpen","withFullScreenWrapper","widgetMgr","resizableRef","dataEditorRef","useCustomTheme","isFocused","setIsFocused","isTouchDevice","window","matchMedia","matches","CompactSelection","gridSelection","setGridSelection","clearSelection","cells","updateCells","READ_ONLY","DYNAMIC","dataDimensions","dimensions","originalNumRows","isEmptyTable","dataColumns","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","fromJson","getOriginalCellContent","useDataLoader","useColumnSort","clearSelections","triggerRerun","debounce","currentEditingState","toJson","currentWidgetState","setStringValue","fromUi","useDataEditor","useTooltips","useCustomRenderer","useColumnSizer","glideColumns","useTableSizer","getEmptyStateContent","faded","getTextCell","span","formClearHelper","FormClearHelper","manageFormClearListener","formId","disconnect","onBlur","ref","defaultSize","border","enable","right","bottom","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_ref","_delta","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","headerHeight","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","downFill","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","imageEditorOverride","fillHandle","trailingRowOptions","sticky","tint","rowMarkerTheme","rowSelectionMode"],"sourceRoot":""}