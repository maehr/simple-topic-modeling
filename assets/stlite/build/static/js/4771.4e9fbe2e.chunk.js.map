{"version":3,"file":"static/js/4771.4e9fbe2e.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/Toolbar/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/Toolbar/Toolbar.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/DateTimeColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/CheckboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/isIntegerType.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/SelectboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/LinkColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ImageColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ProgressColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ChartColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/uri-overlay-editor-style.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/UriOverlayEditor.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/LinkCell.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataExporter.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTooltips.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomRenderer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/ImageCellEditor.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/Tooltip.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { StyledComponent } from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledToolbarWrapperProps {\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n}\n\nexport const StyledToolbarWrapper = styled.div<StyledToolbarWrapperProps>(\n  ({ theme, locked, target }) => ({\n    padding: \"0.5rem 0 0.5rem 0.5rem\",\n    position: \"absolute\",\n    top: locked ? \"-2.4rem\" : \"-1rem\",\n    right: theme.spacing.none,\n    transition: \"none\",\n    ...(!locked && {\n      opacity: 0,\n      \"&:active, &:focus-visible, &:hover\": {\n        transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n        opacity: 1,\n        top: \"-2.4rem\",\n      },\n      ...(target && {\n        [`${target}:hover &, ${target}:active &, ${target}:focus-visible &`]: {\n          transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n          opacity: 1,\n          top: \"-2.4rem\",\n        },\n      }),\n    }),\n  })\n)\n\nexport const StyledToolbar = styled.div(({ theme }) => ({\n  color: hasLightBackgroundColor(theme)\n    ? theme.colors.fadedText60\n    : theme.colors.bodyText,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  boxShadow: \"1px 2px 8px rgba(0, 0, 0, 0.08)\",\n  borderRadius: theme.radii.lg,\n  backgroundColor: theme.colors.lightenedBg05,\n  width: \"fit-content\",\n  zIndex: theme.zIndices.sidebar + 1,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { EmotionIcon } from \"@emotion-icons/emotion-icon\"\nimport { useTheme } from \"@emotion/react\"\nimport { StyledComponent } from \"@emotion/styled\"\nimport { Fullscreen, FullscreenExit } from \"@emotion-icons/material-outlined\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport Tooltip, {\n  Placement,\n} from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Button, {\n  BaseButtonKind,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { StyledToolbar, StyledToolbarWrapper } from \"./styled-components\"\n\nexport interface ToolbarActionProps {\n  label: string\n  icon?: EmotionIcon\n  show_label?: boolean\n  onClick: () => void\n}\n\nexport function ToolbarAction({\n  label,\n  show_label,\n  icon,\n  onClick,\n}: ToolbarActionProps): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  const displayLabel = show_label ? label : \"\"\n  return (\n    <div data-testid=\"stElementToolbarButton\">\n      <Tooltip\n        content={\n          <StreamlitMarkdown\n            source={label}\n            allowHTML={false}\n            style={{ fontSize: theme.fontSizes.sm }}\n          />\n        }\n        placement={Placement.TOP}\n        // The default tooltip delay (== how fast the tooltip is triggered) of 200ms\n        // is a bit too fast for the toolbar use case. Therefore, we are setting it to 1000ms.\n        onMouseEnterDelay={1000}\n        inline\n      >\n        <Button\n          onClick={event => {\n            if (onClick) {\n              onClick()\n            }\n            event.stopPropagation()\n          }}\n          kind={BaseButtonKind.ELEMENT_TOOLBAR}\n        >\n          {icon && (\n            <Icon\n              content={icon}\n              size=\"md\"\n              testid=\"stElementToolbarButtonIcon\"\n            />\n          )}\n          {displayLabel && <span>{displayLabel}</span>}\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\n\nexport interface ToolbarProps {\n  onExpand?: () => void\n  onCollapse?: () => void\n  isFullScreen?: boolean\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n  disableFullscreenMode?: boolean\n}\n\nconst Toolbar: React.FC<React.PropsWithChildren<ToolbarProps>> = ({\n  onExpand,\n  onCollapse,\n  isFullScreen,\n  locked,\n  children,\n  target,\n  disableFullscreenMode,\n}): ReactElement => {\n  return (\n    <StyledToolbarWrapper\n      className={\"stElementToolbar\"}\n      data-testid={\"stElementToolbar\"}\n      locked={locked || isFullScreen}\n      target={target}\n    >\n      <StyledToolbar>\n        {children}\n        {onExpand && !disableFullscreenMode && !isFullScreen && (\n          <ToolbarAction\n            label={\"Fullscreen\"}\n            icon={Fullscreen}\n            onClick={() => onExpand()}\n          />\n        )}\n        {onCollapse && !disableFullscreenMode && isFullScreen && (\n          <ToolbarAction\n            label={\"Close fullscreen\"}\n            icon={FullscreenExit}\n            onClick={() => onCollapse()}\n          />\n        )}\n      </StyledToolbar>\n    </StyledToolbarWrapper>\n  )\n}\n\nexport default Toolbar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n  BaseGridCell,\n} from \"@glideapps/glide-data-grid\"\nimport toString from \"lodash/toString\"\nimport merge from \"lodash/merge\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { Type as ArrowType } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps, theme: EmotionTheme): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (data instanceof Uint8Array) {\n    // Stlite: Uint8Array is used for any list data in fastparquet.\n    // It stores a json string representation in the Uint8Array.\n    // We need to convert this to a string first\n    // to later have it load as json.\n    data = new TextDecoder(\"utf-8\").decode(data)\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!Array.isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (Array.isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  } else if (format === \"duration[ns]\") {\n    return moment.duration(value / (1000 * 1000), \"milliseconds\").humanize()\n  }\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n\n/**\n * Determines the correct value to display in a link cell based on the `href` and `regexPattern` parameters.\n *\n * @param href - The raw url value.\n * @param displayTextRegex - The regex pattern which will be applied to the `href`. If no match is found, then we return the `href`.\n * @returns - The string value to be displayed in the cell.\n *\n * * @example\n * const regex = new RegExp(\"https:\\/\\/(.*?)\\.streamlit\\.app\")\n * const regex2 = new RegExp(\"https:\\/\\/roadmap\\.(.*?)\\.app\")\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"roadmap\"\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"streamlit\"\n */\nexport function getLinkDisplayValueFromRegex(\n  displayTextRegex: RegExp,\n  href?: string | null\n): string {\n  if (isNullOrUndefined(href)) {\n    return \"\"\n  }\n\n  try {\n    // apply the regex pattern to display the value\n    const patternMatch = href.match(displayTextRegex)\n    if (patternMatch && patternMatch[1] !== undefined) {\n      // return the first matching group\n      return patternMatch[1]\n    }\n\n    // if the regex doesn't find a match with the url, just use the url as display value\n    return href\n  } catch (error) {\n    // if there was any error return the href\n    return href\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\nexport interface TextColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as TextColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars && cellData.length > parameters.max_chars) {\n      cellData = cellData.slice(0, parameters.max_chars)\n      corrected = true\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-timezone\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  mergeColumnParameters,\n  toSafeDate,\n  getErrorCell,\n  toSafeString,\n  formatMoment,\n} from \"./utils\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-picker-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DatePickerType\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DatePickerType\n    },\n    getCellValue(cell: DatePickerType): string | null {\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if a given arrow type name is an integer type.\n */\nexport function isIntegerType(arrowTypeName: string): boolean {\n  return (\n    (arrowTypeName.startsWith(\"int\") &&\n      !arrowTypeName.startsWith(\"interval\")) ||\n    arrowTypeName === \"range\" ||\n    arrowTypeName.startsWith(\"uint\")\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n  countDecimals,\n  truncateDecimals,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min_value?: number\n  // The maximum allowed value for editing.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // This will also influence the maximum precision. This will impact the number of decimals\n  // allowed to be entered as well as the number of decimals displayed (if format is not specified).\n  // This is set to 1 for integer types.\n  readonly step?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      // Set step to 1 for integer types\n      step: isIntegerType(arrowTypeName) ? 1 : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min_value: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n      // Use duration formatting for timedelta64[ns] type:\n      format: arrowTypeName === \"timedelta64[ns]\" ? \"duration[ns]\" : undefined,\n    } as NumberColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as NumberColumnParams\n\n  const allowNegative =\n    isNullOrUndefined(parameters.min_value) || parameters.min_value < 0\n\n  const fixedDecimals =\n    notNullOrUndefined(parameters.step) && !Number.isNaN(parameters.step)\n      ? countDecimals(parameters.step)\n      : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n  } as NumberCell\n\n  const validateInput = (data?: any): boolean | number => {\n    let cellData: number | null = toSafeNumber(data)\n\n    if (isNullOrUndefined(cellData)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (Number.isNaN(cellData)) {\n      return false\n    }\n\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    // Apply max_value configuration option:\n    if (\n      notNullOrUndefined(parameters.max_value) &&\n      cellData > parameters.max_value\n    ) {\n      cellData = parameters.max_value\n      corrected = true\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(parameters.min_value) &&\n      cellData < parameters.min_value\n    ) {\n      // Only return false, since correcting it negatively impacts\n      // the user experience.\n      return false\n    }\n\n    // TODO(lukasmasuch): validate step size?\n    // if (notNullOrUndefined(parameters.step) && parameters.step !== 1)\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"number\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      let cellData: number | null = toSafeNumber(data)\n      let displayData = \"\"\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Cut decimals:\n        if (notNullOrUndefined(fixedDecimals)) {\n          cellData = truncateDecimals(cellData, fixedDecimals)\n        }\n\n        // Check if the value is larger than the maximum supported value:\n        if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n          )\n        }\n\n        try {\n          displayData = formatNumber(\n            cellData,\n            parameters.format,\n            fixedDecimals\n          )\n        } catch (error) {\n          return getErrorCell(\n            toSafeString(cellData),\n            notNullOrUndefined(parameters.format)\n              ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n              : `Failed to format the number. Error: ${error}`\n          )\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeBoolean,\n} from \"./utils\"\n\nexport interface SelectboxColumnParams {\n  /** A list of options available in the selectbox.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a selectbox. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction SelectboxColumn(props: BaseColumnProps): BaseColumn {\n  // The selectbox column can be either string, number or boolean type\n  // based on the options type.\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as SelectboxColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        // Add empty option if the column is not configured as required:\n        ...(props.isRequired !== true ? [null] : []),\n        ...parameters.options\n          .filter(opt => opt !== null && opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n      readonly: !props.isEditable,\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"selectbox\",\n    sortMode: \"default\",\n    getCell(data?: any, validate?: boolean): GridCell {\n      // Empty string refers to a missing value\n      let cellData = null\n      if (notNullOrUndefined(data) && data !== \"\") {\n        cellData = toSafeString(data)\n      }\n\n      if (validate && !cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === null,\n        copyData: cellData || \"\", // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(cell: DropdownCellType): string | number | boolean | null {\n      if (isNullOrUndefined(cell.data?.value) || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nSelectboxColumn.isEditableType = true\n\nexport default SelectboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeArray,\n  toSafeString,\n  isMissingValueCell,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                typeof x === \"string\" && x.includes(\",\")\n                  ? x.replace(/,/g, \" \")\n                  : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment from \"moment\"\n\nimport {\n  DataFrameCell,\n  Quiver,\n  Type as ArrowType,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  CheckboxColumn,\n  NumberColumn,\n  TextColumn,\n  SelectboxColumn,\n  ListColumn,\n  isErrorCell,\n  DateTimeColumn,\n  TimeColumn,\n  DateColumn,\n  LinkCell,\n  removeLineBreaks,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n      \"decimal\",\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *        Starts with 0 at the first non-index column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  const { dimensions } = data\n  const numIndices = dimensions.headerColumns\n  const numColumns = dimensions.dataColumns\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  const typeName = column.arrowType\n    ? Quiver.getTypeName(column.arrowType)\n    : null\n\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      typeName === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(\n          Quiver.convertToSeconds(\n            arrowCell.content,\n            arrowCell.field?.type?.unit ?? 0\n          )\n        )\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else if (typeName === \"decimal\") {\n    // This is a special case where we want to already prepare a decimal value\n    // to a number string based on the arrow field metadata. This is required\n    // because we don't have access to the required scale in the number column.\n    const decimalStr = isNullOrUndefined(arrowCell.content)\n      ? null\n      : Quiver.format(\n          arrowCell.content,\n          arrowCell.contentType,\n          arrowCell.field\n        )\n    cellTemplate = column.getCell(decimalStr)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as DatePickerType).data?.kind === \"date-picker-cell\"\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as DatePickerType).data,\n            displayDate: displayData,\n          },\n        } as DatePickerType\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as LinkCell).data?.kind === \"link-cell\"\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as LinkCell).data,\n            displayText: displayData,\n          },\n        } as LinkCell\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeString,\n  getErrorCell,\n  getLinkDisplayValueFromRegex,\n} from \"./utils\"\nimport { LinkCell } from \"./cells/LinkCell\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n  // a value to display in the link cell. Can be a regex to parse out a specific substring of the url to be displayed\n  readonly display_text?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  // Determine if the user's provided display text is a regexp pattern or not.\n  let displayTextRegex: RegExp | undefined = undefined\n  if (\n    !isNullOrUndefined(parameters.display_text) &&\n    parameters.display_text.includes(\"(\") &&\n    parameters.display_text.includes(\")\")\n  ) {\n    try {\n      displayTextRegex = new RegExp(parameters.display_text, \"us\")\n    } catch (error) {\n      // The regex is invalid, interpret it as static display text.\n      displayTextRegex = undefined\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"link-cell\",\n      href: \"\",\n      displayText: \"\",\n    },\n    copyData: \"\",\n  } as LinkCell\n\n  const validateInput = (href?: string): boolean => {\n    if (isNullOrUndefined(href)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    const cellHref = toSafeString(href)\n\n    if (parameters.max_chars && cellHref.length > parameters.max_chars) {\n      // value is too long\n      return false\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellHref) === false\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (isNullOrUndefined(data)) {\n        return {\n          ...cellTemplate,\n          data: {\n            ...cellTemplate.data,\n            href: null,\n          },\n          isMissingValue: true,\n        } as LinkCell\n      }\n\n      const href: string = data\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(href), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(href)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(href), \"Invalid input.\")\n        }\n      }\n\n      let displayText = \"\"\n      if (href) {\n        if (displayTextRegex !== undefined) {\n          // Set display value to be the regex extracted portion of the href.\n          displayText = getLinkDisplayValueFromRegex(displayTextRegex, href)\n        } else {\n          // Use user provided display_text unless it's null, undefined, or an empty string.\n          // If it's any of those falsy values, use the href.\n          displayText = parameters.display_text || href\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: {\n          kind: \"link-cell\",\n          href: href,\n          displayText: displayText,\n        },\n        copyData: href,\n        cursor: \"pointer\",\n        isMissingValue: isNullOrUndefined(href),\n      } as LinkCell\n    },\n    getCellValue(cell: LinkCell): string | null {\n      return isNullOrUndefined(cell.data?.href) ? null : cell.data.href\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    readonly: true,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  mergeColumnParameters,\n  formatNumber,\n  toSafeNumber,\n  countDecimals,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  toSafeArray,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n} from \"./utils\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\" | \"area\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n      hideAxis: chart_type === \"line\",\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  // TODO(lukasmasuch): Change this to use `line` chart and introduce\n  // an AreaChartColumn for the `area` chart.\n  return BaseChartColumn(\"line_chart\", props, \"area\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(\"bar_chart\", props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\n// copied from glide's implementation for use with our LinkCell\n// https://github.com/glideapps/glide-data-grid/blob/0ea52f371a5e2aaa8595aceefa40722d35410b1a/packages/core/src/data-grid-overlay-editor/data-grid-overlay-editor-style.tsx\nexport const UriOverlayEditorStyle = styled.div`\n  display: flex;\n\n  flex-grow: 1;\n\n  align-items: center;\n\n  min-height: 21px;\n\n  .gdg-link-area {\n    flex-grow: 1;\n    flex-shrink: 1;\n\n    cursor: pointer;\n\n    margin-right: 8px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n\n    color: var(--gdg-link-color);\n    text-decoration: underline !important;\n    padding-bottom: 3px;\n  }\n`\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SelectionRange, TextCellEntry } from \"@glideapps/glide-data-grid\"\nimport React from \"react\"\nimport { UriOverlayEditorStyle } from \"@streamlit/lib/src/components/widgets/DataFrame/columns/cells/uri-overlay-editor-style\"\n\ninterface Props {\n  readonly uri?: string | null\n  readonly onChange: (ev: React.ChangeEvent<HTMLTextAreaElement>) => void\n  readonly readonly: boolean\n  readonly preview: string\n  readonly validatedSelection?: SelectionRange\n}\n\n// this is essentially just copying the UriOverlayEditor from glide's implementation: https://github.com/glideapps/glide-data-grid/blob/0ea52f371a5e2aaa8595aceefa40722d35410b1a/packages/core/src/data-grid-overlay-editor/private/uri-overlay-editor-style.tsx\n// we use it in LinkCell.tsx which is our custom version of the UriCell.\nconst UriOverlayEditor: React.FunctionComponent<\n  React.PropsWithChildren<Props>\n> = p => {\n  const { uri, onChange, readonly, validatedSelection, preview } = p\n\n  if (!readonly) {\n    return (\n      <TextCellEntry\n        validatedSelection={validatedSelection}\n        highlight={true}\n        autoFocus={true}\n        value={uri ?? \"\"}\n        onChange={onChange}\n      />\n    )\n  }\n\n  return (\n    <UriOverlayEditorStyle>\n      <a\n        data-testid=\"stLinkCell\"\n        className=\"gdg-link-area\"\n        href={uri ?? \"\"}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {preview}\n      </a>\n    </UriOverlayEditorStyle>\n  )\n}\n\nexport default UriOverlayEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\"\n\nimport {\n  CustomCell,\n  CustomRenderer,\n  getMiddleCenterBias,\n  measureTextCached,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\nimport UriOverlayEditor from \"./UriOverlayEditor\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nconst UNDERLINE_OFFSET = 5\n\nexport interface LinkCellProps {\n  readonly kind: \"link-cell\"\n  readonly href?: string | null\n  readonly displayText?: string | null\n}\n\nexport type LinkCell = CustomCell<LinkCellProps>\n\nfunction onClickSelect(\n  e: Parameters<NonNullable<CustomRenderer<LinkCell>[\"onSelect\"]>>[0]\n): string | null | undefined {\n  const canvas = document.createElement(\"canvas\")\n  const ctx = canvas.getContext(\"2d\", { alpha: false })\n  if (ctx === null) return\n\n  const { posX: hoverX, bounds: rect, cell, theme } = e\n  const font = `${theme.baseFontStyle} ${theme.fontFamily}`\n  ctx.font = font\n\n  const { href, displayText } = cell.data\n\n  const rectHoverX = rect.x + hoverX\n\n  const textWidth = ctx.measureText((displayText || href) ?? \"\").width\n  const textStart = rect.x + theme.cellHorizontalPadding\n\n  const isHovered =\n    rectHoverX > textStart && rectHoverX < textStart + textWidth\n\n  if (isHovered) {\n    return href\n  }\n\n  return undefined\n}\n\nexport const linkCellRenderer: CustomRenderer<LinkCell> = {\n  draw: (args, cell) => {\n    const { ctx, rect, theme, hoverX = -100 } = args\n    const { href, displayText } = cell.data\n    if (isNullOrUndefined(href)) return\n\n    const displayValue = displayText || href\n\n    const xPad = theme.cellHorizontalPadding\n\n    const drawX = rect.x + xPad\n\n    const rectHoverX = rect.x + hoverX\n\n    const font = `${theme.baseFontStyle} ${theme.fontFamily}`\n    ctx.font = font\n    const middleCenterBias = getMiddleCenterBias(ctx, font)\n    const drawY = rect.y + rect.height / 2 + middleCenterBias\n\n    const isHovered = rectHoverX > rect.x && rectHoverX < rect.x + rect.width\n\n    if (isHovered) {\n      // draw the underline only when the cell is hovered\n      const metrics = measureTextCached(displayValue, ctx, font)\n\n      ctx.moveTo(drawX, Math.floor(drawY + UNDERLINE_OFFSET) + 0.5)\n      ctx.lineTo(\n        drawX + metrics.width,\n        Math.floor(drawY + UNDERLINE_OFFSET) + 0.5\n      )\n\n      ctx.strokeStyle = theme.linkColor\n      ctx.stroke()\n    }\n\n    ctx.fillStyle = theme.linkColor\n    ctx.fillText(displayValue, drawX, drawY)\n    ctx.closePath()\n\n    return true\n  },\n  isMatch: (c): c is LinkCell =>\n    (c.data as LinkCellProps).kind === \"link-cell\",\n  kind: GridCellKind.Custom,\n  measure: (ctx, cell, theme) => {\n    const { href, displayText } = cell.data\n    if (isNullOrUndefined(href)) return 0\n\n    return (\n      ctx.measureText(displayText || href).width +\n      theme.cellHorizontalPadding * 2\n    )\n  },\n  needsHover: true,\n  needsHoverPosition: true,\n  onSelect: e => {\n    const redirectLink = onClickSelect(e)\n\n    if (!isNullOrUndefined(redirectLink)) {\n      window.open(redirectLink, \"_blank\", \"noopener,noreferrer\")\n    }\n  },\n  onDelete: c => ({\n    ...c,\n    data: {\n      ...c.data,\n      displayText: \"\",\n      href: \"\",\n    },\n  }),\n  provideEditor: () => p => {\n    const { onChange, value, validatedSelection } = p\n    const { href, displayText } = value.data\n    return (\n      <UriOverlayEditor\n        uri={value.data.href}\n        preview={(displayText || href) ?? \"\"}\n        validatedSelection={validatedSelection}\n        readonly={value.readonly === true}\n        onChange={e =>\n          onChange({\n            ...value,\n            copyData: e.target.value,\n            data: {\n              ...value.data,\n              href: e.target.value,\n            },\n          })\n        }\n      />\n    )\n  },\n  onPaste: (toPaste, cellData) => {\n    return toPaste === cellData.href\n      ? undefined\n      : { ...cellData, href: toPaste }\n  },\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ObjectColumn from \"./ObjectColumn\"\nimport TextColumn from \"./TextColumn\"\nimport CheckboxColumn from \"./CheckboxColumn\"\nimport SelectboxColumn from \"./SelectboxColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\nimport LinkColumn from \"./LinkColumn\"\nimport ImageColumn from \"./ImageColumn\"\nimport ProgressColumn from \"./ProgressColumn\"\nimport DateTimeColumn, { DateColumn, TimeColumn } from \"./DateTimeColumn\"\nimport { LineChartColumn, BarChartColumn } from \"./ChartColumn\"\n\nexport { ImageCellEditor } from \"./cells/ImageCellEditor\"\nexport type { LinkCell } from \"./cells/LinkCell\"\n\nimport { ColumnCreator } from \"./utils\"\nimport { linkCellRenderer } from \"./cells/LinkCell\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n *\n * These names must match the column names used in the backend.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    checkbox: CheckboxColumn,\n    selectbox: SelectboxColumn,\n    list: ListColumn,\n    number: NumberColumn,\n    link: LinkColumn,\n    datetime: DateTimeColumn,\n    date: DateColumn,\n    time: TimeColumn,\n    line_chart: LineChartColumn,\n    bar_chart: BarChartColumn,\n    image: ImageColumn,\n    progress: ProgressColumn,\n  })\n)\n\nexport const CustomCells = [linkCellRenderer]\n\nexport {\n  ObjectColumn,\n  TextColumn,\n  CheckboxColumn,\n  SelectboxColumn,\n  ListColumn,\n  NumberColumn,\n  LinkColumn,\n  DateTimeColumn,\n  DateColumn,\n  TimeColumn,\n  LineChartColumn,\n  BarChartColumn,\n  ImageColumn,\n  ProgressColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport merge from \"lodash/merge\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { logWarning, logError } from \"@streamlit/lib/src/util/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the JSON config.\n *\n * @param configJson - the column config JSON from the proto.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(configJson: string): Map<string, any> {\n  if (!configJson) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(configJson)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const columnConfigMapping = React.useMemo(() => {\n    return getColumnConfig(element.columns)\n  }, [element.columns])\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  const columns: BaseColumn[] = React.useMemo(() => {\n    let configuredColumns = getAllColumnsFromArrow(data)\n      .map(column => {\n        // Apply column configurations\n        let updatedColumn = {\n          ...column,\n          ...applyColumnConfig(column, columnConfigMapping),\n          isStretched: stretchColumns,\n        } as BaseColumnProps\n\n        const ColumnType = getColumnType(updatedColumn)\n\n        // Make sure editing is deactivated if the column is read-only, disabled,\n        // or a not editable type.\n        if (\n          element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n          disabled ||\n          ColumnType.isEditableType === false\n        ) {\n          updatedColumn = {\n            ...updatedColumn,\n            isEditable: false,\n          }\n        }\n\n        if (\n          element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n          updatedColumn.isEditable == true\n        ) {\n          // Set editable icon for all editable columns:\n          updatedColumn = {\n            ...updatedColumn,\n            icon: \"editable\",\n          }\n\n          // Make sure that required columns are not hidden when editing mode is dynamic:\n          if (\n            updatedColumn.isRequired &&\n            element.editingMode === ArrowProto.EditingMode.DYNAMIC\n          ) {\n            updatedColumn = {\n              ...updatedColumn,\n              isHidden: false,\n            }\n          }\n        }\n\n        return ColumnType(updatedColumn, theme)\n      })\n      .filter(column => {\n        // Filter out all columns that are hidden\n        return !column.isHidden\n      })\n\n    // Reorder columns based on the user configuration:\n    if (element.columnOrder && element.columnOrder.length > 0) {\n      const orderedColumns: BaseColumn[] = []\n\n      // Add all index columns to the beginning of the list:\n      configuredColumns.forEach(column => {\n        if (column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      // Reorder non-index columns based on the configured column order:\n      element.columnOrder.forEach(columnName => {\n        const column = configuredColumns.find(\n          column => column.name === columnName\n        )\n        if (column && !column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      configuredColumns = orderedColumns\n    }\n\n    // If all columns got filtered out, we add an empty index column\n    // to prevent errors from glide-data-grid.\n    return configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n  }, [\n    data,\n    columnConfigMapping,\n    stretchColumns,\n    disabled,\n    element.editingMode,\n    element.columnOrder,\n    theme,\n  ])\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, isMissingValueCell } from \"./columns\"\nimport { INDEX_IDENTIFIER } from \"./hooks/useColumnLoader\"\n\n/**\n * Get the column name for a given column to use in the widget state.\n * This is either the column name or the index identifier for index columns.\n */\nfunction getColumnName(column: BaseColumn): string {\n  // TODO(lukasmasuch): We need to adapt this once we want to support multi-index columns.\n  return column.isIndex\n    ? INDEX_IDENTIFIER\n    : isNullOrUndefined(column.name)\n    ? \"\"\n    : column.name\n}\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_rows: {} as Record<number, Record<string, any>>,\n      added_rows: [] as Record<string, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // row position -> column name -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        const editedRow: Record<string, any> = {}\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            editedRow[getColumnName(column)] = column.getCellValue(cell)\n          }\n        })\n        currentState.edited_rows[rowIndex] = editedRow\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column name -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<string, any> = {}\n      // This flags is used to check if the row is incomplete\n      // (i.e. missing required values) and should therefore not be included in\n      // the current state version.\n      let isIncomplete = false\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            // If the cell is missing a required value, the row is incomplete\n            isIncomplete = true\n          }\n\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[getColumnName(column)] = cellValue\n          }\n        }\n      })\n      if (!isIncomplete) {\n        currentState.added_rows.push(addedRow)\n      }\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (_k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    // Clear existing state:\n    this.editedCells = new Map()\n    this.addedRows = []\n    this.deletedRows = []\n\n    // Parse JSON editing string:\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Map column name to columns\n    const columnsByName = new Map<string, BaseColumn>()\n    columns.forEach(column => {\n      columnsByName.set(getColumnName(column), column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_rows).forEach(key => {\n      const rowIndex = Number(key)\n      const editedRow = editingState.edited_rows[key]\n      Object.keys(editedRow).forEach((colName: string) => {\n        const cellValue = editedRow[colName]\n        const column = columnsByName.get(colName)\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            if (!this.editedCells.has(rowIndex)) {\n              this.editedCells.set(rowIndex, new Map())\n            }\n            this.editedCells.get(rowIndex)?.set(column.indexNumber, cell)\n          }\n        }\n      })\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<string, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colName => {\n        const cellValue = row[colName]\n\n        const column = columnsByName.get(colName)\n\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            addedRow.set(column.indexNumber, cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme, SpriteMap } from \"@glideapps/glide-data-grid\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\ntype CustomThemeReturn = {\n  theme: Partial<GlideTheme>\n  tableBorderRadius: string\n  headerIcons: SpriteMap\n}\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): CustomThemeReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const headerIcons = React.useMemo<SpriteMap>(() => {\n    return {\n      // Material design icon `edit_note`:\n      // https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Aedit_note%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048\n      // We need to provide this as string as explained explained here: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#headericons\n      editable: p =>\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40\" viewBox=\"0 96 960 960\" width=\"40\" fill=\"${p.bgColor}\"><path d=\"m800.641 679.743-64.384-64.384 29-29q7.156-6.948 17.642-6.948 10.485 0 17.742 6.948l29 29q6.948 7.464 6.948 17.95 0 10.486-6.948 17.434l-29 29Zm-310.64 246.256v-64.383l210.82-210.821 64.384 64.384-210.821 210.82h-64.383Zm-360-204.872v-50.254h289.743v50.254H130.001Zm0-162.564v-50.255h454.615v50.255H130.001Zm0-162.307v-50.255h454.615v50.255H130.001Z\"/></svg>`,\n    }\n  }, [])\n\n  const glideTheme = React.useMemo<Partial<GlideTheme>>(() => {\n    return {\n      // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n      accentColor: theme.colors.primary,\n      accentFg: theme.colors.white,\n      accentLight: transparentize(theme.colors.primary, 0.9),\n      borderColor: theme.colors.fadedText05,\n      horizontalBorderColor: theme.colors.fadedText05,\n      fontFamily: theme.genericFonts.bodyFont,\n      bgSearchResult: transparentize(theme.colors.primary, 0.9),\n      resizeIndicatorColor: theme.colors.primary,\n      // Header styling:\n      bgIconHeader: theme.colors.fadedText60,\n      fgIconHeader: theme.colors.white,\n      bgHeader: theme.colors.bgMix,\n      bgHeaderHasFocus: theme.colors.secondaryBg,\n      bgHeaderHovered: theme.colors.secondaryBg,\n      textHeader: theme.colors.fadedText60,\n      textHeaderSelected: theme.colors.white,\n      textGroupHeader: theme.colors.fadedText60,\n      headerFontStyle: `${theme.fontSizes.sm}`,\n      // Cell styling:\n      baseFontStyle: theme.fontSizes.sm,\n      editorFontSize: theme.fontSizes.sm,\n      textDark: theme.colors.bodyText,\n      textMedium: transparentize(theme.colors.bodyText, 0.2),\n      textLight: theme.colors.fadedText40,\n      textBubble: theme.colors.fadedText60,\n      bgCell: theme.colors.bgColor,\n      bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n      cellHorizontalPadding: 8,\n      cellVerticalPadding: 3,\n      // Special cells:\n      bgBubble: theme.colors.secondaryBg,\n      bgBubbleSelected: theme.colors.secondaryBg,\n      linkColor: theme.colors.linkText,\n      drilldownBorder: theme.colors.darkenedBgMix25,\n      // Unused settings:\n      // lineHeight\n      // headerIconSize: number;\n      // markerFontStyle: string;\n      // resizeIndicatorColor?: string;\n      // headerBottomBorderColor?: string;\n    }\n  }, [theme])\n\n  return {\n    theme: glideTheme,\n    tableBorderRadius: theme.radii.lg,\n    // Configure custom SVG icons used in the column header:\n    headerIcons,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridCell, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\n\nimport { getCellFromArrow } from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || editingState.current.isAddedRow(originalRow)) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (editedCell !== undefined) {\n          return editedCell\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        logError(error)\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = React.useMemo(() => {\n    return updateSortingHeader(columns, sort)\n  }, [columns, sort])\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  toSafeString,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\n\n// Delimiter between cells\nconst CSV_DELIMITER = \",\"\n// Quote character for cell values containing special characters\nconst CSV_QUOTE_CHAR = '\"'\n// The character used to escape the quote character within a cell\nconst CSV_ESCAPE_CHAR = '\"'\n// Delimiter between rows (newline)\nconst CSV_ROW_DELIMITER = \"\\n\"\n// Used to indicate Unicode encoding of a text file (for excel compatibility)\nconst CSV_UTF8_BOM = \"\\ufeff\"\n// Regex to check if a value contains special characters that need to be escaped\nconst CSV_SPECIAL_CHARS_REGEX = new RegExp(\n  `[${[CSV_DELIMITER, CSV_QUOTE_CHAR, CSV_ROW_DELIMITER].join(\"\")}]`\n)\n\nexport function toCsvRow(rowValues: any[]): string {\n  return (\n    rowValues.map(cell => escapeValue(cell)).join(CSV_DELIMITER) +\n    CSV_ROW_DELIMITER\n  )\n}\n\n/**\n * Escapes a cell value for CSV export.\n *\n * Makes sure that the value is a string, and special characters are escaped correctly.\n */\nfunction escapeValue(value: any): string {\n  if (isNullOrUndefined(value)) {\n    return \"\"\n  }\n  const strValue = toSafeString(value)\n\n  // Special chars need to be escaped:\n  if (CSV_SPECIAL_CHARS_REGEX.test(strValue)) {\n    // Add quotes around the value:\n    return `${CSV_QUOTE_CHAR}${strValue.replace(\n      // Escape all quote chars if inside a quoted string:\n      new RegExp(CSV_QUOTE_CHAR, \"g\"),\n      CSV_ESCAPE_CHAR + CSV_QUOTE_CHAR\n    )}${CSV_QUOTE_CHAR}`\n  }\n\n  return strValue\n}\n\ntype DataExporterReturn = {\n  // A callback to trigger the data download as CSV\n  exportToCsv: () => void\n}\n\n/**\n * Custom hook that handles all the data export/download logic.\n *\n * @param getCellContent - The cell content getter compatible with glide-data-grid.\n * @param columns - The columns of the table.\n * @param numRows - The number of rows of the current state.\n *\n * @returns a callback to trigger the data download as CSV.\n */\nfunction useDataExporter(\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number\n): DataExporterReturn {\n  const exportToCsv = React.useCallback(async () => {\n    try {\n      // Lazy import to prevent weird breakage in some niche cases\n      // (e.g. usage within the replay.io browser). The package works well\n      // in all of the common browser, but might cause some trouble in\n      // less common browsers. To not crash the whole app, we just lazy import\n      // this here.\n      const nativeFileSystemAdapter = await import(\n        \"native-file-system-adapter\"\n      )\n\n      const timestamp = new Date().toISOString().slice(0, 16).replace(\":\", \"-\")\n      const suggestedName = `${timestamp}_export.csv`\n\n      const fileHandle = await nativeFileSystemAdapter.showSaveFilePicker({\n        suggestedName,\n        types: [{ accept: { \"text/csv\": [\".csv\"] } }],\n        excludeAcceptAllOption: false,\n      })\n\n      const textEncoder = new TextEncoder()\n      const writer = await fileHandle.createWritable()\n\n      // Write UTF-8 BOM for excel compatibility:\n      await writer.write(textEncoder.encode(CSV_UTF8_BOM))\n\n      // Write headers:\n      const headers: string[] = columns.map(column => column.name)\n      await writer.write(textEncoder.encode(toCsvRow(headers)))\n\n      for (let row = 0; row < numRows; row++) {\n        const rowData: any[] = []\n        columns.forEach((column: BaseColumn, col: number, _map) => {\n          rowData.push(column.getCellValue(getCellContent([col, row])))\n        })\n        // Write row to CSV:\n        await writer.write(textEncoder.encode(toCsvRow(rowData)))\n      }\n\n      await writer.close()\n    } catch (error) {\n      logWarning(\"Failed to export data as CSV\", error)\n    }\n  }, [columns, numRows, getCellContent])\n\n  return {\n    exportToCsv,\n  }\n}\n\nexport default useDataExporter\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  EditableGridCell,\n  GridCell,\n  DataEditorProps,\n  GridSelection,\n  Item,\n  ValidatedGridCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\" | \"validateCell\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param applyEdits - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  applyEdits: (clearSelection?: boolean, triggerRerun?: boolean) => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      if (!column.isEditable) {\n        return\n      }\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue, true)\n      // Only update the cell if the new cell is not causing any errors:\n      if (!isErrorCell(newCell)) {\n        editingState.current.setCell(originalCol, originalRow, {\n          ...newCell,\n          lastUpdated: performance.now(),\n        })\n\n        applyEdits()\n      } else {\n        logWarning(\n          `Not applying the cell edit since it causes this error:\\n ${newCell.data}`\n        )\n      }\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, applyEdits]\n  )\n\n  /**\n   * Appends a new empty row to the end of the table.\n   */\n  const appendEmptyRow = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      // For the default value, we trust the developer to make a valid choice,\n      // so we do not validate the value here.\n      newRow.set(column.indexNumber, column.getCell(column.defaultValue))\n    })\n    editingState.current.addRow(newRow)\n  }, [columns, editingState, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user adds a new row in the table UI.\n   */\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    appendEmptyRow()\n    applyEdits()\n  }, [appendEmptyRow, applyEdits, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user deletes a row or cell value in the table UI.\n   */\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        applyEdits(true)\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            // Only allow deletion if the column is editable and not configured as required\n            if (column.isEditable && !column.isRequired) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      applyEdits,\n      onCellEdited,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid when the user pastes data into the table.\n   */\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          appendEmptyRow()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue, true)\n\n            // We are not editing cells if the pasted value leads to an error:\n            if (notNullOrUndefined(newCell) && !isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      appendEmptyRow,\n      applyEdits,\n      refreshCells,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid to validate the data inputted into a cell by the user.\n   */\n  const validateCell = React.useCallback(\n    (cell: Item, newValue: EditableGridCell) => {\n      const col = cell[0]\n      if (col >= columns.length) {\n        // This should never happen.\n        // But we return true (default) to avoid any unknown issues.\n        return true\n      }\n\n      const column = columns[col]\n      if (column.validateInput) {\n        // We get the actual raw value of the new cell and\n        // validate it based on the column validateInput implementation:\n        const validationResult = column.validateInput(\n          column.getCellValue(newValue)\n        )\n        if (validationResult === true || validationResult === false) {\n          // Only return if the validation result is a valid boolean value (true or false)\n          // validationResult can also be other values, so we need to check this specifically.\n          return validationResult\n        }\n        // If it is any other value, we return it as a corrected cell:\n        return column.getCell(validationResult) as ValidatedGridCell\n      }\n      // If no validation is implemented, we accept the value:\n      return true\n    },\n    [columns]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n    validateCell,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridCell,\n  DataEditorProps,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  hasTooltip,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Debounce time for triggering the tooltip on hover.\nexport const DEBOUNCE_TIME_MS = 600\n// Tooltip message for required cells that are empty.\nexport const REQUIRED_CELL_TOOLTIP = \"⚠️ Please fill out this cell.\"\n\nexport type TooltipsReturn = {\n  // The tooltip to show (if any):\n  tooltip: { content: string; left: number; top: number } | undefined\n  // A callback to clear the tooltip:\n  clearTooltip: () => void\n  // The glide-data-grid function that is called when a cell is hovered:\n} & Pick<DataEditorProps, \"onItemHovered\">\n\n/**\n * Hook that can show a tooltip when hovering over a cell or header if configured.\n *\n * The tooltip is shown after a delay, and is cleared when the user clicks outside,\n * fires escape, or moves outside of the target cell.\n *\n * @param columns columns of the datagrid\n * @param getCellContent function that returns the cell content for a given cell position\n * @returns the tooltip to show (if any), a callback to clear the tooltip, and the\n * onItemHovered callback to pass to the datagrid\n */\nfunction useTooltips(\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): TooltipsReturn {\n  const [tooltip, setTooltip] = React.useState<\n    { content: string; left: number; top: number } | undefined\n  >()\n  const timeoutRef = React.useRef<any>(null)\n\n  const onItemHovered = React.useCallback(\n    (args: GridMouseEventArgs) => {\n      // Always reset the tooltips on any change here\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = 0\n      setTooltip(undefined)\n\n      if ((args.kind === \"header\" || args.kind === \"cell\") && args.location) {\n        const colIdx = args.location[0]\n        const rowIdx = args.location[1]\n        let tooltipContent: string | undefined\n\n        if (colIdx < 0 || colIdx >= columns.length) {\n          // Ignore negative column index (Row index column)\n          // and column index that is out of bounds\n          return\n        }\n\n        const column = columns[colIdx]\n\n        if (args.kind === \"header\" && notNullOrUndefined(column)) {\n          tooltipContent = column.help\n        } else if (args.kind === \"cell\") {\n          // TODO(lukasmasuch): Ignore the last row if num_rows=dynamic (trailing row).\n\n          const cell = getCellContent([colIdx, rowIdx])\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            tooltipContent = REQUIRED_CELL_TOOLTIP\n          } else if (hasTooltip(cell)) {\n            tooltipContent = cell.tooltip\n          }\n        }\n\n        if (tooltipContent) {\n          timeoutRef.current = setTimeout(() => {\n            if (tooltipContent) {\n              setTooltip({\n                content: tooltipContent,\n                left: args.bounds.x + args.bounds.width / 2,\n                top: args.bounds.y,\n              })\n            }\n          }, DEBOUNCE_TIME_MS)\n        }\n      }\n    },\n    [columns, getCellContent, setTooltip, timeoutRef]\n  )\n\n  const clearTooltip = React.useCallback(() => {\n    setTooltip(undefined)\n  }, [setTooltip])\n\n  return {\n    tooltip,\n    clearTooltip,\n    onItemHovered,\n  }\n}\n\nexport default useTooltips\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  DrawCellCallback,\n  Rectangle,\n  Theme as GlideTheme,\n  drawTextCell,\n  BaseDrawArgs,\n} from \"@glideapps/glide-data-grid\"\nimport {\n  SparklineCell,\n  DropdownCell,\n  RangeCell,\n  DatePickerCell,\n} from \"@glideapps/glide-data-grid-cells\"\n\nimport {\n  BaseColumn,\n  CustomCells,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n\n/**\n * Draw a red indicator in the top right corner of the cell\n * to indicate that the cell is required.\n */\nexport function drawRequiredIndicator(\n  ctx: CanvasRenderingContext2D,\n  rect: Rectangle,\n  theme: GlideTheme\n): void {\n  ctx.save()\n  ctx.beginPath()\n  // We are first moving the drawing position under the top right corner\n  // 8 pixels from left side (this is the size triangle)\n  // and 1 pixel from top side (to be under the cell border).\n  ctx.moveTo(rect.x + rect.width - 8, rect.y + 1)\n  // We draw the first line to the top right corner.\n  ctx.lineTo(rect.x + rect.width, rect.y + 1)\n  // We draw the second line 8 pixel down on the right cell border\n  ctx.lineTo(rect.x + rect.width, rect.y + 1 + 8)\n  // And now its enough to just fill it with a color to get a triangle.\n  ctx.fillStyle = theme.accentColor\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n */\nexport const drawMissingPlaceholder = (args: BaseDrawArgs): void => {\n  const { cell, theme, ctx } = args\n  drawTextCell(\n    {\n      ...args,\n      theme: {\n        ...theme,\n        textDark: theme.textLight,\n        headerFontFull: `${theme.headerFontStyle} ${theme.fontFamily}`,\n        baseFontFull: `${theme.baseFontStyle} ${theme.fontFamily}`,\n        markerFontFull: `${theme.markerFontStyle} ${theme.fontFamily}`,\n      },\n      // The following props are just added for technical reasons:\n      // @ts-expect-error\n      spriteManager: {},\n      hyperWrapping: false,\n    },\n    NULL_VALUE_TOKEN,\n    cell.contentAlign\n  )\n  // Reset fill style to the original one\n  ctx.fillStyle = theme.textDark\n}\n\n/**\n * Create return type for useCustomRenderer hook based on the DataEditorProps.\n */\ntype CustomRendererReturn = Pick<\n  DataEditorProps,\n  \"drawCell\" | \"customRenderers\"\n>\n\n/**\n * Custom hook that creates some custom cell renderers compatible with glide-data-grid.\n *\n * This includes capabilities like showing a faded placeholder for missing values or\n * a red indicator for required cells.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `drawCell`: A function that overwrites some rendering that can be\n *    passed to the `DataEditor` component.\n * - `customRenderers`: A map of custom cell renderers used by custom cells\n *    that can be passed to the `DataEditor` component.\n */\nfunction useCustomRenderer(columns: BaseColumn[]): CustomRendererReturn {\n  const drawCell: DrawCellCallback = React.useCallback(\n    (args, draw) => {\n      const { cell, theme, ctx, rect } = args\n      const colPos = args.col\n      if (isMissingValueCell(cell) && colPos < columns.length) {\n        const column = columns[colPos]\n\n        // We explicitly ignore some cell types here (e.g. checkbox, progress...) since\n        // they are taking care of rendering their missing value state themselves (usually as empty cell).\n        // All other cell types are rendered with a placeholder symbol and a faded text color via drawMissingPlaceholder.\n        if (\n          [\"checkbox\", \"line_chart\", \"bar_chart\", \"progress\"].includes(\n            column.kind\n          )\n        ) {\n          draw()\n        } else {\n          drawMissingPlaceholder(args as BaseDrawArgs)\n        }\n\n        if (column.isRequired && column.isEditable) {\n          // If the cell value is missing, and it is configured as required & editable,\n          // we draw a red indicator in the top right corner of the cell.\n          drawRequiredIndicator(ctx, rect, theme)\n        }\n        return\n      }\n      draw()\n    },\n    [columns]\n  )\n\n  // Load extra cell renderers from the glide-data-grid-cells package:\n  const customRenderers = React.useMemo(\n    () =>\n      [\n        SparklineCell,\n        DropdownCell,\n        RangeCell,\n        DatePickerCell,\n        ...CustomCells,\n      ] as DataEditorProps[\"customRenderers\"],\n    // This doesn't change during the lifetime of the component,\n    // so we can just run it once at creation time.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  return {\n    drawCell,\n    customRenderers,\n  }\n}\n\nexport default useCustomRenderer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  const sizedColumns = React.useMemo(() => {\n    return columns.map(column => {\n      if (\n        column.id &&\n        columnSizes.has(column.id) &&\n        columnSizes.get(column.id) !== undefined\n      ) {\n        return {\n          ...column,\n          width: columnSizes.get(column.id),\n          // Deactivate grow whenever a column gets manually resized\n          grow: 0,\n        } as GridColumn\n      }\n      return column\n    })\n  }, [columns, columnSizes])\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\n// Min column width used for manual and automatic resizing\nexport const MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nexport const MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nexport const MAX_COLUMN_AUTO_WIDTH = 500\n// The border size in pixels (2)\n// to prevent overlap problem with selection ring.\nexport const BORDER_THRESHOLD = 2\n// The default row height in pixels\nexport const ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + borders\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + BORDER_THRESHOLD\n// Min height for the resizable table container:\n// Based on header + one column, and border threshold\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + BORDER_THRESHOLD\n// The default maximum height of the table:\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  return Math.max(numRows * ROW_HEIGHT + BORDER_THRESHOLD, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { ImageEditorType } from \"@glideapps/glide-data-grid\"\nimport styled from \"@emotion/styled\"\n\nconst StyledImage = styled.img(() => ({\n  maxWidth: \"100%\",\n  maxHeight: \"600px\",\n  objectFit: \"scale-down\",\n}))\n\nexport const ImageCellEditor: ImageEditorType = ({ urls }) => {\n  const imageData = urls && urls.length > 0 ? urls[0] : \"\"\n  // Allow external image links to be opened in a new tab on click\n  if (imageData.startsWith(\"http\")) {\n    return (\n      <a href={imageData} target=\"_blank\" rel=\"noreferrer noopener\">\n        <StyledImage src={imageData}></StyledImage>\n      </a>\n    )\n  }\n\n  return <StyledImage src={imageData}></StyledImage>\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Popover, PLACEMENT, ACCESSIBILITY_TYPE } from \"baseui/popover\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown/StreamlitMarkdown\"\nimport { StyledTooltipContentWrapper } from \"@streamlit/lib/src/components/shared/Tooltip/styled-components\"\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface TooltipProps {\n  // The top position of the tooltip.\n  top: number\n  // The left position of the tooltip.\n  left: number\n  // The markdown content of the tooltip.\n  content: string\n  // Callback from useTooltips hook to clear the tooltip\n  clearTooltip: () => void\n}\n\n/**\n * A tooltip that can be positioned anywhere on the screen.\n *\n * This is mostly the same as the shared tooltip implementation, but\n * we cannot use that one since it is a StatefulTooltip and requires\n * a target component and cannot be triggered programmatically.\n * We need to be able to position the tooltip anywhere on the screen, so we use a Popover\n * instead. Since Popover doesn't support positioning to a virtual position,\n * we are using an invisible div as a workaround.\n *\n * @param top The top position of the tooltip.\n * @param left The left position of the tooltip.\n * @param content The markdown content of the tooltip.\n * @returns The tooltip react element.\n */\nfunction Tooltip({\n  top,\n  left,\n  content,\n  clearTooltip,\n}: TooltipProps): ReactElement {\n  const [open, setOpen] = React.useState(true)\n  const theme: EmotionTheme = useTheme()\n  const { colors, fontSizes, radii } = theme\n\n  const closeTooltip = React.useCallback((): void => {\n    setOpen(false)\n    clearTooltip()\n  }, [clearTooltip, setOpen])\n\n  return (\n    <Popover\n      content={\n        <StyledTooltipContentWrapper className=\"stTooltipContent\">\n          <StreamlitMarkdown\n            style={{ fontSize: fontSizes.sm }}\n            source={content}\n            allowHTML={false}\n          />\n        </StyledTooltipContentWrapper>\n      }\n      placement={PLACEMENT.top}\n      accessibilityType={ACCESSIBILITY_TYPE.tooltip}\n      showArrow={false}\n      popoverMargin={5}\n      onClickOutside={closeTooltip}\n      onEsc={closeTooltip}\n      overrides={{\n        Body: {\n          style: {\n            // This is annoying, but a bunch of warnings get logged when the\n            // shorthand version `borderRadius` is used here since the long\n            // names are used by BaseWeb and mixing the two is apparently\n            // bad :(\n            borderTopLeftRadius: radii.md,\n            borderTopRightRadius: radii.md,\n            borderBottomLeftRadius: radii.md,\n            borderBottomRightRadius: radii.md,\n\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n\n            backgroundColor: \"transparent\",\n          },\n        },\n        Inner: {\n          style: {\n            backgroundColor: hasLightBackgroundColor(theme)\n              ? colors.bgColor\n              : colors.secondaryBg,\n            color: colors.bodyText,\n            fontSize: fontSizes.sm,\n            fontWeight: \"normal\",\n            // See the long comment about `borderRadius`. The same applies here\n            // to `padding`.\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n          },\n        },\n      }}\n      isOpen={open}\n    >\n      <div\n        className=\"stTooltipTarget\"\n        data-testid=\"stTooltipTarget\"\n        style={{\n          // This is an invisible div that's used to position the tooltip.\n          // The position is provided from outside via the `top` and `left` properties.\n          // This a workaround for the fact that BaseWeb's Popover  doesn't support\n          // positioning to a virtual position and always requires a target\n          // component for positioning.\n          position: \"fixed\",\n          top,\n          left,\n        }}\n      ></div>\n    </Popover>\n  )\n}\n\nexport default Tooltip\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledResizableContainerProps {\n  hasCustomizedScrollbars: boolean\n}\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer =\n  styled.div<StyledResizableContainerProps>(\n    ({ hasCustomizedScrollbars, theme }) => ({\n      position: \"relative\",\n      display: \"inline-block\",\n\n      \"& .glideDataEditor\": {\n        height: \"100%\",\n        minWidth: \"100%\",\n        borderRadius: theme.radii.lg,\n      },\n\n      \"& .dvn-scroller\": {\n        // We only want to configure scrollbar aspects for browsers that\n        // don't support custom scrollbars (e.g. Firefox). Also, applying this\n        // in Chrome causes the scrollbar to change to the default scrollbar style.\n        ...(!hasCustomizedScrollbars && { scrollbarWidth: \"thin\" }),\n        [\"overflowX\" as any]: \"auto !important\",\n        [\"overflowY\" as any]: \"auto !important\",\n      },\n    })\n  )\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  GridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\nimport {\n  Delete,\n  Add,\n  FileDownload,\n  Search,\n} from \"@emotion-icons/material-outlined\"\n\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\n\nimport EditingState from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n  useTooltips,\n  useCustomRenderer,\n  useDataExporter,\n} from \"./hooks\"\nimport {\n  BORDER_THRESHOLD,\n  MIN_COLUMN_WIDTH,\n  MAX_COLUMN_WIDTH,\n  MAX_COLUMN_AUTO_WIDTH,\n  ROW_HEIGHT,\n} from \"./hooks/useTableSizer\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  getTextCell,\n  ImageCellEditor,\n} from \"./columns\"\nimport Tooltip from \"./Tooltip\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\nimport \"@glideapps/glide-data-grid-cells/dist/index.css\"\n\n// Debounce time for triggering a widget state update\n// This prevents to rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 100\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n// The size in px of the customized webkit scrollbar (defined in globalStyles)\nconst WEBKIT_SCROLLBAR_SIZE = 6\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n  expand?: () => void\n  collapse?: () => void\n  disableFullscreenMode?: boolean\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n  disableFullscreenMode,\n  expand,\n  collapse,\n}: DataFrameProps): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n  const resizableContainerRef = React.useRef<HTMLDivElement>(null)\n\n  const { theme, headerIcons, tableBorderRadius } = useCustomTheme()\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n  const [showSearch, setShowSearch] = React.useState(false)\n  const [hasVerticalScroll, setHasVerticalScroll] =\n    React.useState<boolean>(false)\n  const [hasHorizontalScroll, setHasHorizontalScroll] =\n    React.useState<boolean>(false)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  // Determine if it uses customized scrollbars (webkit browsers):\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar#css.selectors.-webkit-scrollbar\n  const hasCustomizedScrollbars = React.useMemo<boolean>(\n    () =>\n      (window.navigator.userAgent.includes(\"Mac OS\") &&\n        window.navigator.userAgent.includes(\"Safari\")) ||\n      window.navigator.userAgent.includes(\"Chrome\"),\n    []\n  )\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  // This callback is used to clear all selections (row/column/cell)\n  const clearSelection = React.useCallback(() => {\n    setGridSelection({\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: undefined,\n    })\n  }, [])\n\n  // This callback is used to clear only cell selections\n  const clearCellSelection = React.useCallback(() => {\n    setGridSelection({\n      columns: gridSelection.columns,\n      rows: gridSelection.rows,\n      current: undefined,\n    })\n  }, [gridSelection])\n\n  // This callback is used to refresh the rendering of selected cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: [number, number]\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  // On the first rendering, try to load initial widget state if\n  // it exist. This is required in the case that other elements\n  // are inserted before this widget.\n  React.useEffect(\n    () => {\n      if (element.editingMode !== READ_ONLY) {\n        const initialWidgetValue = widgetMgr.getStringValue(element)\n        if (initialWidgetValue) {\n          editingState.current.fromJson(initialWidgetValue, originalColumns)\n          setNumRows(editingState.current.getNumRows())\n        }\n      }\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback should be called after any edits have been applied to the data.\n   * It will finish up the editing by updating the number of rows, clearing the selection,\n   * and triggering a rerun of the script.\n   *\n   * @param clearSelections - Whether to clear the selection. This is usually done after deleting rows.\n   * @param triggerRerun - Whether to trigger a rerun of the script after applying edits\n   */\n  const applyEdits = React.useCallback(\n    (clearSelections = false, triggerRerun = true) => {\n      if (numRows !== editingState.current.getNumRows()) {\n        // Reset the number of rows if it has been changed in the editing state\n        setNumRows(editingState.current.getNumRows())\n      }\n\n      if (clearSelections) {\n        clearSelection()\n      }\n\n      // Use debounce to prevent rapid updates to the widget state.\n      debounce(DEBOUNCE_TIME_MS, () => {\n        const currentEditingState = editingState.current.toJson(columns)\n        let currentWidgetState = widgetMgr.getStringValue(\n          element as WidgetInfo\n        )\n\n        if (currentWidgetState === undefined) {\n          // Create an empty widget state\n          currentWidgetState = new EditingState(0).toJson([])\n        }\n\n        // Only update if there is actually a difference between editing and widget state\n        if (currentEditingState !== currentWidgetState) {\n          widgetMgr.setStringValue(\n            element as WidgetInfo,\n            currentEditingState,\n            {\n              fromUi: triggerRerun,\n            }\n          )\n        }\n      })()\n    },\n    [widgetMgr, element, numRows, clearSelection, columns]\n  )\n\n  const { exportToCsv } = useDataExporter(getCellContent, columns, numRows)\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      applyEdits\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(columns)\n\n  const transformedColumns = React.useMemo(\n    () => columns.map(column => toGlideColumn(column)),\n    [columns]\n  )\n  const { columns: glideColumns, onColumnResize } =\n    useColumnSizer(transformedColumns)\n\n  const {\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetEditingState\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, resetEditingState, widgetMgr])\n\n  const isDynamicAndEditable =\n    !isEmptyTable && element.editingMode === DYNAMIC && !disabled\n  const isRowSelected = gridSelection.rows.length > 0\n  const isCellSelected = gridSelection.current !== undefined\n\n  const freezeColumns = isEmptyTable\n    ? 0\n    : columns.filter((col: BaseColumn) => col.isIndex).length\n\n  // Determine if the table requires horizontal or vertical scrolling:\n  React.useEffect(() => {\n    // The setTimeout is a workaround to get the scroll area bounding box\n    // after the grid has been rendered. Otherwise, the scroll area div\n    // (dvn-stack) might not have been created yet.\n    setTimeout(() => {\n      if (resizableContainerRef.current && dataEditorRef.current) {\n        // Get the bounds of the glide-data-grid scroll area (dvn-stack):\n        const scrollAreaBounds = resizableContainerRef.current\n          ?.querySelector(\".dvn-stack\")\n          ?.getBoundingClientRect()\n\n        // We might also be able to use the following as an alternative,\n        // but it seems to cause \"Maximum update depth exceeded\" when scrollbars\n        // are activated or deactivated.\n        // const scrollAreaBounds = dataEditorRef.current?.getBounds()\n        // Also see: https://github.com/glideapps/glide-data-grid/issues/784\n\n        if (scrollAreaBounds) {\n          setHasVerticalScroll(\n            scrollAreaBounds.height >\n              resizableContainerRef.current.clientHeight\n          )\n          setHasHorizontalScroll(\n            scrollAreaBounds.width > resizableContainerRef.current.clientWidth\n          )\n        }\n      }\n    }, 1)\n  }, [resizableSize, numRows, glideColumns])\n\n  React.useEffect(() => {\n    // Clear cell selections if fullscreen mode changes\n    clearCellSelection()\n  }, [isFullScreen])\n\n  return (\n    <StyledResizableContainer\n      data-testid=\"stDataFrame\"\n      className=\"stDataFrame\"\n      hasCustomizedScrollbars={hasCustomizedScrollbars}\n      ref={resizableContainerRef}\n      onMouseDown={e => {\n        if (resizableContainerRef.current && hasCustomizedScrollbars) {\n          // Prevent clicks on the scrollbar handle to propagate to the grid:\n          const boundingClient =\n            resizableContainerRef.current.getBoundingClientRect()\n\n          if (\n            // For whatever reason, we are still able to use the scrollbars even\n            // if the mouse is one pixel outside of the scrollbar. Therefore, we add\n            // an additional pixel.\n            hasHorizontalScroll &&\n            boundingClient.height - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientY - boundingClient.top\n          ) {\n            e.stopPropagation()\n          }\n          if (\n            hasVerticalScroll &&\n            boundingClient.width - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientX - boundingClient.left\n          ) {\n            e.stopPropagation()\n          }\n        }\n      }}\n      onBlur={event => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        // We also don't want to clear the selection if the user clicks on\n        // on the toolbar by checking that relatedTarget is not a children of\n        // this element. Unfortunately, this check isn't working reliably in Safari.\n        if (\n          !isFocused &&\n          !isTouchDevice &&\n          !event.currentTarget.contains(\n            event.relatedTarget as HTMLElement | null\n          )\n        ) {\n          clearCellSelection()\n        }\n      }}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        // Lock the toolbar in some specific situations:\n        locked={\n          isRowSelected || isCellSelected || (isTouchDevice && isFocused)\n        }\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledResizableContainer}\n      >\n        {isDynamicAndEditable && isRowSelected && (\n          <ToolbarAction\n            label={\"Delete row(s)\"}\n            icon={Delete}\n            onClick={() => {\n              if (onDelete) {\n                onDelete(gridSelection)\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {isDynamicAndEditable && !isRowSelected && (\n          <ToolbarAction\n            label={\"Add row\"}\n            icon={Add}\n            onClick={() => {\n              if (onRowAppended) {\n                setIsFocused(true)\n                onRowAppended()\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {!isLargeTable && !isEmptyTable && (\n          <ToolbarAction\n            label={\"Download as CSV\"}\n            icon={FileDownload}\n            onClick={() => exportToCsv()}\n          />\n        )}\n        {!isEmptyTable && (\n          <ToolbarAction\n            label={\"Search\"}\n            icon={Search}\n            onClick={() => {\n              if (!showSearch) {\n                setIsFocused(true)\n                setShowSearch(true)\n              } else {\n                setShowSearch(false)\n              }\n              clearTooltip()\n            }}\n          />\n        )}\n      </Toolbar>\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, ROW_HEIGHT]}\n        snapGap={ROW_HEIGHT / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add additional pixels if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height ===\n                BORDER_THRESHOLD\n                  ? resizableRef.current.size.height + BORDER_THRESHOLD\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={ROW_HEIGHT}\n          headerHeight={ROW_HEIGHT}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={isTouchDevice ? undefined : onColumnResize}\n          // Configure resize indicator to only show on the header:\n          resizeIndicator={\"header\"}\n          // Freeze all index columns:\n          freezeColumns={freezeColumns}\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={true}\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={isTouchDevice ? \"cell\" : \"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate keybindings:\n          keybindings={{ downFill: true }}\n          // Search needs to be activated manually, to support search\n          // via the toolbar:\n          onKeyDown={event => {\n            if ((event.ctrlKey || event.metaKey) && event.key === \"f\") {\n              setShowSearch(cv => !cv)\n              event.stopPropagation()\n              event.preventDefault()\n            }\n          }}\n          showSearch={showSearch}\n          onSearchClose={() => {\n            setShowSearch(false)\n            clearTooltip()\n          }}\n          // Header click is used for column sorting:\n          onHeaderClicked={\n            // Deactivate sorting for empty state and for large dataframes:\n            isEmptyTable || isLargeTable ? undefined : sortColumn\n          }\n          gridSelection={gridSelection}\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            if (isFocused || isTouchDevice) {\n              // Only allow selection changes if the grid is focused.\n              // This is mainly done because there is a bug when overlay click actions\n              // are outside of the bounds of the table (e.g. select dropdown or date picker).\n              // This results in the first cell being selected for a short period of time\n              // But for touch devices, preventing this can cause issues to select cells.\n              // So we allow selection changes for touch devices even when it is not focused.\n              setGridSelection(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use overflow scrollbars, so we need to deactivate the native\n            // scrollbar override:\n            scrollbarWidthOverride: 0,\n            ...(hasCustomizedScrollbars && {\n              // Add negative padding to the right and bottom to allow the scrollbars in\n              // webkit to overlay the table:\n              paddingBottom: hasHorizontalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n              paddingRight: hasVerticalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n            }),\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkerTheme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n              rowMarkers: \"checkbox\",\n              rowSelectionMode: \"multi\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame, true)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["StyledToolbarWrapper","_styled","target","_ref","theme","locked","padding","position","top","right","spacing","none","transition","opacity","concat","StyledToolbar","_ref2","color","hasLightBackgroundColor","colors","fadedText60","bodyText","display","flexDirection","alignItems","justifyContent","boxShadow","borderRadius","radii","lg","backgroundColor","lightenedBg05","width","zIndex","zIndices","sidebar","ToolbarAction","label","show_label","icon","onClick","useTheme","displayLabel","_jsx","children","Tooltip","content","StreamlitMarkdown","source","allowHTML","style","fontSize","fontSizes","sm","placement","Placement","onMouseEnterDelay","inline","_jsxs","Button","event","stopPropagation","kind","BaseButtonKind","Icon","size","testid","onExpand","onCollapse","isFullScreen","disableFullscreenMode","className","Fullscreen","FullscreenExit","BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","arguments","length","undefined","GridCellKind","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","isMissingValueCell","isMissingValue","getEmptyCell","getTextCell","faded","toGlideColumn","column","id","title","hasMenu","themeOverride","isStretched","grow","isIndex","mergeColumnParameters","defaultParams","userParams","isNullOrUndefined","merge","toSafeArray","Uint8Array","TextDecoder","decode","trim","startsWith","endsWith","split","JSON","parse","error","parsedData","stringify","_key","value","Number","Array","isArray","map","includes","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","numbro","notNullOrUndefined","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","notation","moment","humanize","sprintf","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","utc","isValid","parsedMomentTime","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","ObjectColumn","props","cellTemplate","contentAlignment","sortMode","isEditable","getCell","cellData","getCellValue","isEditableType","TextColumn","parameters","columnTypeOptions","validateRegex","validate","validateInput","isRequired","corrected","max_chars","slice","test","validationResult","applyTimezone","timezone","utcOffset","tz","BaseDateTimeColumn","defaultFormat","defaultStep","inputType","toISOString","_parameters$step","step","defaultTimezoneOffset","minDate","maxDate","_applyTimezone","min_value","max_value","copyData","contentAlign","date","displayDate","min","max","timezoneOffset","_cell$data","DateTimeColumn","_props$columnTypeOpti","_props$columnTypeOpti2","_props$arrowType","_props$columnTypeOpti3","arrowType","meta","hasTimezone","TimeColumn","_props$columnTypeOpti4","_props$columnTypeOpti5","DateColumn","CheckboxColumn","isIntegerType","arrowTypeName","NumberColumn","Quiver","allowNegative","fixedDecimals","decimals","trunc","isInteger","isSafeInteger","SelectboxColumn","dataType","options","uniqueTypes","Set","x","has","allowedValues","filter","opt","_cell$data2","_cell$data5","_toSafeNumber","_cell$data3","_toSafeBoolean","_cell$data4","ListColumn","extractCssProperty","htmlElementId","property","cssStyle","regex","match","exec","getIndexFromArrow","indexPosition","types","index","indexNames","name","isHidden","getColumnFromArrow","columnPosition","columns","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","typeName","contentType","field","_arrowCell$field","parsedDate","_arrowCell$field$type","_arrowCell$field2","type","unit","decimalStr","displayContent","_data","_data2","displayText","cssId","fontColor","textDark","bgCell","applyPandasStylerCss","LinkColumn","displayTextRegex","display_text","href","cellHref","patternMatch","getLinkDisplayValueFromRegex","cursor","ImageColumn","imageUrls","ProgressColumn","measureLabel","String","normalizeCellValue","BaseChartColumn","chart_type","y_min","y_max","values","displayValues","graphKind","yAxis","hideAxis","chartData","convertedChartData","normalizedChartData","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","v","join","LineChartColumn","BarChartColumn","UriOverlayEditorStyle","styles","p","uri","onChange","validatedSelection","preview","rel","TextCellEntry","highlight","autoFocus","linkCellRenderer","draw","args","ctx","rect","hoverX","displayValue","xPad","cellHorizontalPadding","drawX","rectHoverX","font","baseFontStyle","fontFamily","middleCenterBias","getMiddleCenterBias","drawY","y","height","metrics","measureTextCached","moveTo","floor","lineTo","strokeStyle","linkColor","stroke","fillStyle","fillText","closePath","isMatch","c","measure","measureText","needsHover","needsHoverPosition","onSelect","e","redirectLink","document","createElement","getContext","alpha","posX","bounds","textWidth","textStart","onClickSelect","window","open","onDelete","provideEditor","UriOverlayEditor","onPaste","toPaste","ColumnTypes","Map","Object","entries","object","checkbox","selectbox","list","number","link","datetime","time","line_chart","bar_chart","image","progress","CustomCells","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","applyColumnConfig","columnProps","columnConfigMapping","columnConfig","get","indexNumber","disabled","hidden","required","type_config","alignment","defaultValue","default","help","getColumnType","_column$columnTypeOpt","customType","ColumnType","logWarning","getColumnTypeFromArrow","element","React","configJson","logError","getColumnConfig","stretchColumns","useContainerWidth","configuredColumns","dimensions","numIndices","headerColumns","numColumns","dataColumns","getAllColumnsFromArrow","updatedColumn","editingMode","ArrowProto","columnOrder","orderedColumns","forEach","columnName","find","getColumnName","constructor","numRows","editedCells","addedRows","deletedRows","this","toJson","columnsByIndex","set","currentState","edited_rows","added_rows","deleted_rows","row","rowIndex","_map","editedRow","colIndex","addedRow","isIncomplete","cellValue","_k","fromJson","editingStateJson","editingState","columnsByName","keys","key","colName","_this$editedCells$get","isAddedRow","col","rowCache","setCell","addRow","rowCells","deleteRows","rows","sort","a","b","deleteRow","splice","delete","getOriginalRowIndex","originalIndex","getNumRows","headerIcons","editable","bgColor","accentColor","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","horizontalBorderColor","genericFonts","bodyFont","bgSearchResult","resizeIndicatorColor","bgIconHeader","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","editorFontSize","textMedium","textLight","fadedText40","textBubble","bgCellMedium","cellVerticalPadding","bgBubble","bgBubbleSelected","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","getCellContent","originalCol","originalRow","current","editedCell","setSort","getCellContentSorted","getOriginalIndex","useGlideColumnSort","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","CSV_DELIMITER","CSV_QUOTE_CHAR","CSV_ESCAPE_CHAR","CSV_ROW_DELIMITER","CSV_SPECIAL_CHARS_REGEX","toCsvRow","rowValues","strValue","escapeValue","exportToCsv","async","nativeFileSystemAdapter","timestamp","suggestedName","fileHandle","showSaveFilePicker","accept","excludeAcceptAllOption","textEncoder","TextEncoder","writer","createWritable","write","encode","headers","rowData","close","fixedNumRows","refreshCells","applyEdits","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","lastUpdated","performance","now","appendEmptyRow","newRow","onRowAppended","selection","_selection$current","rowsToDelete","toArray","range","updatedCells","selectedArea","targetCol","targetRow","pasteDataValue","validateCell","tooltip","setTooltip","timeoutRef","onItemHovered","clearTimeout","location","colIdx","rowIdx","tooltipContent","hasTooltip","setTimeout","left","clearTooltip","drawCell","colPos","drawTextCell","headerFontFull","baseFontFull","markerFontFull","markerFontStyle","spriteManager","hyperWrapping","drawMissingPlaceholder","save","beginPath","fill","restore","drawRequiredIndicator","customRenderers","SparklineCell","DropdownCell","RangeCell","DatePickerCell","columnSizes","setColumnSizes","useState","onColumnResize","_newSize","_colIndex","newSizeWithGrow","BORDER_THRESHOLD","ROW_HEIGHT","MIN_TABLE_WIDTH","MIN_TABLE_HEIGHT","containerWidth","containerHeight","initialWidth","maxHeight","calculateMaxHeight","initialHeight","maxWidth","resizableSize","setResizableSize","minHeight","minWidth","StyledImage","objectFit","ImageCellEditor","urls","imageData","src","setOpen","closeTooltip","Popover","StyledTooltipContentWrapper","PLACEMENT","accessibilityType","ACCESSIBILITY_TYPE","showArrow","popoverMargin","onClickOutside","onEsc","overrides","Body","borderTopLeftRadius","md","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingBottom","paddingLeft","paddingRight","Inner","fontWeight","isOpen","StyledResizableContainer","hasCustomizedScrollbars","scrollbarWidth","withFullScreenWrapper","widgetMgr","expand","collapse","resizableRef","dataEditorRef","resizableContainerRef","useCustomTheme","isFocused","setIsFocused","showSearch","setShowSearch","hasVerticalScroll","setHasVerticalScroll","hasHorizontalScroll","setHasHorizontalScroll","isTouchDevice","matchMedia","matches","navigator","userAgent","gridSelection","setGridSelection","CompactSelection","clearSelection","clearCellSelection","cells","_dataEditorRef$curren","updateCells","READ_ONLY","DYNAMIC","dataDimensions","originalNumRows","isEmptyTable","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","getOriginalCellContent","useDataLoader","useColumnSort","clearSelections","triggerRerun","debounce","currentEditingState","currentWidgetState","setStringValue","fromUi","useDataExporter","useDataEditor","useTooltips","useCustomRenderer","transformedColumns","glideColumns","useColumnSizer","useTableSizer","getEmptyStateContent","_ref3","_col","_row","span","formClearHelper","FormClearHelper","manageFormClearListener","formId","disconnect","isDynamicAndEditable","isRowSelected","isCellSelected","freezeColumns","_resizableContainerRe","scrollAreaBounds","querySelector","getBoundingClientRect","clientHeight","clientWidth","ref","onMouseDown","boundingClient","clientY","clientX","onBlur","currentTarget","contains","relatedTarget","Toolbar","Delete","Add","FileDownload","Search","Resizable","defaultSize","border","enable","bottom","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_delta","GlideDataEditor","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","rowHeight","headerHeight","resizeIndicator","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","downFill","onKeyDown","ctrlKey","metaKey","cv","preventDefault","onSearchClose","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","imageEditorOverride","fillHandle","trailingRowOptions","sticky","tint","rowMarkerTheme","rowSelectionMode","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}