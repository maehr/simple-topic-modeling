{"version":3,"file":"static/js/5412.e8b0231f.chunk.js","mappings":"2PAsCMA,EAAS,qJAqEZ,OArEY,oCACIC,gBAAkB,IAAIC,EAAAA,GAAiB,EAEjDC,MAAe,CACpBC,MAAO,EAAKC,cACb,EAyCOC,kBAAoB,SAACC,GAC3B,EAAKC,MAAMC,UAAUC,YACnB,EAAKF,MAAMG,QACX,EAAKR,MAAMC,MACXG,EAEJ,EAAC,EAMOK,cAAgB,WACtB,EAAKC,UACH,SAACC,EAAGC,GACF,MAAO,CAAEX,MAAOW,EAAUJ,QAAQK,QACpC,IACA,kBAAM,EAAKV,kBAAkB,CAAEW,QAAQ,GAAO,GAElD,EAAC,EAEOC,SAAW,SAACd,GAClB,EAAKS,SAAS,CAAET,MAAAA,IAAS,kBAAM,EAAKE,kBAAkB,CAAEW,QAAQ,GAAO,GACzE,EAAC,EA4BA,OA5BA,kCA9DD,WAGE,IAAME,EAAcC,KAAKZ,MAAMC,UAAUY,YAAYD,KAAKZ,MAAMG,SAChE,YAAuBW,IAAhBH,EAA4BA,EAAcC,KAAKZ,MAAMG,QAAQK,OACtE,GAAC,+BAED,WACMI,KAAKZ,MAAMG,QAAQY,SACrBH,KAAKI,qBAELJ,KAAKd,kBAAkB,CAAEW,QAAQ,GAErC,GAAC,gCAED,WACEG,KAAKK,yBACP,GAAC,kCAED,WACEL,KAAKnB,gBAAgByB,YACvB,GAAC,qCAED,WACuBN,KAAKZ,MAAMG,QAAxBY,UAENH,KAAKI,oBAET,GAAC,gCAED,WAAoC,IAAD,OACzBpB,EAAUgB,KAAKZ,MAAMG,QAArBP,MACRgB,KAAKZ,MAAMG,QAAQY,UAAW,EAC9BH,KAAKP,SAAS,CAAET,MAAAA,IAAS,WACvB,EAAKE,kBAAkB,CAAEW,QAAQ,GACnC,GACF,GAEA,oBA0BA,WACE,MACEG,KAAKZ,MAAMG,QADLgB,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAe,EAAfA,gBAAiBC,EAAM,EAANA,OAE/C,EAAgCX,KAAKZ,MAA7BwB,EAAQ,EAARA,SAAUvB,EAAS,EAATA,UASlB,OANAW,KAAKnB,gBAAgBgC,wBACnBxB,EACAsB,EACAX,KAAKR,gBAIL,SAAC,IAAW,CACViB,MAAOA,EACPC,iBAAiBI,EAAAA,EAAAA,IACA,OAAfJ,QAAe,IAAfA,OAAe,EAAfA,EAAiB1B,OAEnBuB,QAASA,EACTK,SAAUA,EACVG,MAAOf,KAAKZ,MAAM2B,MAClBjB,SAAUE,KAAKF,SACfd,MAAOgB,KAAKjB,MAAMC,MAClBwB,KAAMA,GAGZ,KAAC,EAjGY,CAASQ,EAAAA,eAoGxB,G","sources":["../../../streamlit/frontend/src/lib/components/widgets/Selectbox/Selectbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { Selectbox as SelectboxProto } from \"src/lib/proto\"\nimport { FormClearHelper } from \"src/lib/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport UISelectbox from \"src/lib/components/shared/Dropdown\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/util/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: SelectboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Selectbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setIntValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (value: number): void => {\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const { options, help, label, labelVisibility, formId } =\n      this.props.element\n    const { disabled, widgetMgr } = this.props\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UISelectbox\n        label={label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          labelVisibility?.value\n        )}\n        options={options}\n        disabled={disabled}\n        width={this.props.width}\n        onChange={this.onChange}\n        value={this.state.value}\n        help={help}\n      />\n    )\n  }\n}\n\nexport default Selectbox\n"],"names":["Selectbox","formClearHelper","FormClearHelper","state","value","initialValue","commitWidgetValue","source","props","widgetMgr","setIntValue","element","onFormCleared","setState","_","prevProps","default","fromUi","onChange","storedValue","this","getIntValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","options","help","label","labelVisibility","formId","disabled","manageFormClearListener","labelVisibilityProtoValueToEnum","width","React"],"sourceRoot":""}