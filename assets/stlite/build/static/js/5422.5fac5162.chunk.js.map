{"version":3,"file":"static/js/5422.5fac5162.chunk.js","mappings":"6NAAO,MAAMA,EAAS,CACpBC,QAAS,CAAC,2BAA4B,qBACtCC,KAAM,CAAC,2FAA4F,iBACnGC,SAAU,CAAC,oEAAqE,qBAChFC,QAAS,CAAC,8CAA+C,4BACzDC,OAAQC,GAAK,CAAC,6EAADC,OAA8ED,GAAK,eAChGE,SAAU,CAAC,gJAAiJ,iBAC5JC,WAAY,CAAC,uFAAwF,oBAG1FC,EAAS,CACpBC,SAAUC,WAAWC,gBAGhBC,eAAeC,EAAkBC,GACtCC,QAAQC,KAAK,mFACb,MAAOC,EAAQC,EAASC,SAAYC,QAAQC,IAAI,CAC9C,+BACA,gCACA,0CAGIC,EAAS,IAAIL,EAAOM,aAAa,IAAI,GAM3C,OALAD,EAAOE,SAAWV,EAAQW,KAAIC,GAASA,EAAMC,OACzC,IAAIT,EAAQU,WAAWF,GAAO,GAC9B,IAAIR,EAAQK,aAAaG,GAAO,KAG7B,IAAIP,EAAGU,0BAA0BP,EAC1C,CAEOV,eAAekB,EAAwBC,GAC5C,MAAM,aAAER,EAAY,WAAEK,SAAqB,gCACrC,0BAAEC,SAAoC,wCAEtCG,EAAQC,MAAMC,KAAKH,EAAMC,OACzBG,EAAWH,EAAM,GAAGI,mBAAmBC,MAAM,IAAK,GAAG,GACrDC,EAAO,IAAIf,EAAaY,GAAU,GAexC,OAbAH,EAAMO,SAAQC,IACZ,MAAMC,EAAOD,EAAKJ,mBAAmBC,MAAM,KAC3CI,EAAKC,QACL,MAAMC,EAAOF,EAAKG,MAENH,EAAKI,QAAO,CAACC,EAAKL,KACvBK,EAAItB,SAASiB,KAAOK,EAAItB,SAASiB,GAAQ,IAAIlB,EAAakB,GAAM,IAC9DK,EAAItB,SAASiB,KACnBH,GAECd,SAASmB,GAAQ,IAAIf,EAAWY,EAAKG,KAAMH,GAAM,EAAM,IAGtD,IAAIX,EAA0BS,EACvC,CAEO1B,eAAemC,EAAyBhB,GAC7C,MAAM,WAAEH,SAAqB,gCACvB,qBAAEoB,SAA+B,wCAEvC,OAAOf,MAAMC,KAAKH,EAAMC,OAAOP,KAAIe,GACjC,IAAIQ,EAAqB,IAAIpB,EAAWY,EAAKG,KAAMH,GAAM,KAE7D,C","sources":["../../../node_modules/native-file-system-adapter/src/util.js"],"sourcesContent":["export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n"],"names":["errors","INVALID","GONE","MISMATCH","MOD_ERR","SYNTAX","m","concat","SECURITY","DISALLOWED","config","writable","globalThis","WritableStream","async","fromDataTransfer","entries","console","warn","memory","sandbox","fs","Promise","all","folder","FolderHandle","_entries","map","entry","isFile","FileHandle","FileSystemDirectoryHandle","getDirHandlesFromInput","input","files","Array","from","rootName","webkitRelativePath","split","root","forEach","file","path","shift","name","pop","reduce","dir","getFileHandlesFromInput","FileSystemFileHandle"],"sourceRoot":""}