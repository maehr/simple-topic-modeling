{"version":3,"file":"static/js/7220.5396e6c4.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/DateInput/DateInput.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport moment from \"moment\"\nimport { withTheme } from \"@emotion/react\"\nimport { Datepicker as UIDatePicker, DENSITY } from \"baseui/datepicker\"\nimport { PLACEMENT } from \"baseui/popover\"\nimport { DateInput as DateInputProto } from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\n\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: DateInputProto\n  theme: EmotionTheme\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * An array with start and end date specified by the user via the UI. If the user\n   * didn't touch this widget's UI, the default value is used. End date is optional.\n   */\n  values: Date[]\n  /**\n   * Boolean to toggle between single-date picker and range date picker.\n   */\n  isRange: boolean\n  isEmpty: boolean\n}\n\n// Date format for communication (protobuf) support\nconst DATE_FORMAT = \"YYYY/MM/DD\"\n\n/** Convert an array of strings to an array of dates. */\nfunction stringsToDates(strings: string[]): Date[] {\n  return strings.map(val => new Date(val))\n}\n\n/** Convert an array of dates to an array of strings. */\nfunction datesToStrings(dates: Date[]): string[] {\n  if (!dates) {\n    return []\n  }\n  return dates.map((value: Date) => moment(value as Date).format(DATE_FORMAT))\n}\n\nclass DateInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    values: this.initialValue,\n    isRange: this.props.element.isRange,\n    isEmpty: false,\n  }\n\n  get initialValue(): Date[] {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringArrayValue(\n      this.props.element\n    )\n    const stringArray =\n      storedValue !== undefined\n        ? storedValue\n        : this.props.element.default || []\n    return stringsToDates(stringArray)\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value: values } = this.props.element\n    this.props.element.setValue = false\n    const dateValues = values.map((v: string) => new Date(v))\n    this.setState(\n      {\n        values: dateValues,\n        isEmpty: !dateValues,\n      },\n      () => {\n        this.commitWidgetValue({ fromUi: false })\n      }\n    )\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setStringArrayValue(\n      element,\n      datesToStrings(this.state.values),\n      source,\n      fragmentId\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    const defaultValue = stringsToDates(this.props.element.default)\n    this.setState(\n      {\n        values: defaultValue,\n        isEmpty: !defaultValue,\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({\n    date,\n  }: {\n    date: Date | (Date | null | undefined)[] | null | undefined\n  }): void => {\n    if (date === null || date === undefined) {\n      this.setState({\n        values: [],\n        isEmpty: true,\n      })\n      return\n    }\n\n    const values: Date[] = []\n    if (Array.isArray(date)) {\n      date.forEach((dt: Date | null | undefined) => {\n        if (dt) {\n          values.push(dt)\n        }\n      })\n    } else {\n      values.push(date)\n    }\n\n    this.setState(\n      {\n        values,\n        isEmpty: !values,\n      },\n      () => {\n        if (!this.state.isEmpty) this.commitWidgetValue({ fromUi: true })\n      }\n    )\n  }\n\n  private handleClose = (): void => {\n    const { isEmpty } = this.state\n    if (isEmpty) {\n      this.setState(\n        (_, prevProps) => {\n          return {\n            values: stringsToDates(prevProps.element.default),\n            isEmpty: !stringsToDates(prevProps.element.default),\n          }\n        },\n        () => {\n          this.commitWidgetValue({ fromUi: true })\n        }\n      )\n    }\n  }\n\n  private getMaxDate = (): Date | undefined => {\n    const { element } = this.props\n    const maxDate = element.max\n\n    return maxDate && maxDate.length > 0\n      ? moment(maxDate, DATE_FORMAT).toDate()\n      : undefined\n  }\n\n  public render(): React.ReactNode {\n    const { width, element, disabled, theme, widgetMgr } = this.props\n    const { values, isRange } = this.state\n    const { colors, fontSizes, lineHeights } = theme\n\n    const style = { width }\n    const minDate = moment(element.min, DATE_FORMAT).toDate()\n    const maxDate = this.getMaxDate()\n    const clearable = element.default.length === 0 && !disabled\n\n    // We need to extract the mask and format (date-fns notation) from the provided format string\n    // The user configured date format is based on the momentJS notation and is only allowed to contain\n    // one of YYYY/MM/DD, DD/MM/YYYY, or MM/DD/YYYY\" and can also use a period (.) or hyphen (-) as separators.\n\n    // We need to convert the provided format into a mask supported by the Baseweb datepicker\n    // Thereby, we need to replace all letters with 9s which refers to any number.\n    const dateMask = element.format.replaceAll(/[a-zA-Z]/g, \"9\")\n    // The Baseweb datepicker supports the date-fns notation for date formatting which is\n    // slightly different from the momentJS notation. Therefore, we need to\n    // convert the provided format into the date-fns notation:\n    const dateFormat = element.format.replaceAll(\"Y\", \"y\").replaceAll(\"D\", \"d\")\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stDateInput\" style={style} data-testid=\"stDateInput\">\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UIDatePicker\n          density={DENSITY.high}\n          formatString={dateFormat}\n          mask={isRange ? `${dateMask} – ${dateMask}` : dateMask}\n          placeholder={\n            isRange ? `${element.format} – ${element.format}` : element.format\n          }\n          disabled={disabled}\n          onChange={this.handleChange}\n          onClose={this.handleClose}\n          overrides={{\n            Popover: {\n              props: {\n                placement: PLACEMENT.bottomLeft,\n                overrides: {\n                  Body: {\n                    style: {\n                      border: `1px solid ${colors.fadedText10}`,\n                    },\n                  },\n                },\n              },\n            },\n            CalendarContainer: {\n              style: {\n                fontSize: fontSizes.sm,\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            Week: {\n              style: {\n                fontSize: fontSizes.sm,\n              },\n            },\n            Day: {\n              style: ({\n                // Due to a bug in BaseWeb, where the range selection defaults to mono300 and can't be changed, we need to override the background colors for all these shared props:\n                // $pseudoHighlighted: Styles the range selection when you click an initial date, and hover over the end one, but NOT click it.\n                // $pseudoSelected: Styles when a range was selected, click outide, and click the calendar again.\n                // $selected: Styles the background below the red circle from the start and end dates.\n                // $isHovered: Styles the background below the end date when hovered.\n                $pseudoHighlighted,\n                $pseudoSelected,\n                $selected,\n                $isHovered,\n              }) => ({\n                fontSize: fontSizes.sm,\n                lineHeight: lineHeights.base,\n\n                \"::before\": {\n                  backgroundColor:\n                    $selected ||\n                    $pseudoSelected ||\n                    $pseudoHighlighted ||\n                    $isHovered\n                      ? `${colors.secondaryBg} !important`\n                      : colors.transparent,\n                },\n\n                \"::after\": {\n                  borderColor: colors.transparent,\n                },\n              }),\n            },\n            PrevButton: {\n              style: () => ({\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              }),\n            },\n            NextButton: {\n              style: {\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              },\n            },\n            Input: {\n              props: {\n                // The default maskChar ` ` causes empty dates to display as ` / / `\n                // Clearing the maskChar so empty dates will not display\n                maskChar: null,\n\n                overrides: {\n                  Root: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      borderLeftWidth: \"1px\",\n                      borderRightWidth: \"1px\",\n                      borderTopWidth: \"1px\",\n                      borderBottomWidth: \"1px\",\n                    },\n                  },\n                  ClearIcon: {\n                    props: {\n                      overrides: {\n                        Svg: {\n                          style: {\n                            color: theme.colors.darkGray,\n                            // Since the close icon is an SVG, and we can't control its viewbox nor its attributes,\n                            // Let's use a scale transform effect to make it bigger.\n                            // The width property only enlarges its bounding box, so it's easier to click.\n                            transform: \"scale(1.41)\",\n                            width: theme.spacing.twoXL,\n                            marginRight: \"-8px\",\n                            \":hover\": {\n                              fill: theme.colors.bodyText,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                  Input: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      paddingRight: \".5rem\",\n                      paddingLeft: \".5rem\",\n                      paddingBottom: \".5rem\",\n                      paddingTop: \".5rem\",\n                      lineHeight: 1.4,\n                    },\n                    props: {\n                      \"data-testid\": \"stDateInput-Input\",\n                    },\n                  },\n                },\n              },\n            },\n          }}\n          value={values}\n          minDate={minDate}\n          maxDate={maxDate}\n          range={isRange}\n          clearable={clearable}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(DateInput)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["DATE_FORMAT","stringsToDates","strings","map","val","Date","DateInput","React","constructor","arguments","formClearHelper","FormClearHelper","state","values","this","initialValue","isRange","props","element","isEmpty","commitWidgetValue","source","widgetMgr","fragmentId","dates","setStringArrayValue","value","moment","format","onFormCleared","defaultValue","default","setState","fromUi","handleChange","_ref","date","undefined","Array","isArray","forEach","dt","push","handleClose","_","prevProps","getMaxDate","maxDate","max","length","toDate","storedValue","getStringArrayValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","disconnect","dateValues","v","render","_element$labelVisibil","width","disabled","theme","colors","fontSizes","lineHeights","style","minDate","min","clearable","dateMask","replaceAll","dateFormat","manageFormClearListener","formId","_jsxs","className","children","_jsx","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","UIDatePicker","density","DENSITY","formatString","mask","concat","placeholder","onChange","onClose","overrides","Popover","PLACEMENT","Body","border","fadedText10","CalendarContainer","fontSize","sm","paddingRight","spacing","paddingLeft","paddingBottom","paddingTop","Week","Day","_ref2","$pseudoHighlighted","$pseudoSelected","$selected","$isHovered","lineHeight","base","backgroundColor","secondaryBg","transparent","borderColor","PrevButton","display","alignItems","justifyContent","outline","NextButton","Input","maskChar","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","ClearIcon","Svg","color","darkGray","transform","twoXL","marginRight","fill","bodyText","range","withTheme","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}