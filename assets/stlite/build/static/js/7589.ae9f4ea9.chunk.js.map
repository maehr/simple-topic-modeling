{"version":3,"file":"static/js/7589.ae9f4ea9.chunk.js","mappings":"yLA4Be,SAASA,EAAO,GAGA,IAMzBC,EACAC,EATJC,EAAO,EAAPA,QACOC,EAAS,EAAhBC,MAEMA,EAAQF,EAAQG,SAAWH,EAAQE,MAAQD,EAO7CD,EAAQF,WACVA,EAAY,OACZC,EAAQ,CAAC,IAETD,EAAY,KACZC,EAAQ,CAAEK,SAAU,WAKtB,IAAMC,EAAMC,EAAkBN,EAAQK,KAChCE,EAAgB,MAAPF,OAAcG,EAAYF,EAAkBN,EAAQS,QAEnE,OACE,mBACEC,MAAOC,EAAAA,EACPZ,MAAOA,EACPM,IAAKA,EACLE,OAAQA,EACRL,MAAOA,EACPU,OAAQZ,EAAQY,OAChBd,UAAWA,EACXe,QAASC,EAAAA,EACTC,MAAM,aAGZ,CAMA,SAAST,EACPU,GAEA,OAAgB,MAATA,GAA2B,KAAVA,OAAeR,EAAYQ,CACrD,C","sources":["../../../streamlit/frontend/src/lib/components/elements/IFrame/IFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IFrame as IFrameProto } from \"src/lib/proto\"\nimport {\n  DEFAULT_IFRAME_FEATURE_POLICY,\n  DEFAULT_IFRAME_SANDBOX_POLICY,\n} from \"src/lib/util/IFrameUtil\"\nimport React, { CSSProperties, ReactElement } from \"react\"\n\nexport interface IFrameProps {\n  element: IFrameProto\n  width: number\n}\n\nexport default function IFrame({\n  element,\n  width: propWidth,\n}: IFrameProps): ReactElement {\n  const width = element.hasWidth ? element.width : propWidth\n\n  // Handle scrollbar visibility. Chrome and other WebKit browsers still\n  // seem to use the deprecated \"scrolling\" attribute, whereas the standard\n  // says to use a CSS style.\n  let scrolling: string\n  let style: CSSProperties\n  if (element.scrolling) {\n    scrolling = \"auto\"\n    style = {}\n  } else {\n    scrolling = \"no\"\n    style = { overflow: \"hidden\" }\n  }\n\n  // Either 'src' or 'srcDoc' will be set in our element. If 'src'\n  // is set, we're loading a remote URL in the iframe.\n  const src = getNonEmptyString(element.src)\n  const srcDoc = src != null ? undefined : getNonEmptyString(element.srcdoc)\n\n  return (\n    <iframe\n      allow={DEFAULT_IFRAME_FEATURE_POLICY}\n      style={style}\n      src={src}\n      srcDoc={srcDoc}\n      width={width}\n      height={element.height}\n      scrolling={scrolling}\n      sandbox={DEFAULT_IFRAME_SANDBOX_POLICY}\n      title=\"st.iframe\"\n    />\n  )\n}\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return value == null || value === \"\" ? undefined : value\n}\n"],"names":["IFrame","scrolling","style","element","propWidth","width","hasWidth","overflow","src","getNonEmptyString","srcDoc","undefined","srcdoc","allow","DEFAULT_IFRAME_FEATURE_POLICY","height","sandbox","DEFAULT_IFRAME_SANDBOX_POLICY","title","value"],"sourceRoot":""}