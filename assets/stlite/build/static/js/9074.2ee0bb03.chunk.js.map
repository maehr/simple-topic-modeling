{"version":3,"file":"static/js/9074.2ee0bb03.chunk.js","mappings":"oKA6Be,SAASA,EAAKC,GAKC,IALA,QAC5BC,EAAO,MACPC,EAAK,UACLC,EAAS,WACTC,GACWJ,EACX,MAAMK,GAAWC,EAAAA,EAAAA,QAAyB,OAEpC,UAAEC,EAAS,QAAEC,EAAO,KAAEC,EAAI,SAAEC,GAAaT,EAEzCU,GAAkBC,EAAAA,EAAAA,UAAiB,KACvC,IAAKX,EAAQY,GAEX,OAAO,EAKT,MAAMF,EAAkBP,EAAWU,gBACjCb,EAAQY,GACR,mBAQF,OALKF,GAGHP,EAAWW,gBAAgBd,EAAQY,GAAI,mBAAmB,GAEtC,OAAfF,QAAe,IAAfA,GAAAA,CAAwB,GAC9B,CAACV,EAAQY,GAAIT,KAGhBY,EAAAA,EAAAA,YAAU,KACJX,EAASY,UACXZ,EAASY,QAAQC,YAAcX,EACjC,GACC,CAACA,KAEJS,EAAAA,EAAAA,YAAU,KACR,MAAMG,EAAYd,EAASY,QAErBG,EAA2BA,KAC3BD,IAEFA,EAAUD,YAAcjB,EAAQM,UAClC,EAOF,OAJIY,GACFA,EAAUE,iBAAiB,iBAAkBD,GAGxC,KACDD,GACFA,EAAUG,oBAAoB,iBAAkBF,EAClD,CACD,GACA,CAACnB,KAGJe,EAAAA,EAAAA,YAAU,KACR,MAAMG,EAAYd,EAASY,QAC3B,IAAKE,EAAW,OAGhB,IAAII,GAAmB,EAEvB,MAAMC,EAAmBA,KACnBhB,EAAU,GAAKW,EAAUD,aAAeV,IACtCC,GAEFU,EAAUD,YAAcX,GAAa,EACrCY,EAAUM,QACAF,IACVA,GAAmB,EACnBJ,EAAUO,SAEd,EAOF,OAJIlB,EAAU,GACZW,EAAUE,iBAAiB,aAAcG,GAGpC,KACDL,GAAaX,EAAU,GACzBW,EAAUG,oBAAoB,aAAcE,EAC9C,CACD,GACA,CAAChB,EAASC,EAAMF,KAGnBS,EAAAA,EAAAA,YAAU,KACR,MAAMG,EAAYd,EAASY,QAC3B,IAAKE,EAAW,OAGhB,MAAMQ,EAAiBA,KACjBlB,IACFU,EAAUD,YAAcX,GAAa,EACrCY,EAAUM,OACZ,EAKF,OAFAN,EAAUE,iBAAiB,QAASM,GAE7B,KACDR,GACFA,EAAUG,oBAAoB,QAASK,EACzC,CACD,GACA,CAAClB,EAAMF,IAEV,MAAMqB,GAASC,EAAAA,EAAAA,IAAwB5B,EAAQ6B,KACzCC,EAAM5B,EAAU6B,cAAcJ,GAEpC,OACEK,EAAAA,EAAAA,KAAA,SACE,cAAY,UACZpB,GAAG,QACHqB,IAAK7B,EACL8B,UAAQ,EACRC,SAAU1B,IAAaC,EACvB0B,IAAKN,EACLO,UAAU,UACVC,MAAO,CAAErC,UAGf,C","sources":["../../../streamlit/frontend/lib/src/components/elements/Audio/Audio.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useRef, useMemo } from \"react\"\nimport { Audio as AudioProto } from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { WidgetStateManager as ElementStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useStliteMediaObjectUrl } from \"@stlite/kernel\"\n\nexport interface AudioProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: AudioProto\n  elementMgr: ElementStateManager\n}\n\nexport default function Audio({\n  element,\n  width,\n  endpoints,\n  elementMgr,\n}: AudioProps): ReactElement {\n  const audioRef = useRef<HTMLAudioElement>(null)\n\n  const { startTime, endTime, loop, autoplay } = element\n\n  const preventAutoplay = useMemo<boolean>(() => {\n    if (!element.id) {\n      // Elements without an ID should never autoplay\n      return true\n    }\n\n    // Recover the state in case this component got unmounted\n    // and mounted again for the same element.\n    const preventAutoplay = elementMgr.getElementState(\n      element.id,\n      \"preventAutoplay\"\n    )\n\n    if (!preventAutoplay) {\n      // Set the state to prevent autoplay in case there is an unmount + mount\n      // for the same element.\n      elementMgr.setElementState(element.id, \"preventAutoplay\", true)\n    }\n    return preventAutoplay ?? false\n  }, [element.id, elementMgr])\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const audioNode = audioRef.current\n\n    const setStartTime: () => void = () => {\n      if (audioNode) {\n        // setStartTime\n        audioNode.currentTime = element.startTime\n      }\n    }\n\n    if (audioNode) {\n      audioNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (audioNode) {\n        audioNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  // Stop the audio at 'endTime' and handle loop\n  useEffect(() => {\n    const audioNode = audioRef.current\n    if (!audioNode) return\n\n    // Flag to avoid calling 'audioNode.pause()' multiple times\n    let stoppedByEndTime = false\n\n    const handleTimeUpdate = (): void => {\n      if (endTime > 0 && audioNode.currentTime >= endTime) {\n        if (loop) {\n          // If loop is true and we reached 'endTime', reset to 'startTime'\n          audioNode.currentTime = startTime || 0\n          audioNode.play()\n        } else if (!stoppedByEndTime) {\n          stoppedByEndTime = true\n          audioNode.pause()\n        }\n      }\n    }\n\n    if (endTime > 0) {\n      audioNode.addEventListener(\"timeupdate\", handleTimeUpdate)\n    }\n\n    return () => {\n      if (audioNode && endTime > 0) {\n        audioNode.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      }\n    }\n  }, [endTime, loop, startTime])\n\n  // Handle looping the audio\n  useEffect(() => {\n    const audioNode = audioRef.current\n    if (!audioNode) return\n\n    // Loop the audio when it has ended\n    const handleAudioEnd = (): void => {\n      if (loop) {\n        audioNode.currentTime = startTime || 0 // Reset to startTime or to the start if not specified\n        audioNode.play()\n      }\n    }\n\n    audioNode.addEventListener(\"ended\", handleAudioEnd)\n\n    return () => {\n      if (audioNode) {\n        audioNode.removeEventListener(\"ended\", handleAudioEnd)\n      }\n    }\n  }, [loop, startTime])\n\n  const rawUrl = useStliteMediaObjectUrl(element.url)\n  const uri = endpoints.buildMediaURL(rawUrl)\n\n  return (\n    <audio\n      data-testid=\"stAudio\"\n      id=\"audio\"\n      ref={audioRef}\n      controls\n      autoPlay={autoplay && !preventAutoplay}\n      src={uri}\n      className=\"stAudio\"\n      style={{ width }}\n    />\n  )\n}\n"],"names":["Audio","_ref","element","width","endpoints","elementMgr","audioRef","useRef","startTime","endTime","loop","autoplay","preventAutoplay","useMemo","id","getElementState","setElementState","useEffect","current","currentTime","audioNode","setStartTime","addEventListener","removeEventListener","stoppedByEndTime","handleTimeUpdate","play","pause","handleAudioEnd","rawUrl","useStliteMediaObjectUrl","url","uri","buildMediaURL","_jsx","ref","controls","autoPlay","src","className","style"],"sourceRoot":""}