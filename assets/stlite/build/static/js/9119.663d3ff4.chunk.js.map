{"version":3,"file":"static/js/9119.663d3ff4.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/ImageList/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/ImageList/ImageList.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/FullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../node_modules/@emotion-icons/open-iconic/FullscreenEnter/FullscreenEnter.esm.js","../../../node_modules/@emotion-icons/open-iconic/FullscreenExit/FullscreenExit.esm.js"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n}))\n\nexport const StyledImageContainer = styled.div(() => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: \"0.125rem\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport {\n  IImage,\n  Image as ImageProto,\n  ImageList as ImageListProto,\n} from \"@streamlit/lib/src/proto\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  isFullScreen: boolean\n  element: ImageListProto\n  height?: number\n}\n\nenum WidthBehavior {\n  OriginalWidth = -1,\n  ColumnWidth = -2,\n  AutoWidth = -3,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nexport function ImageList({\n  width,\n  isFullScreen,\n  element,\n  height,\n  endpoints,\n}: ImageListProps): ReactElement {\n  const images = useStliteMediaObjects(element.imgs)\n\n  // The width field in the proto sets the image width, but has special\n  // cases for -1, -2, and -3.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    protoWidth === WidthBehavior.OriginalWidth ||\n    protoWidth === WidthBehavior.AutoWidth\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (protoWidth === WidthBehavior.ColumnWidth) {\n    // Use the column width\n    containerWidth = width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: any = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle[\"object-fit\"] = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n\n    if (protoWidth === WidthBehavior.AutoWidth) {\n      // Cap the image width, so it doesn't exceed the column width\n      imgStyle.maxWidth = \"100%\"\n    }\n  }\n\n  return (\n    <StyledImageList style={{ width }}>\n      {images.map((iimage: IImage, idx: number): ReactElement => {\n        const image = iimage as ImageProto\n        return (\n          <StyledImageContainer key={idx} data-testid=\"stImage\">\n            <img\n              style={imgStyle}\n              src={endpoints.buildMediaURL(image.url)}\n              alt={idx.toString()}\n            />\n            {image.caption && (\n              <StyledCaption data-testid=\"stImageCaption\" style={imgStyle}>\n                {` ${image.caption} `}\n              </StyledCaption>\n            )}\n          </StyledImageContainer>\n        )\n      })}\n    </StyledImageList>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenButtonProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenButton =\n  styled.button<StyledFullScreenButtonProps>(({ isExpanded, theme }) => {\n    const variableProps = isExpanded\n      ? {\n          right: \"0.4rem\",\n          top: \"0.5rem\",\n          backgroundColor: \"transparent\",\n        }\n      : {\n          right: \"-3.0rem\",\n          top: \"-0.375rem\",\n          opacity: 0,\n          transform: \"scale(0)\",\n          backgroundColor: theme.colors.lightenedBg05,\n        }\n\n    return {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n      zIndex: theme.zIndices.sidebar + 1,\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      border: \"none\",\n      color: theme.colors.fadedText60,\n      borderRadius: \"50%\",\n\n      ...variableProps,\n\n      \"&:focus\": {\n        outline: \"none\",\n      },\n\n      \"&:active, &:focus-visible, &:hover\": {\n        opacity: 1,\n        outline: \"none\",\n        transform: \"scale(1)\",\n        color: theme.colors.bodyText,\n        transition: \"none\",\n      },\n    }\n  })\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    \"&:hover\": {\n      [StyledFullScreenButton as any]: {\n        opacity: 1,\n        transform: \"scale(1)\",\n        transition: \"none\",\n      },\n    },\n\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: \"2.875rem\", // Old header height to avoid addtl cascading visual/snapshot changes\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { FullscreenEnter, FullscreenExit } from \"@emotion-icons/open-iconic\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  StyledFullScreenFrame,\n  StyledFullScreenButton,\n} from \"./styled-components\"\n\nexport type Size = {\n  width: number\n  expanded: boolean\n  height?: number\n  expand: () => void\n  collapse: () => void\n}\n\n/*\n * Function responsible for rendering children.\n * This function should implement the following signature:\n * ({ height, width }) => PropTypes.element\n */\nexport interface FullScreenWrapperProps {\n  children: (props: Size) => React.ReactNode\n  width: number\n  height?: number\n  theme: EmotionTheme\n  disableFullscreenMode?: boolean\n}\n\ninterface State {\n  expanded: boolean\n  fullWidth: number\n  fullHeight: number\n}\n\n/*\n * A component that draws a button on the top right of the\n * wrapper element. OnClick, change the element container\n * to fixed and cover all screen, updating wrapped element height and width\n */\nclass FullScreenWrapper extends PureComponent<FullScreenWrapperProps, State> {\n  public context!: React.ContextType<typeof LibContext>\n\n  public static contextType = LibContext\n\n  public constructor(props: FullScreenWrapperProps) {\n    super(props)\n    this.state = {\n      expanded: false,\n      ...this.getWindowDimensions(),\n    }\n  }\n\n  public componentDidMount(): void {\n    window.addEventListener(\"resize\", this.updateWindowDimensions)\n    document.addEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  public componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions)\n    document.removeEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  private controlKeys = (event: any): void => {\n    const { expanded } = this.state\n\n    if (event.keyCode === 27 && expanded) {\n      // Exit fullscreen\n      this.zoomOut()\n    }\n  }\n\n  private zoomIn = (): void => {\n    document.body.style.overflow = \"hidden\"\n    this.context.setFullScreen(true)\n    this.setState({ expanded: true })\n  }\n\n  private zoomOut = (): void => {\n    document.body.style.overflow = \"unset\"\n    this.context.setFullScreen(false)\n    this.setState({ expanded: false })\n  }\n\n  private convertScssRemValueToPixels = (scssValue: string): number => {\n    const remValue = parseFloat(scssValue)\n    return (\n      remValue *\n      parseFloat(getComputedStyle(document.documentElement).fontSize)\n    )\n  }\n\n  private getWindowDimensions = (): Pick<\n    State,\n    \"fullWidth\" | \"fullHeight\"\n  > => {\n    const padding = this.convertScssRemValueToPixels(\n      this.props.theme.spacing.md\n    )\n    const paddingTop = this.convertScssRemValueToPixels(\n      // Old header height to avoid addtl cascading visual/snapshot changes\n      \"2.875rem\"\n    )\n\n    return {\n      fullWidth: window.innerWidth - padding * 2, // Left and right\n      fullHeight: window.innerHeight - (padding + paddingTop), // Bottom and Top\n    }\n  }\n\n  private updateWindowDimensions = (): void => {\n    this.setState(this.getWindowDimensions())\n  }\n\n  public render(): JSX.Element {\n    const { expanded, fullWidth, fullHeight } = this.state\n    const { children, width, height, disableFullscreenMode } = this.props\n\n    let buttonImage = FullscreenEnter\n    let buttonOnClick = this.zoomIn\n    let buttonTitle = \"View fullscreen\"\n\n    if (expanded) {\n      buttonImage = FullscreenExit\n      buttonOnClick = this.zoomOut\n      buttonTitle = \"Exit fullscreen\"\n    }\n\n    return (\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid={\"stFullScreenFrame\"}\n      >\n        {!disableFullscreenMode && (\n          <StyledFullScreenButton\n            data-testid=\"StyledFullScreenButton\"\n            onClick={buttonOnClick}\n            title={buttonTitle}\n            isExpanded={expanded}\n          >\n            <Icon content={buttonImage} />\n          </StyledFullScreenButton>\n        )}\n        {expanded\n          ? children({\n              width: fullWidth,\n              height: fullHeight,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })\n          : children({\n              width,\n              height,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })}\n      </StyledFullScreenFrame>\n    )\n  }\n}\n\nexport default withTheme(FullScreenWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent, ComponentType, ReactNode } from \"react\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport FullScreenWrapper from \"./FullScreenWrapper\"\n\nexport interface Props {\n  width: number\n  height?: number\n  disableFullscreenMode?: boolean\n}\n\n// Our wrapper takes the wrapped component's props, plus \"width\", \"height?\".\n// It will pass \"isFullScreen\" to the wrapped component automatically\n// (but the wrapped component is free to ignore that prop).\ntype WrapperProps<P> = Omit<P & Props, \"isFullScreen\" | \"collapse\" | \"expand\">\n\nfunction withFullScreenWrapper<P>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>,\n  forceDisableFullScreenMode = false\n): ComponentType<React.PropsWithChildren<WrapperProps<P>>> {\n  class ComponentWithFullScreenWrapper extends PureComponent<WrapperProps<P>> {\n    public static readonly displayName = `withFullScreenWrapper(${\n      WrappedComponent.displayName || WrappedComponent.name\n    })`\n\n    public render = (): ReactNode => {\n      const { width, height, disableFullscreenMode } = this.props\n\n      return (\n        <FullScreenWrapper\n          width={width}\n          height={height}\n          disableFullscreenMode={\n            forceDisableFullScreenMode || disableFullscreenMode\n          }\n        >\n          {({ width, height, expanded, expand, collapse }) => (\n            // `(this.props as P)` is required due to a TS bug:\n            // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n            <WrappedComponent\n              {...(this.props as P)}\n              width={width}\n              height={height}\n              isFullScreen={expanded}\n              expand={expand}\n              collapse={collapse}\n            />\n          )}\n        </FullScreenWrapper>\n      )\n    }\n  }\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var FullscreenEnter = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0v4l1.5-1.5L3 4l1-1-1.5-1.5L4 0H0zm5 4L4 5l1.5 1.5L4 8h4V4L6.5 5.5 5 4z\"\n  }));\n});\nFullscreenEnter.displayName = 'FullscreenEnter';\nexport var FullscreenEnterDimensions = {\n  height: 8,\n  width: 8\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var FullscreenExit = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0L0 1l1.5 1.5L0 4h4V0L2.5 1.5 1 0zm3 4v4l1.5-1.5L7 8l1-1-1.5-1.5L8 4H4z\"\n  }));\n});\nFullscreenExit.displayName = 'FullscreenExit';\nexport var FullscreenExitDimensions = {\n  height: 8,\n  width: 8\n};"],"names":["StyledImageList","_styled","target","_ref","theme","display","flexDirection","flexWrap","rowGap","spacing","lg","StyledImageContainer","alignItems","width","flexGrow","StyledCaption","_ref2","fontFamily","genericFonts","bodyFont","fontSize","fontSizes","sm","color","colors","fadedText60","textAlign","marginTop","xs","wordWrap","padding","WidthBehavior","withFullScreenWrapper","isFullScreen","element","height","endpoints","images","useStliteMediaObjects","imgs","containerWidth","protoWidth","OriginalWidth","AutoWidth","undefined","ColumnWidth","Error","concat","imgStyle","maxHeight","maxWidth","_jsx","style","children","map","iimage","idx","image","_jsxs","src","buildMediaURL","url","alt","toString","caption","StyledFullScreenButton","isExpanded","variableProps","right","top","backgroundColor","opacity","transform","lightenedBg05","position","justifyContent","zIndex","zIndices","sidebar","transition","border","borderRadius","outline","bodyText","StyledFullScreenFrame","left","bottom","background","bgColor","fullscreenWrapper","md","paddingTop","overflow","FullScreenWrapper","PureComponent","constructor","props","super","context","controlKeys","event","expanded","this","state","keyCode","zoomOut","zoomIn","document","body","setFullScreen","setState","convertScssRemValueToPixels","scssValue","parseFloat","getComputedStyle","documentElement","getWindowDimensions","fullWidth","window","innerWidth","fullHeight","innerHeight","updateWindowDimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","disableFullscreenMode","buttonImage","FullscreenEnter","buttonOnClick","buttonTitle","FullscreenExit","onClick","title","Icon","content","expand","collapse","contextType","LibContext","withTheme","WrappedComponent","forceDisableFullScreenMode","arguments","length","ComponentWithFullScreenWrapper","displayName","name","hoistNonReactStatics","React","ref","EmotionIconBase","_extends","iconAttrs","iconVerticalAlign","iconViewBox","d"],"sourceRoot":""}