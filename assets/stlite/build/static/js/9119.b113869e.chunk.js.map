{"version":3,"file":"static/js/9119.b113869e.chunk.js","mappings":"4KAkBO,MAAMA,GAAkBC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,EAAWE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACxDE,QAAS,OACTC,cAAe,MACfC,SAAU,OAEVC,OAAQJ,EAAMK,QAAQC,GACvB,GAAC,IAEWC,GAAuBV,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,EAAW,MAC7CI,QAAS,OACTC,cAAe,SACfM,WAAY,UACZC,MAAO,OACPC,SAAU,KACV,IAEWC,GAAgBd,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,EAAWe,IAAA,IAAC,MAAEZ,GAAOY,EAAA,MAAM,CACtDC,WAAYb,EAAMc,aAAaC,SAC/BC,SAAUhB,EAAMiB,UAAUC,GAC1BC,MAAOnB,EAAMoB,OAAOC,YACpBC,UAAW,SACXC,UAAWvB,EAAMK,QAAQmB,GACzBC,SAAU,aACVC,QAAS,WACV,GAAC,I,eCDGC,EAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,CAAa,EAAbA,GAAa,IA4ElB,SAAeC,EAAAA,EAAAA,IAnER,SAAkB7B,GAMS,IANR,MACxBU,EAAK,aACLoB,EAAY,QACZC,EAAO,OACPC,EAAM,UACNC,GACejC,EACf,MAAMkC,GAASC,EAAAA,EAAAA,IAAmBJ,EAAQK,MAI1C,IAAIC,EACJ,MAAMC,EAAaP,EAAQrB,MAE3B,GACE4B,IAAeV,EAAcW,eAC7BD,IAAeV,EAAcY,UAG7BH,OAAiBI,OACZ,GAAIH,IAAeV,EAAcc,YAEtCL,EAAiB3B,MACZ,MAAI4B,EAAa,GAItB,MAAMK,MAAM,wBAADC,OAAyBN,IAFpCD,EAAiBC,CAGnB,CAEA,MAAMO,EAAgB,CAAC,EAcvB,OAZIb,GAAUF,GACZe,EAASC,UAAYd,EACrBa,EAAS,cAAgB,YAEzBA,EAASnC,MAAQ2B,EAEbC,IAAeV,EAAcY,YAE/BK,EAASE,SAAW,UAKtBC,EAAAA,EAAAA,KAACnD,EAAe,CAACoD,MAAO,CAAEvC,SAAQwC,SAC/BhB,EAAOiB,KAAI,CAACC,EAAgBC,KAC3B,MAAMC,EAAQF,EACd,OACEG,EAAAA,EAAAA,MAAC/C,EAAoB,CAAW,cAAY,UAAS0C,SAAA,EACnDF,EAAAA,EAAAA,KAAA,OACEC,MAAOJ,EACPW,IAAKvB,EAAUwB,cAAcH,EAAMI,KACnCC,IAAKN,EAAIO,aAEVN,EAAMO,UACLb,EAAAA,EAAAA,KAACpC,EAAa,CAAC,cAAY,iBAAiBqC,MAAOJ,EAASK,SAAA,IAAAN,OACrDU,EAAMO,QAAO,SARGR,EAWJ,KAKjC,G","sources":["../../../streamlit/frontend/lib/src/components/elements/ImageList/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/ImageList/ImageList.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n}))\n\nexport const StyledImageContainer = styled.div(() => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: \"0.125rem\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport {\n  IImage,\n  Image as ImageProto,\n  ImageList as ImageListProto,\n} from \"@streamlit/lib/src/proto\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { useStliteImageList } from \"@stlite/kernel\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  isFullScreen: boolean\n  element: ImageListProto\n  height?: number\n}\n\nenum WidthBehavior {\n  OriginalWidth = -1,\n  ColumnWidth = -2,\n  AutoWidth = -3,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nexport function ImageList({\n  width,\n  isFullScreen,\n  element,\n  height,\n  endpoints,\n}: ImageListProps): ReactElement {\n  const images = useStliteImageList(element.imgs)\n\n  // The width field in the proto sets the image width, but has special\n  // cases for -1, -2, and -3.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    protoWidth === WidthBehavior.OriginalWidth ||\n    protoWidth === WidthBehavior.AutoWidth\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (protoWidth === WidthBehavior.ColumnWidth) {\n    // Use the column width\n    containerWidth = width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: any = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle[\"object-fit\"] = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n\n    if (protoWidth === WidthBehavior.AutoWidth) {\n      // Cap the image width, so it doesn't exceed the column width\n      imgStyle.maxWidth = \"100%\"\n    }\n  }\n\n  return (\n    <StyledImageList style={{ width }}>\n      {images.map((iimage: IImage, idx: number): ReactElement => {\n        const image = iimage as ImageProto\n        return (\n          <StyledImageContainer key={idx} data-testid=\"stImage\">\n            <img\n              style={imgStyle}\n              src={endpoints.buildMediaURL(image.url)}\n              alt={idx.toString()}\n            />\n            {image.caption && (\n              <StyledCaption data-testid=\"stImageCaption\" style={imgStyle}>\n                {` ${image.caption} `}\n              </StyledCaption>\n            )}\n          </StyledImageContainer>\n        )\n      })}\n    </StyledImageList>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n"],"names":["StyledImageList","_styled","target","_ref","theme","display","flexDirection","flexWrap","rowGap","spacing","lg","StyledImageContainer","alignItems","width","flexGrow","StyledCaption","_ref2","fontFamily","genericFonts","bodyFont","fontSize","fontSizes","sm","color","colors","fadedText60","textAlign","marginTop","xs","wordWrap","padding","WidthBehavior","withFullScreenWrapper","isFullScreen","element","height","endpoints","images","useStliteImageList","imgs","containerWidth","protoWidth","OriginalWidth","AutoWidth","undefined","ColumnWidth","Error","concat","imgStyle","maxHeight","maxWidth","_jsx","style","children","map","iimage","idx","image","_jsxs","src","buildMediaURL","url","alt","toString","caption"],"sourceRoot":""}