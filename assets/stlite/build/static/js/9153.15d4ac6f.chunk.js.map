{"version":3,"file":"static/js/9153.15d4ac6f.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Multiselect/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/Multiselect/Multiselect.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledUISelect = styled.div(({ theme }) => ({\n  \"span[aria-disabled='true']\": {\n    background: theme.colors.fadedText05,\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { isMobile } from \"react-device-detect\"\nimport without from \"lodash/without\"\nimport { withTheme } from \"@emotion/react\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { MultiSelect as MultiSelectProto } from \"@streamlit/lib/src/proto\"\nimport { ChevronDown } from \"baseui/icon\"\nimport {\n  TYPE,\n  Select as UISelect,\n  Option,\n  OnChangeParams,\n} from \"baseui/select\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { StyledUISelect } from \"@streamlit/lib/src/components/widgets/Multiselect/styled-components\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport { VirtualDropdown } from \"@streamlit/lib/src/components/shared/Dropdown\"\nimport { fuzzyFilterSelectOptions } from \"@streamlit/lib/src/components/shared/Dropdown/Selectbox\"\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface Props {\n  disabled: boolean\n  element: MultiSelectProto\n  theme: EmotionTheme\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI.\n   */\n  value: number[]\n}\n\ninterface MultiselectOption {\n  label: string\n  value: string\n}\n\nclass Multiselect extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  private overMaxSelections(): boolean {\n    return (\n      this.props.element.maxSelections > 0 &&\n      this.state.value.length >= this.props.element.maxSelections\n    )\n  }\n\n  private getNoResultsMsg(): string {\n    const { maxSelections } = this.props.element\n    const { value } = this.state\n\n    if (maxSelections === 0) {\n      return \"No results\"\n    } else if (value.length === maxSelections) {\n      const option = maxSelections !== 1 ? \"options\" : \"option\"\n      return `You can only select up to ${maxSelections} ${option}. Remove an option first.`\n    }\n    return \"No results\"\n  }\n\n  get initialValue(): number[] {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntArrayValue(\n      this.props.element\n    )\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setIntArrayValue(element, this.state.value, source, fragmentId)\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private get valueFromState(): MultiselectOption[] {\n    return this.state.value.map(i => {\n      const label = this.props.element.options[i]\n      return { value: i.toString(), label }\n    })\n  }\n\n  private generateNewState(data: OnChangeParams): State {\n    const getIndex = (): number => {\n      const valueId = data.option?.value\n      return parseInt(valueId, 10)\n    }\n\n    switch (data.type) {\n      case \"remove\": {\n        return {\n          value: without(this.state.value, getIndex()),\n        }\n      }\n      case \"clear\": {\n        return { value: [] }\n      }\n      case \"select\": {\n        return {\n          value: this.state.value.concat([getIndex()]),\n        }\n      }\n      default: {\n        throw new Error(`State transition is unknown: ${data.type}`)\n      }\n    }\n  }\n\n  private onChange = (params: OnChangeParams): void => {\n    if (\n      this.props.element.maxSelections &&\n      params.type === \"select\" &&\n      this.state.value.length >= this.props.element.maxSelections\n    ) {\n      return\n    }\n    this.setState(this.generateNewState(params), () => {\n      this.commitWidgetValue({ fromUi: true })\n    })\n  }\n\n  private filterOptions = (\n    options: readonly Option[],\n    filterValue: string\n  ): readonly Option[] => {\n    if (this.overMaxSelections()) {\n      return []\n    }\n    // We need to manually filter for previously selected options here\n    const unselectedOptions = options.filter(\n      option => !this.state.value.includes(Number(option.value))\n    )\n\n    return fuzzyFilterSelectOptions(\n      unselectedOptions as MultiselectOption[],\n      filterValue\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { element, theme, width, widgetMgr } = this.props\n    const style = { width }\n    const { options } = element\n    const disabled = options.length === 0 ? true : this.props.disabled\n    const placeholder =\n      options.length === 0 ? \"No options to select.\" : element.placeholder\n    const selectOptions: MultiselectOption[] = options.map(\n      (option: string, idx: number) => {\n        return {\n          label: option,\n          value: idx.toString(),\n        }\n      }\n    )\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // Check if we have more than 10 options in the selectbox.\n    // If that's true, we show the keyboard on mobile. If not, we hide it.\n    const showKeyboardOnMobile = options.length > 10\n\n    return (\n      <div\n        className=\"row-widget stMultiSelect\"\n        data-testid=\"stMultiSelect\"\n        style={style}\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <StyledUISelect>\n          <UISelect\n            options={selectOptions}\n            labelKey=\"label\"\n            valueKey=\"value\"\n            aria-label={element.label}\n            placeholder={placeholder}\n            type={TYPE.select}\n            multi\n            onChange={this.onChange}\n            value={this.valueFromState}\n            disabled={disabled}\n            size={\"compact\"}\n            noResultsMsg={this.getNoResultsMsg()}\n            filterOptions={this.filterOptions}\n            closeOnSelect={false}\n            overrides={{\n              SelectArrow: {\n                component: ChevronDown,\n\n                props: {\n                  overrides: {\n                    Svg: {\n                      style: () => ({\n                        width: theme.iconSizes.xl,\n                        height: theme.iconSizes.xl,\n                      }),\n                    },\n                  },\n                },\n              },\n\n              IconsContainer: {\n                style: () => ({\n                  paddingRight: theme.spacing.sm,\n                }),\n              },\n              ControlContainer: {\n                style: {\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  borderLeftWidth: \"1px\",\n                  borderRightWidth: \"1px\",\n                  borderTopWidth: \"1px\",\n                  borderBottomWidth: \"1px\",\n                },\n              },\n              Placeholder: {\n                style: () => ({\n                  flex: \"inherit\",\n                }),\n              },\n              ValueContainer: {\n                style: () => ({\n                  /*\n                    This minHeight is needed to fix a bug from BaseWeb in which the\n                    div that contains the options changes their height from 40px to 44px.\n\n                    You could check this behavior in their documentation as well:\n                    https://v8-17-1.baseweb.design/components/select/#select-as-multi-pick-search\n\n                    Issue related: https://github.com/streamlit/streamlit/issues/590\n                  */\n                  minHeight: \"38.4px\",\n                  paddingLeft: theme.spacing.sm,\n                  paddingTop: 0,\n                  paddingBottom: 0,\n                  paddingRight: 0,\n                }),\n              },\n              ClearIcon: {\n                props: {\n                  overrides: {\n                    Svg: {\n                      style: {\n                        color: theme.colors.darkGray,\n                        // Since the close icon is an SVG, and we can't control its viewbox nor its attributes,\n                        // Let's use a scale transform effect to make it bigger.\n                        // The width property only enlarges its bounding box, so it's easier to click.\n                        transform: \"scale(1.5)\",\n                        width: theme.spacing.twoXL,\n\n                        \":hover\": {\n                          fill: theme.colors.bodyText,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n              SearchIcon: {\n                style: {\n                  color: theme.colors.darkGray,\n                },\n              },\n              Tag: {\n                props: {\n                  overrides: {\n                    Root: {\n                      style: {\n                        borderTopLeftRadius: theme.radii.md,\n                        borderTopRightRadius: theme.radii.md,\n                        borderBottomRightRadius: theme.radii.md,\n                        borderBottomLeftRadius: theme.radii.md,\n                        fontSize: theme.fontSizes.sm,\n                        paddingLeft: theme.spacing.sm,\n                        marginLeft: 0,\n                        marginRight: theme.spacing.sm,\n                        height: \"28px\",\n                      },\n                    },\n                    Action: {\n                      style: {\n                        paddingLeft: 0,\n                      },\n                    },\n                    ActionIcon: {\n                      props: {\n                        overrides: {\n                          Svg: {\n                            style: {\n                              width: \"10px\",\n                              height: \"10px\",\n                            },\n                          },\n                        },\n                      },\n                    },\n                    Text: {\n                      style: {\n                        fontSize: theme.fontSizes.md,\n                      },\n                    },\n                  },\n                },\n              },\n              MultiValue: {\n                props: {\n                  overrides: {\n                    Root: {\n                      style: {\n                        fontSize: theme.fontSizes.sm,\n                      },\n                    },\n                  },\n                },\n              },\n              Input: {\n                props: {\n                  // Change the 'readonly' prop to hide the mobile keyboard if options < 10\n                  readOnly:\n                    isMobile && showKeyboardOnMobile === false\n                      ? \"readonly\"\n                      : null,\n                },\n              },\n              Dropdown: { component: VirtualDropdown },\n            }}\n          />\n        </StyledUISelect>\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Multiselect)\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","StyledUISelect","_styled","target","_ref","theme","background","colors","fadedText05","Multiselect","React","arguments","formClearHelper","state","value","initialValue","commitWidgetValue","source","element","fragmentId","props","setIntArrayValue","onFormCleared","setState","_","prevProps","default","fromUi","onChange","params","maxSelections","type","length","generateNewState","filterOptions","options","filterValue","overMaxSelections","unselectedOptions","filter","option","includes","Number","fuzzyFilterSelectOptions","getNoResultsMsg","concat","storedValue","getIntArrayValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","valueFromState","map","i","label","toString","data","getIndex","_data$option","valueId","parseInt","without","Error","render","_element$labelVisibil","width","style","disabled","placeholder","selectOptions","idx","showKeyboardOnMobile","_jsxs","className","children","_jsx","WidgetLabel","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","UISelect","labelKey","valueKey","TYPE","multi","size","noResultsMsg","closeOnSelect","overrides","SelectArrow","component","ChevronDown","Svg","iconSizes","xl","height","IconsContainer","paddingRight","spacing","sm","ControlContainer","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","Placeholder","flex","ValueContainer","minHeight","paddingLeft","paddingTop","paddingBottom","ClearIcon","color","darkGray","transform","twoXL","fill","bodyText","SearchIcon","Tag","Root","borderTopLeftRadius","radii","md","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","fontSize","fontSizes","marginLeft","marginRight","Action","ActionIcon","Text","MultiValue","Input","readOnly","isMobile","Dropdown","VirtualDropdown","withTheme"],"sourceRoot":""}