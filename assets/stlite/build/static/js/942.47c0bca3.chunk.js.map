{"version":3,"file":"static/js/942.47c0bca3.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/CustomTheme.tsx","../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/PlotlyChart.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport merge from \"lodash/merge\"\n\nimport {\n  getDecreasingRed,\n  getGray30,\n  getGray70,\n  getGray90,\n  getIncreasingGreen,\n  hasLightBackgroundColor,\n  EmotionTheme,\n  getSequentialColorsArray,\n  getCategoricalColorsArray,\n  getDivergingColorsArray,\n} from \"@streamlit/lib/src/theme\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\n\n/**\n * This applies general layout changes to things such as x axis,\n * y axis, legends, titles, grid changes, background, etc.\n * @param layout - spec.layout.template.layout\n * @param theme - Theme from useTheme()\n */\nexport function applyStreamlitThemeTemplateLayout(\n  layout: any,\n  theme: EmotionTheme\n): void {\n  const { genericFonts, colors, fontSizes } = theme\n\n  const streamlitTheme = {\n    font: {\n      color: getGray70(theme),\n      family: genericFonts.bodyFont,\n      size: fontSizes.twoSmPx,\n    },\n    title: {\n      color: colors.headingColor,\n      subtitleColor: colors.bodyText,\n      font: {\n        family: genericFonts.headingFont,\n        size: fontSizes.mdPx,\n        color: colors.headingColor,\n      },\n      pad: {\n        l: theme.spacing.twoXSPx,\n      },\n      xanchor: \"left\",\n      x: 0,\n    },\n    legend: {\n      title: {\n        font: {\n          size: fontSizes.twoSmPx,\n          color: getGray70(theme),\n        },\n        side: \"top\",\n      },\n      valign: \"top\",\n      bordercolor: colors.transparent,\n      borderwidth: theme.spacing.nonePx,\n      font: {\n        size: fontSizes.twoSmPx,\n        color: getGray90(theme),\n      },\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.bgColor,\n    yaxis: {\n      ticklabelposition: \"outside\",\n      zerolinecolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.twoXLPx,\n      },\n      tickcolor: getGray30(theme),\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      gridcolor: getGray30(theme),\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      automargin: true,\n    },\n    xaxis: {\n      zerolinecolor: getGray30(theme),\n      gridcolor: getGray30(theme),\n      showgrid: false,\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      tickcolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.xlPx,\n      },\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      zeroline: false,\n      automargin: true,\n      rangeselector: {\n        bgcolor: colors.bgColor,\n        bordercolor: getGray30(theme),\n        borderwidth: 1,\n        x: 0,\n      },\n    },\n    margin: {\n      pad: theme.spacing.smPx,\n      r: theme.spacing.nonePx,\n      l: theme.spacing.nonePx,\n    },\n    hoverlabel: {\n      bgcolor: colors.bgColor,\n      bordercolor: colors.fadedText10,\n      font: {\n        color: getGray70(theme),\n        family: genericFonts.bodyFont,\n        size: fontSizes.twoSmPx,\n      },\n    },\n    coloraxis: {\n      colorbar: {\n        thickness: 16,\n        xpad: theme.spacing.twoXLPx,\n        ticklabelposition: \"outside\",\n        outlinecolor: colors.transparent,\n        outlinewidth: 8,\n        len: 0.75,\n        y: 0.5745,\n        title: {\n          font: {\n            color: getGray70(theme),\n            size: fontSizes.smPx,\n          },\n        },\n        tickfont: {\n          color: getGray70(theme),\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n    // specifically for the ternary graph\n    ternary: {\n      gridcolor: getGray70(theme),\n      bgcolor: colors.bgColor,\n      title: {\n        font: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.smPx,\n        },\n      },\n      color: getGray70(theme),\n      aaxis: {\n        gridcolor: getGray70(theme),\n        linecolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      baxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      caxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n  }\n\n  merge(layout, streamlitTheme)\n}\n\n/**\n * Replace the colors that we are using from streamlit_plotly_theme.py.\n * This is done so that we change colors based on the background color\n * as the backend has no idea of the background color.\n * @param spec the spec that we want to update\n * @param theme\n * @param elementTheme element.theme\n * @returns the updated spec with the correct theme colors\n */\nfunction replaceCategoricalColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const CATEGORY_0 = \"#000001\"\n  const CATEGORY_1 = \"#000002\"\n  const CATEGORY_2 = \"#000003\"\n  const CATEGORY_3 = \"#000004\"\n  const CATEGORY_4 = \"#000005\"\n  const CATEGORY_5 = \"#000006\"\n  const CATEGORY_6 = \"#000007\"\n  const CATEGORY_7 = \"#000008\"\n  const CATEGORY_8 = \"#000009\"\n  const CATEGORY_9 = \"#000010\"\n\n  if (elementTheme === \"streamlit\") {\n    const categoryColors = getCategoricalColorsArray(theme)\n    spec = spec.replaceAll(CATEGORY_0, categoryColors[0])\n    spec = spec.replaceAll(CATEGORY_1, categoryColors[1])\n    spec = spec.replaceAll(CATEGORY_2, categoryColors[2])\n    spec = spec.replaceAll(CATEGORY_3, categoryColors[3])\n    spec = spec.replaceAll(CATEGORY_4, categoryColors[4])\n    spec = spec.replaceAll(CATEGORY_5, categoryColors[5])\n    spec = spec.replaceAll(CATEGORY_6, categoryColors[6])\n    spec = spec.replaceAll(CATEGORY_7, categoryColors[7])\n    spec = spec.replaceAll(CATEGORY_8, categoryColors[8])\n    spec = spec.replaceAll(CATEGORY_9, categoryColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(CATEGORY_0, \"#636efa\")\n    spec = spec.replaceAll(CATEGORY_1, \"#EF553B\")\n    spec = spec.replaceAll(CATEGORY_2, \"#00cc96\")\n    spec = spec.replaceAll(CATEGORY_3, \"#ab63fa\")\n    spec = spec.replaceAll(CATEGORY_4, \"#FFA15A\")\n    spec = spec.replaceAll(CATEGORY_5, \"#19d3f3\")\n    spec = spec.replaceAll(CATEGORY_6, \"#FF6692\")\n    spec = spec.replaceAll(CATEGORY_7, \"#B6E880\")\n    spec = spec.replaceAll(CATEGORY_8, \"#FF97FF\")\n    spec = spec.replaceAll(CATEGORY_9, \"#FECB52\")\n  }\n  return spec\n}\n\nfunction replaceSequentialColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const SEQUENTIAL_0 = \"#000011\"\n  const SEQUENTIAL_1 = \"#000012\"\n  const SEQUENTIAL_2 = \"#000013\"\n  const SEQUENTIAL_3 = \"#000014\"\n  const SEQUENTIAL_4 = \"#000015\"\n  const SEQUENTIAL_5 = \"#000016\"\n  const SEQUENTIAL_6 = \"#000017\"\n  const SEQUENTIAL_7 = \"#000018\"\n  const SEQUENTIAL_8 = \"#000019\"\n  const SEQUENTIAL_9 = \"#000020\"\n\n  if (elementTheme === \"streamlit\") {\n    const sequentialColors = getSequentialColorsArray(theme)\n    spec = spec.replaceAll(SEQUENTIAL_0, sequentialColors[0])\n    spec = spec.replaceAll(SEQUENTIAL_1, sequentialColors[1])\n    spec = spec.replaceAll(SEQUENTIAL_2, sequentialColors[2])\n    spec = spec.replaceAll(SEQUENTIAL_3, sequentialColors[3])\n    spec = spec.replaceAll(SEQUENTIAL_4, sequentialColors[4])\n    spec = spec.replaceAll(SEQUENTIAL_5, sequentialColors[5])\n    spec = spec.replaceAll(SEQUENTIAL_6, sequentialColors[6])\n    spec = spec.replaceAll(SEQUENTIAL_7, sequentialColors[7])\n    spec = spec.replaceAll(SEQUENTIAL_8, sequentialColors[8])\n    spec = spec.replaceAll(SEQUENTIAL_9, sequentialColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(SEQUENTIAL_0, \"#0d0887\")\n    spec = spec.replaceAll(SEQUENTIAL_1, \"#46039f\")\n    spec = spec.replaceAll(SEQUENTIAL_2, \"#7201a8\")\n    spec = spec.replaceAll(SEQUENTIAL_3, \"#9c179e\")\n    spec = spec.replaceAll(SEQUENTIAL_4, \"#bd3786\")\n    spec = spec.replaceAll(SEQUENTIAL_5, \"#d8576b\")\n    spec = spec.replaceAll(SEQUENTIAL_6, \"#ed7953\")\n    spec = spec.replaceAll(SEQUENTIAL_7, \"#fb9f3a\")\n    spec = spec.replaceAll(SEQUENTIAL_8, \"#fdca26\")\n    spec = spec.replaceAll(SEQUENTIAL_9, \"#f0f921\")\n  }\n  return spec\n}\n\nfunction replaceDivergingColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const DIVERGING_0 = \"#000021\"\n  const DIVERGING_1 = \"#000022\"\n  const DIVERGING_2 = \"#000023\"\n  const DIVERGING_3 = \"#000024\"\n  const DIVERGING_4 = \"#000025\"\n  const DIVERGING_5 = \"#000026\"\n  const DIVERGING_6 = \"#000027\"\n  const DIVERGING_7 = \"#000028\"\n  const DIVERGING_8 = \"#000029\"\n  const DIVERGING_9 = \"#000030\"\n  const DIVERGING_10 = \"#000031\"\n\n  if (elementTheme === \"streamlit\") {\n    const divergingColors = getDivergingColorsArray(theme)\n    spec = spec.replaceAll(DIVERGING_0, divergingColors[0])\n    spec = spec.replaceAll(DIVERGING_1, divergingColors[1])\n    spec = spec.replaceAll(DIVERGING_2, divergingColors[2])\n    spec = spec.replaceAll(DIVERGING_3, divergingColors[3])\n    spec = spec.replaceAll(DIVERGING_4, divergingColors[4])\n    spec = spec.replaceAll(DIVERGING_5, divergingColors[5])\n    spec = spec.replaceAll(DIVERGING_6, divergingColors[6])\n    spec = spec.replaceAll(DIVERGING_7, divergingColors[7])\n    spec = spec.replaceAll(DIVERGING_8, divergingColors[8])\n    spec = spec.replaceAll(DIVERGING_9, divergingColors[9])\n    spec = spec.replaceAll(DIVERGING_10, divergingColors[10])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(DIVERGING_0, \"#8e0152\")\n    spec = spec.replaceAll(DIVERGING_1, \"#c51b7d\")\n    spec = spec.replaceAll(DIVERGING_2, \"#de77ae\")\n    spec = spec.replaceAll(DIVERGING_3, \"#f1b6da\")\n    spec = spec.replaceAll(DIVERGING_4, \"#fde0ef\")\n    spec = spec.replaceAll(DIVERGING_5, \"#f7f7f7\")\n    spec = spec.replaceAll(DIVERGING_6, \"#e6f5d0\")\n    spec = spec.replaceAll(DIVERGING_7, \"#b8e186\")\n    spec = spec.replaceAll(DIVERGING_8, \"#7fbc41\")\n    spec = spec.replaceAll(DIVERGING_9, \"#4d9221\")\n    spec = spec.replaceAll(DIVERGING_10, \"#276419\")\n  }\n  return spec\n}\n\n/**\n * Because Template.layout doesn't affect the go(plotly.graph_objects) graphs,\n * we use this method to specifically replace these graph properties.\n * */\nfunction replaceGOSpecificColors(spec: string, theme: EmotionTheme): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const INCREASING = \"#000032\"\n  const DECREASING = \"#000033\"\n  const TOTAL = \"#000034\"\n\n  const GRAY_30 = \"#000035\"\n  const GRAY_70 = \"#000036\"\n  const GRAY_90 = \"#000037\"\n  const BG_COLOR = \"#000038\"\n  const FADED_TEXT_05 = \"#000039\"\n  const BG_MIX = \"#000040\"\n\n  spec = spec.replaceAll(INCREASING, getIncreasingGreen(theme))\n  spec = spec.replaceAll(DECREASING, getDecreasingRed(theme))\n  spec = spec.replaceAll(\n    TOTAL,\n    hasLightBackgroundColor(theme) ? theme.colors.blue80 : theme.colors.blue40\n  )\n\n  spec = spec.replaceAll(GRAY_30, getGray30(theme))\n  spec = spec.replaceAll(GRAY_70, getGray70(theme))\n  spec = spec.replaceAll(GRAY_90, getGray90(theme))\n\n  spec = spec.replaceAll(BG_COLOR, theme.colors.bgColor)\n  spec = spec.replaceAll(FADED_TEXT_05, theme.colors.fadedText05)\n  spec = spec.replaceAll(BG_MIX, theme.colors.bgMix)\n  return spec\n}\n\nexport function replaceTemporaryColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  spec = replaceGOSpecificColors(spec, theme)\n  spec = replaceCategoricalColors(spec, theme, elementTheme)\n  spec = replaceSequentialColors(spec, theme, elementTheme)\n  spec = replaceDivergingColors(spec, theme, elementTheme)\n  return spec\n}\n\n/**\n * Applies the Streamlit theme by overriding properties in\n * spec.data, spec.layout.template.data, and spec.layout.template.layout\n * @param spec - spec\n */\nexport function applyStreamlitTheme(spec: any, theme: EmotionTheme): void {\n  try {\n    applyStreamlitThemeTemplateLayout(spec.layout.template.layout, theme)\n  } catch (e) {\n    const err = ensureError(e)\n    logError(err)\n  }\n  if (\"title\" in spec.layout) {\n    spec.layout.title = merge(spec.layout.title, {\n      text: `<b>${spec.layout.title.text}</b>`,\n    })\n  }\n}\n\n/**\n * Apply minimum changes to graph to fit streamlit\n * @param layout - spec.layout\n * @param theme - theme from useTheme()\n * @returns modified spec.layout\n */\nexport function layoutWithThemeDefaults(\n  layout: any,\n  theme: EmotionTheme\n): any {\n  const { colors, genericFonts } = theme\n\n  const themeDefaults = {\n    font: {\n      color: colors.bodyText,\n      family: genericFonts.bodyFont,\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.secondaryBg,\n  }\n\n  // Fill in theme defaults where the user didn't specify layout options.\n  return {\n    ...layout,\n    font: {\n      ...themeDefaults.font,\n      ...layout.font,\n    },\n    paper_bgcolor: layout.paper_bgcolor || themeDefaults.paper_bgcolor,\n    plot_bgcolor: layout.plot_bgcolor || themeDefaults.plot_bgcolor,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useLayoutEffect,\n  useState,\n} from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  Figure as FigureProto,\n  PlotlyChart as PlotlyChartProto,\n} from \"@streamlit/lib/src/proto\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport Plot from \"react-plotly.js\"\nimport {\n  applyStreamlitTheme,\n  layoutWithThemeDefaults,\n  replaceTemporaryColors,\n} from \"./CustomTheme\"\n\nexport interface PlotlyChartProps {\n  width: number\n  element: PlotlyChartProto\n  height: number | undefined\n}\n\nexport interface PlotlyIFrameProps {\n  width: number\n  height: number | undefined\n  url: string\n}\n\nexport const DEFAULT_HEIGHT = 450\n\nfunction isFullScreen(height: number | undefined): boolean {\n  return !!height\n}\n\n/** Render an iframed Plotly chart from a URL */\nfunction renderIFrame({\n  url,\n  width,\n  height: propHeight,\n}: PlotlyIFrameProps): ReactElement {\n  const height = propHeight || DEFAULT_HEIGHT\n  return (\n    <iframe\n      title=\"Plotly\"\n      src={url}\n      style={{ width, height, colorScheme: \"light dark\" }}\n    />\n  )\n}\n\n/** Render a Plotly chart from a FigureProto */\nfunction PlotlyFigure({\n  element,\n  width,\n  height,\n}: PlotlyChartProps): ReactElement {\n  const figure = element.figure as FigureProto\n\n  const theme: EmotionTheme = useTheme()\n\n  const generateSpec = useCallback((): any => {\n    const spec = JSON.parse(\n      replaceTemporaryColors(figure.spec, theme, element.theme)\n    )\n    const initialHeight = spec.layout.height\n    const initialWidth = spec.layout.width\n\n    if (isFullScreen(height)) {\n      spec.layout.width = width\n      spec.layout.height = height\n    } else if (element.useContainerWidth) {\n      spec.layout.width = width\n    } else {\n      spec.layout.width = initialWidth\n      spec.layout.height = initialHeight\n    }\n    if (element.theme === \"streamlit\") {\n      applyStreamlitTheme(spec, theme)\n    } else {\n      // Apply minor theming improvements to work better with Streamlit\n      spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n    }\n\n    return spec\n  }, [\n    element.theme,\n    element.useContainerWidth,\n    figure.spec,\n    height,\n    theme,\n    width,\n  ])\n\n  const [config, setConfig] = useState(JSON.parse(figure.config))\n  const [spec, setSpec] = useState(generateSpec())\n\n  // Update config and spec references iff the theme or props change\n  // Use useLayoutEffect to synchronize rerender by updating state\n  // More information: https://kentcdodds.com/blog/useeffect-vs-uselayouteffect\n  useLayoutEffect(() => {\n    setConfig(JSON.parse(figure.config))\n    setSpec(generateSpec())\n  }, [element, theme, height, width, figure.config, generateSpec])\n\n  const { data, layout, frames } = spec\n\n  return (\n    <Plot\n      key={isFullScreen(height) ? \"fullscreen\" : \"original\"}\n      className=\"stPlotlyChart\"\n      data={data}\n      layout={layout}\n      config={config}\n      frames={frames}\n    />\n  )\n}\n\nexport function PlotlyChart({\n  width,\n  element,\n  height,\n}: PlotlyChartProps): ReactElement {\n  switch (element.chart) {\n    case \"url\":\n      return renderIFrame({\n        url: element.url as string,\n        height,\n        width,\n      })\n    case \"figure\":\n      return <PlotlyFigure width={width} element={element} height={height} />\n    default:\n      throw new Error(`Unrecognized PlotlyChart type: ${element.chart}`)\n  }\n}\n\nexport default withFullScreenWrapper(PlotlyChart)\n"],"names":["replaceTemporaryColors","spec","theme","elementTheme","replaceAll","getIncreasingGreen","getDecreasingRed","hasLightBackgroundColor","colors","blue80","blue40","getGray30","getGray70","getGray90","bgColor","fadedText05","bgMix","replaceGOSpecificColors","CATEGORY_0","CATEGORY_1","CATEGORY_2","CATEGORY_3","CATEGORY_4","CATEGORY_5","CATEGORY_6","CATEGORY_7","CATEGORY_8","CATEGORY_9","categoryColors","getCategoricalColorsArray","replaceCategoricalColors","SEQUENTIAL_0","SEQUENTIAL_1","SEQUENTIAL_2","SEQUENTIAL_3","SEQUENTIAL_4","SEQUENTIAL_5","SEQUENTIAL_6","SEQUENTIAL_7","SEQUENTIAL_8","SEQUENTIAL_9","sequentialColors","getSequentialColorsArray","replaceSequentialColors","DIVERGING_0","DIVERGING_1","DIVERGING_2","DIVERGING_3","DIVERGING_4","DIVERGING_5","DIVERGING_6","DIVERGING_7","DIVERGING_8","DIVERGING_9","DIVERGING_10","divergingColors","getDivergingColorsArray","replaceDivergingColors","applyStreamlitTheme","layout","genericFonts","fontSizes","streamlitTheme","font","color","family","bodyFont","size","twoSmPx","title","headingColor","subtitleColor","bodyText","headingFont","mdPx","pad","l","spacing","twoXSPx","xanchor","x","legend","side","valign","bordercolor","transparent","borderwidth","nonePx","paper_bgcolor","plot_bgcolor","yaxis","ticklabelposition","zerolinecolor","smPx","standoff","twoXLPx","tickcolor","tickfont","gridcolor","minor","automargin","xaxis","showgrid","xlPx","zeroline","rangeselector","bgcolor","margin","r","hoverlabel","fadedText10","coloraxis","colorbar","thickness","xpad","outlinecolor","outlinewidth","len","y","ternary","aaxis","linecolor","baxis","caxis","merge","applyStreamlitThemeTemplateLayout","template","e","err","ensureError","logError","text","concat","DEFAULT_HEIGHT","isFullScreen","height","PlotlyFigure","_ref2","element","width","figure","useTheme","generateSpec","useCallback","JSON","parse","initialHeight","initialWidth","useContainerWidth","themeDefaults","secondaryBg","layoutWithThemeDefaults","config","setConfig","useState","setSpec","useLayoutEffect","data","frames","_jsx","Plot","className","withFullScreenWrapper","_ref3","chart","_ref","url","propHeight","src","style","colorScheme","renderIFrame","Error"],"sourceRoot":""}