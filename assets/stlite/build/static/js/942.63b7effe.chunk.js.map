{"version":3,"file":"static/js/942.63b7effe.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/CustomTheme.tsx","../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/PlotlyChart.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/FullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport merge from \"lodash/merge\"\n\nimport {\n  getDecreasingRed,\n  getGray30,\n  getGray70,\n  getGray90,\n  getIncreasingGreen,\n  hasLightBackgroundColor,\n  EmotionTheme,\n  getSequentialColorsArray,\n  getCategoricalColorsArray,\n  getDivergingColorsArray,\n} from \"@streamlit/lib/src/theme\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\n\n/**\n * This applies general layout changes to things such as x axis,\n * y axis, legends, titles, grid changes, background, etc.\n * @param layout - spec.layout.template.layout\n * @param theme - Theme from useTheme()\n */\nexport function applyStreamlitThemeTemplateLayout(\n  layout: any,\n  theme: EmotionTheme\n): void {\n  const { genericFonts, colors, fontSizes } = theme\n\n  const streamlitTheme = {\n    font: {\n      color: getGray70(theme),\n      family: genericFonts.bodyFont,\n      size: fontSizes.twoSmPx,\n    },\n    title: {\n      color: colors.headingColor,\n      subtitleColor: colors.bodyText,\n      font: {\n        family: genericFonts.headingFont,\n        size: fontSizes.mdPx,\n        color: colors.headingColor,\n      },\n      pad: {\n        l: theme.spacing.twoXSPx,\n      },\n      xanchor: \"left\",\n      x: 0,\n    },\n    legend: {\n      title: {\n        font: {\n          size: fontSizes.twoSmPx,\n          color: getGray70(theme),\n        },\n        side: \"top\",\n      },\n      valign: \"top\",\n      bordercolor: colors.transparent,\n      borderwidth: theme.spacing.nonePx,\n      font: {\n        size: fontSizes.twoSmPx,\n        color: getGray90(theme),\n      },\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.bgColor,\n    yaxis: {\n      ticklabelposition: \"outside\",\n      zerolinecolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.twoXLPx,\n      },\n      tickcolor: getGray30(theme),\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      gridcolor: getGray30(theme),\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      automargin: true,\n    },\n    xaxis: {\n      zerolinecolor: getGray30(theme),\n      gridcolor: getGray30(theme),\n      showgrid: false,\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      tickcolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.xlPx,\n      },\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      zeroline: false,\n      automargin: true,\n      rangeselector: {\n        bgcolor: colors.bgColor,\n        bordercolor: getGray30(theme),\n        borderwidth: 1,\n        x: 0,\n      },\n    },\n    margin: {\n      pad: theme.spacing.smPx,\n      r: theme.spacing.nonePx,\n      l: theme.spacing.nonePx,\n    },\n    hoverlabel: {\n      bgcolor: colors.bgColor,\n      bordercolor: colors.fadedText10,\n      font: {\n        color: getGray70(theme),\n        family: genericFonts.bodyFont,\n        size: fontSizes.twoSmPx,\n      },\n    },\n    coloraxis: {\n      colorbar: {\n        thickness: 16,\n        xpad: theme.spacing.twoXLPx,\n        ticklabelposition: \"outside\",\n        outlinecolor: colors.transparent,\n        outlinewidth: 8,\n        len: 0.75,\n        y: 0.5745,\n        title: {\n          font: {\n            color: getGray70(theme),\n            size: fontSizes.smPx,\n          },\n        },\n        tickfont: {\n          color: getGray70(theme),\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n    // specifically for the ternary graph\n    ternary: {\n      gridcolor: getGray70(theme),\n      bgcolor: colors.bgColor,\n      title: {\n        font: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.smPx,\n        },\n      },\n      color: getGray70(theme),\n      aaxis: {\n        gridcolor: getGray70(theme),\n        linecolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      baxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      caxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n  }\n\n  merge(layout, streamlitTheme)\n}\n\n/**\n * Replace the colors that we are using from streamlit_plotly_theme.py.\n * This is done so that we change colors based on the background color\n * as the backend has no idea of the background color.\n * @param spec the spec that we want to update\n * @param theme\n * @param elementTheme element.theme\n * @returns the updated spec with the correct theme colors\n */\nfunction replaceCategoricalColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const CATEGORY_0 = \"#000001\"\n  const CATEGORY_1 = \"#000002\"\n  const CATEGORY_2 = \"#000003\"\n  const CATEGORY_3 = \"#000004\"\n  const CATEGORY_4 = \"#000005\"\n  const CATEGORY_5 = \"#000006\"\n  const CATEGORY_6 = \"#000007\"\n  const CATEGORY_7 = \"#000008\"\n  const CATEGORY_8 = \"#000009\"\n  const CATEGORY_9 = \"#000010\"\n\n  if (elementTheme === \"streamlit\") {\n    const categoryColors = getCategoricalColorsArray(theme)\n    spec = spec.replaceAll(CATEGORY_0, categoryColors[0])\n    spec = spec.replaceAll(CATEGORY_1, categoryColors[1])\n    spec = spec.replaceAll(CATEGORY_2, categoryColors[2])\n    spec = spec.replaceAll(CATEGORY_3, categoryColors[3])\n    spec = spec.replaceAll(CATEGORY_4, categoryColors[4])\n    spec = spec.replaceAll(CATEGORY_5, categoryColors[5])\n    spec = spec.replaceAll(CATEGORY_6, categoryColors[6])\n    spec = spec.replaceAll(CATEGORY_7, categoryColors[7])\n    spec = spec.replaceAll(CATEGORY_8, categoryColors[8])\n    spec = spec.replaceAll(CATEGORY_9, categoryColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(CATEGORY_0, \"#636efa\")\n    spec = spec.replaceAll(CATEGORY_1, \"#EF553B\")\n    spec = spec.replaceAll(CATEGORY_2, \"#00cc96\")\n    spec = spec.replaceAll(CATEGORY_3, \"#ab63fa\")\n    spec = spec.replaceAll(CATEGORY_4, \"#FFA15A\")\n    spec = spec.replaceAll(CATEGORY_5, \"#19d3f3\")\n    spec = spec.replaceAll(CATEGORY_6, \"#FF6692\")\n    spec = spec.replaceAll(CATEGORY_7, \"#B6E880\")\n    spec = spec.replaceAll(CATEGORY_8, \"#FF97FF\")\n    spec = spec.replaceAll(CATEGORY_9, \"#FECB52\")\n  }\n  return spec\n}\n\nfunction replaceSequentialColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const SEQUENTIAL_0 = \"#000011\"\n  const SEQUENTIAL_1 = \"#000012\"\n  const SEQUENTIAL_2 = \"#000013\"\n  const SEQUENTIAL_3 = \"#000014\"\n  const SEQUENTIAL_4 = \"#000015\"\n  const SEQUENTIAL_5 = \"#000016\"\n  const SEQUENTIAL_6 = \"#000017\"\n  const SEQUENTIAL_7 = \"#000018\"\n  const SEQUENTIAL_8 = \"#000019\"\n  const SEQUENTIAL_9 = \"#000020\"\n\n  if (elementTheme === \"streamlit\") {\n    const sequentialColors = getSequentialColorsArray(theme)\n    spec = spec.replaceAll(SEQUENTIAL_0, sequentialColors[0])\n    spec = spec.replaceAll(SEQUENTIAL_1, sequentialColors[1])\n    spec = spec.replaceAll(SEQUENTIAL_2, sequentialColors[2])\n    spec = spec.replaceAll(SEQUENTIAL_3, sequentialColors[3])\n    spec = spec.replaceAll(SEQUENTIAL_4, sequentialColors[4])\n    spec = spec.replaceAll(SEQUENTIAL_5, sequentialColors[5])\n    spec = spec.replaceAll(SEQUENTIAL_6, sequentialColors[6])\n    spec = spec.replaceAll(SEQUENTIAL_7, sequentialColors[7])\n    spec = spec.replaceAll(SEQUENTIAL_8, sequentialColors[8])\n    spec = spec.replaceAll(SEQUENTIAL_9, sequentialColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(SEQUENTIAL_0, \"#0d0887\")\n    spec = spec.replaceAll(SEQUENTIAL_1, \"#46039f\")\n    spec = spec.replaceAll(SEQUENTIAL_2, \"#7201a8\")\n    spec = spec.replaceAll(SEQUENTIAL_3, \"#9c179e\")\n    spec = spec.replaceAll(SEQUENTIAL_4, \"#bd3786\")\n    spec = spec.replaceAll(SEQUENTIAL_5, \"#d8576b\")\n    spec = spec.replaceAll(SEQUENTIAL_6, \"#ed7953\")\n    spec = spec.replaceAll(SEQUENTIAL_7, \"#fb9f3a\")\n    spec = spec.replaceAll(SEQUENTIAL_8, \"#fdca26\")\n    spec = spec.replaceAll(SEQUENTIAL_9, \"#f0f921\")\n  }\n  return spec\n}\n\nfunction replaceDivergingColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const DIVERGING_0 = \"#000021\"\n  const DIVERGING_1 = \"#000022\"\n  const DIVERGING_2 = \"#000023\"\n  const DIVERGING_3 = \"#000024\"\n  const DIVERGING_4 = \"#000025\"\n  const DIVERGING_5 = \"#000026\"\n  const DIVERGING_6 = \"#000027\"\n  const DIVERGING_7 = \"#000028\"\n  const DIVERGING_8 = \"#000029\"\n  const DIVERGING_9 = \"#000030\"\n  const DIVERGING_10 = \"#000031\"\n\n  if (elementTheme === \"streamlit\") {\n    const divergingColors = getDivergingColorsArray(theme)\n    spec = spec.replaceAll(DIVERGING_0, divergingColors[0])\n    spec = spec.replaceAll(DIVERGING_1, divergingColors[1])\n    spec = spec.replaceAll(DIVERGING_2, divergingColors[2])\n    spec = spec.replaceAll(DIVERGING_3, divergingColors[3])\n    spec = spec.replaceAll(DIVERGING_4, divergingColors[4])\n    spec = spec.replaceAll(DIVERGING_5, divergingColors[5])\n    spec = spec.replaceAll(DIVERGING_6, divergingColors[6])\n    spec = spec.replaceAll(DIVERGING_7, divergingColors[7])\n    spec = spec.replaceAll(DIVERGING_8, divergingColors[8])\n    spec = spec.replaceAll(DIVERGING_9, divergingColors[9])\n    spec = spec.replaceAll(DIVERGING_10, divergingColors[10])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(DIVERGING_0, \"#8e0152\")\n    spec = spec.replaceAll(DIVERGING_1, \"#c51b7d\")\n    spec = spec.replaceAll(DIVERGING_2, \"#de77ae\")\n    spec = spec.replaceAll(DIVERGING_3, \"#f1b6da\")\n    spec = spec.replaceAll(DIVERGING_4, \"#fde0ef\")\n    spec = spec.replaceAll(DIVERGING_5, \"#f7f7f7\")\n    spec = spec.replaceAll(DIVERGING_6, \"#e6f5d0\")\n    spec = spec.replaceAll(DIVERGING_7, \"#b8e186\")\n    spec = spec.replaceAll(DIVERGING_8, \"#7fbc41\")\n    spec = spec.replaceAll(DIVERGING_9, \"#4d9221\")\n    spec = spec.replaceAll(DIVERGING_10, \"#276419\")\n  }\n  return spec\n}\n\n/**\n * Because Template.layout doesn't affect the go(plotly.graph_objects) graphs,\n * we use this method to specifically replace these graph properties.\n * */\nfunction replaceGOSpecificColors(spec: string, theme: EmotionTheme): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const INCREASING = \"#000032\"\n  const DECREASING = \"#000033\"\n  const TOTAL = \"#000034\"\n\n  const GRAY_30 = \"#000035\"\n  const GRAY_70 = \"#000036\"\n  const GRAY_90 = \"#000037\"\n  const BG_COLOR = \"#000038\"\n  const FADED_TEXT_05 = \"#000039\"\n  const BG_MIX = \"#000040\"\n\n  spec = spec.replaceAll(INCREASING, getIncreasingGreen(theme))\n  spec = spec.replaceAll(DECREASING, getDecreasingRed(theme))\n  spec = spec.replaceAll(\n    TOTAL,\n    hasLightBackgroundColor(theme) ? theme.colors.blue80 : theme.colors.blue40\n  )\n\n  spec = spec.replaceAll(GRAY_30, getGray30(theme))\n  spec = spec.replaceAll(GRAY_70, getGray70(theme))\n  spec = spec.replaceAll(GRAY_90, getGray90(theme))\n\n  spec = spec.replaceAll(BG_COLOR, theme.colors.bgColor)\n  spec = spec.replaceAll(FADED_TEXT_05, theme.colors.fadedText05)\n  spec = spec.replaceAll(BG_MIX, theme.colors.bgMix)\n  return spec\n}\n\nexport function replaceTemporaryColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  spec = replaceGOSpecificColors(spec, theme)\n  spec = replaceCategoricalColors(spec, theme, elementTheme)\n  spec = replaceSequentialColors(spec, theme, elementTheme)\n  spec = replaceDivergingColors(spec, theme, elementTheme)\n  return spec\n}\n\n/**\n * Applies the Streamlit theme by overriding properties in\n * spec.data, spec.layout.template.data, and spec.layout.template.layout\n * @param spec - spec\n */\nexport function applyStreamlitTheme(spec: any, theme: EmotionTheme): void {\n  try {\n    applyStreamlitThemeTemplateLayout(spec.layout.template.layout, theme)\n  } catch (e) {\n    const err = ensureError(e)\n    logError(err)\n  }\n  if (\"title\" in spec.layout) {\n    spec.layout.title = merge(spec.layout.title, {\n      text: `<b>${spec.layout.title.text}</b>`,\n    })\n  }\n}\n\n/**\n * Apply minimum changes to graph to fit streamlit\n * @param layout - spec.layout\n * @param theme - theme from useTheme()\n * @returns modified spec.layout\n */\nexport function layoutWithThemeDefaults(\n  layout: any,\n  theme: EmotionTheme\n): any {\n  const { colors, genericFonts } = theme\n\n  const themeDefaults = {\n    font: {\n      color: colors.bodyText,\n      family: genericFonts.bodyFont,\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.secondaryBg,\n  }\n\n  // Fill in theme defaults where the user didn't specify layout options.\n  return {\n    ...layout,\n    font: {\n      ...themeDefaults.font,\n      ...layout.font,\n    },\n    paper_bgcolor: layout.paper_bgcolor || themeDefaults.paper_bgcolor,\n    plot_bgcolor: layout.plot_bgcolor || themeDefaults.plot_bgcolor,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useState,\n  useCallback,\n  useMemo,\n  useEffect,\n} from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport Plot, { Figure as PlotlyFigureType } from \"react-plotly.js\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { PlotlyChart as PlotlyChartProto } from \"@streamlit/lib/src/proto\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  keysToSnakeCase,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form/FormClearHelper\"\n\nimport {\n  applyStreamlitTheme,\n  layoutWithThemeDefaults,\n  replaceTemporaryColors,\n} from \"./CustomTheme\"\n\n// Copied and Pasted from Plotly type def\nexport interface SelectionRange {\n  x: number[]\n  y: number[]\n}\n\nexport interface PlotlySelection extends SelectionRange {\n  xref: string\n  yref: string\n}\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code. Uses snake case to be compatible with the\n// Python naming conventions.\nexport interface PlotlyWidgetState {\n  selection: {\n    points: Array<any>\n    point_indices: number[]\n    box: PlotlySelection[]\n    lasso: PlotlySelection[]\n  }\n}\n\n// Minimum width for Plotly charts\nconst MIN_WIDTH = 150\n\n// Custom icon used in the fullscreen expand toolbar button:\nconst FULLSCREEN_EXPAND_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-expand\",\n  // https://fontawesome.com/icons/expand?f=classic&s=solid\n  path: \"M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z\",\n}\n\nconst FULLSCREEN_COLLAPSE_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-collapse\",\n  // https://fontawesome.com/icons/compress?f=classic&s=solid\n  path: \"M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V64zM32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zM352 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V64zM320 320c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z\",\n}\n\n/**\n * Parses an SVG path string into separate x and y coordinates.\n *\n * The function takes a single SVG path string as input. This path string should start with 'M'\n * (move to command), followed by pairs of x and y coordinates separated by commas, and optionally\n * end with 'Z' to close the path. Each pair of coordinates is separated by 'L' (line to command).\n *\n * Example Input:\n * \"M4.016412414518674,8.071685352641575L4.020620725933719,7.8197516509841165Z\"\n *\n * Example Output:\n * {\n *   x: [4.016412414518674, 4.020620725933719],\n *   y: [8.071685352641575, 7.8197516509841165]\n * }\n *\n * @param {string} pathData - The SVG path string to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseLassoPath(pathData: string): SelectionRange {\n  if (pathData === \"\") {\n    return {\n      x: [],\n      y: [],\n    }\n  }\n  const points = pathData.replace(\"M\", \"\").replace(\"Z\", \"\").split(\"L\")\n\n  const x: number[] = []\n  const y: number[] = []\n\n  points.forEach(point => {\n    const [xVal, yVal] = point.split(\",\").map(Number)\n    x.push(xVal)\n    y.push(yVal)\n  })\n\n  return { x, y }\n}\n\n/**\n * Parses a box selection object into separate x and y coordinates.\n *\n * The function takes a box selection object as input. This object should contain the following\n * fields: x0, x1, y0, y1. These fields represent the x and y coordinates of the box selection\n * in the plotly chart.\n *\n * Example Input:\n * {\n *   x0: 0.1,\n *   x1: 0.2,\n *   y0: 0.3,\n *   y1: 0.4\n * }\n *\n * Example Output:\n * {\n *   x: [0.1, 0.2],\n *   y: [0.3, 0.4]\n * }\n *\n * @param {Object} selection - The box selection object to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseBoxSelection(selection: any): SelectionRange {\n  const hasRequiredFields =\n    \"x0\" in selection &&\n    \"x1\" in selection &&\n    \"y0\" in selection &&\n    \"y1\" in selection\n\n  if (!hasRequiredFields) {\n    return { x: [], y: [] }\n  }\n\n  const x: number[] = [selection.x0, selection.x1]\n  const y: number[] = [selection.y0, selection.y1]\n  return { x, y }\n}\n\n/**\n * Apply theming to the Plotly figure.\n *\n * @param plotlyFigure The Plotly figure to apply theming to\n * @param chartTheme The theme of the chart (streamlit or empty string)\n * @param theme The current theme of the app\n * @returns The Plotly figure with theming applied\n */\nexport function applyTheming(\n  plotlyFigure: PlotlyFigureType,\n  chartTheme: string,\n  theme: EmotionTheme\n): PlotlyFigureType {\n  const spec = JSON.parse(\n    replaceTemporaryColors(JSON.stringify(plotlyFigure), theme, chartTheme)\n  )\n  if (chartTheme === \"streamlit\") {\n    applyStreamlitTheme(spec, theme)\n  } else {\n    // Apply minor theming improvements to work better with Streamlit\n    spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n  }\n  return spec\n}\n\n/**\n * Handles the selection event from Plotly and sends the selection state to the backend.\n * The selection state is sent as a stringified JSON object.\n *\n * @param event The Plotly selection event\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function handleSelection(\n  event: Readonly<Plotly.PlotSelectionEvent>,\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  if (!event) {\n    return\n  }\n\n  const selectionState: PlotlyWidgetState = {\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  // Use a set for point indices since all numbers should be unique:\n  const selectedPointIndices = new Set<number>()\n  const selectedBoxes: PlotlySelection[] = []\n  const selectedLassos: PlotlySelection[] = []\n  const selectedPoints: Array<any> = []\n\n  // event.selections doesn't show up in the PlotSelectionEvent\n  // @ts-expect-error\n  const { selections, points } = event\n\n  if (points) {\n    points.forEach(function (point: any) {\n      selectedPoints.push({\n        ...point,\n        legendgroup: point.data.legendgroup || undefined,\n        // Remove data and full data as they have been deemed to be unnecessary data overhead\n        data: undefined,\n        fullData: undefined,\n      })\n      if (notNullOrUndefined(point.pointIndex)) {\n        selectedPointIndices.add(point.pointIndex)\n      }\n\n      // If pointIndices is present (e.g. selection on histogram chart),\n      // add all of them to the set\n      if (\n        notNullOrUndefined(point.pointIndices) &&\n        point.pointIndices.length > 0\n      ) {\n        point.pointIndices.forEach((item: number) =>\n          selectedPointIndices.add(item)\n        )\n      }\n    })\n  }\n\n  if (selections) {\n    selections.forEach((selection: any) => {\n      // box selection\n      if (selection.type === \"rect\") {\n        const xAndy = parseBoxSelection(selection)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedBoxes.push(returnSelection)\n      }\n      // lasso selection\n      if (selection.type === \"path\") {\n        const xAndy = parseLassoPath(selection.path)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedLassos.push(returnSelection)\n      }\n    })\n  }\n\n  selectionState.selection.point_indices = Array.from(selectedPointIndices)\n  selectionState.selection.points = selectedPoints.map((point: any) =>\n    keysToSnakeCase(point)\n  )\n\n  selectionState.selection.box = selectedBoxes\n  selectionState.selection.lasso = selectedLassos\n\n  if (\n    selectionState.selection.box.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  ) {\n    // If box selection is not activated, we don't want\n    // to send any box selection related updates to the frontend\n    return\n  }\n\n  if (\n    selectionState.selection.lasso.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  ) {\n    // If lasso selection is not activated, we don't want\n    // to send any lasso selection related updates to the frontend\n    return\n  }\n\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(selectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\n/**\n * Sends an empty selection state to the backend.\n * This is used to reset the selection state in the widget.\n *\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function sendEmptySelection(\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  const emptySelectionState: PlotlyWidgetState = {\n    // We use snake case here since this is the widget state\n    // that is sent and used in the backend. Therefore, it should\n    // conform with the Python naming conventions.\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(emptySelectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\nexport interface PlotlyChartProps {\n  width: number\n  element: PlotlyChartProto\n  height?: number\n  widgetMgr: WidgetStateManager\n  disabled: boolean\n  fragmentId?: string\n  isFullScreen: boolean\n  expand?: () => void\n  collapse?: () => void\n  disableFullscreenMode?: boolean\n}\n\nexport function PlotlyChart({\n  element,\n  width,\n  height,\n  widgetMgr,\n  disabled,\n  fragmentId,\n  isFullScreen,\n  expand,\n  collapse,\n  disableFullscreenMode,\n}: Readonly<PlotlyChartProps>): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  // Load the initial figure spec from the element message\n  const initialFigureSpec = useMemo<PlotlyFigureType>(() => {\n    if (!element.spec) {\n      return {\n        layout: {},\n        data: [],\n        frames: undefined,\n      }\n    }\n\n    return JSON.parse(element.spec)\n    // We want to reload the initialFigureSpec object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [element.id, element.spec])\n\n  const [plotlyFigure, setPlotlyFigure] = useState<PlotlyFigureType>(() => {\n    // If there was already a state with a figure using the same id,\n    // use that to recover the state. This happens in some situations\n    // where a component un-mounts and mounts again.\n    const initialFigureState = widgetMgr.getElementState(element.id, \"figure\")\n    if (initialFigureState) {\n      return initialFigureState\n    }\n    return applyTheming(initialFigureSpec, element.theme, theme)\n  })\n\n  const isSelectionActivated = element.selectionMode.length > 0 && !disabled\n  const isLassoSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  const isBoxSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  const isPointsSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.POINTS)\n\n  const plotlyConfig = useMemo(() => {\n    if (!element.config) {\n      // If there is no config, return an empty object\n      return {}\n    }\n\n    const config = JSON.parse(element.config)\n\n    // Customize the plotly toolbar:\n    if (!disableFullscreenMode) {\n      // Add a fullscreen button to the plotly toolbar:\n      config.modeBarButtonsToAdd = [\n        {\n          name: isFullScreen ? \"Close fullscreen\" : \"Fullscreen\",\n          icon: isFullScreen\n            ? FULLSCREEN_COLLAPSE_ICON\n            : FULLSCREEN_EXPAND_ICON,\n          click: () => {\n            if (isFullScreen && collapse) {\n              collapse()\n            } else if (expand) {\n              expand()\n            }\n          },\n        },\n      ]\n    }\n\n    if (!config.modeBarButtonsToRemove) {\n      // Only modify the mode bar buttons if it's not already set\n      // in the config provided by the user.\n\n      // Hide the logo by default\n      config.displaylogo = false\n\n      const modeBarButtonsToRemove = [\"sendDataToCloud\"]\n\n      if (!isSelectionActivated) {\n        // Remove lasso & select buttons in read-only charts:\n        modeBarButtonsToRemove.push(\"lasso2d\", \"select2d\")\n      } else {\n        if (!isLassoSelectionActivated) {\n          // Remove the lasso button if lasso selection is not activated\n          modeBarButtonsToRemove.push(\"lasso2d\")\n        }\n\n        if (!isBoxSelectionActivated) {\n          // Remove the box select button if box selection is not activated\n          modeBarButtonsToRemove.push(\"select2d\")\n        }\n      }\n\n      config.modeBarButtonsToRemove = modeBarButtonsToRemove\n    }\n    return config\n    // We want to reload the plotlyConfig object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    element.config,\n    isFullScreen,\n    disableFullscreenMode,\n    isSelectionActivated,\n    isLassoSelectionActivated,\n    isBoxSelectionActivated,\n    collapse,\n    expand,\n  ])\n\n  useEffect(() => {\n    // If the theme changes, we need to reapply the theming to the figure\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      return applyTheming(prevState, element.theme, theme)\n    })\n  }, [element.id, theme, element.theme])\n\n  useEffect(() => {\n    let updatedClickMode: typeof initialFigureSpec.layout.clickmode =\n      initialFigureSpec.layout.clickmode\n    let updatedHoverMode: typeof initialFigureSpec.layout.hovermode =\n      initialFigureSpec.layout.hovermode\n    let updatedDragMode: typeof initialFigureSpec.layout.dragmode =\n      initialFigureSpec.layout.dragmode\n\n    if (disabled) {\n      updatedClickMode = \"none\"\n      updatedDragMode = \"pan\"\n    } else if (isSelectionActivated) {\n      if (!initialFigureSpec.layout.clickmode) {\n        // If the user has already set the clickmode, we don't want to override it here.\n        // Otherwise, we are selecting the best clickmode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // https://plotly.com/javascript/reference/layout/#layout-clickmode\n          // This allows single point selections and shift click to add / remove selections\n          updatedClickMode = \"event+select\"\n        } else {\n          // If points selection is not activated, we set the clickmode to none (no single item clicks)\n          updatedClickMode = \"none\"\n        }\n      }\n\n      if (!initialFigureSpec.layout.hovermode) {\n        // If the user has already set the hovermode, we don't want to override it here.\n        updatedHoverMode = \"closest\"\n      }\n\n      if (!initialFigureSpec.layout.dragmode) {\n        // If the user has already set the dragmode, we don't want to override it here.\n        // If not, we are selecting the best drag mode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // Pan drag mode has priority in case points selection is activated\n          updatedDragMode = \"pan\"\n        } else if (isBoxSelectionActivated) {\n          // Configure select (box selection) as the activated drag mode:\n          updatedDragMode = \"select\"\n        } else if (isLassoSelectionActivated) {\n          // Configure lasso (lasso selection) as the activated drag mode:\n          updatedDragMode = \"lasso\"\n        } else {\n          updatedDragMode = \"pan\"\n        }\n      }\n    }\n\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      if (\n        prevState.layout.clickmode === updatedClickMode &&\n        prevState.layout.hovermode === updatedHoverMode &&\n        prevState.layout.dragmode === updatedDragMode\n      ) {\n        // Nothing has changed, just return the previous state\n        return prevState\n      }\n\n      return {\n        ...prevState,\n        layout: {\n          ...prevState.layout,\n          clickmode: updatedClickMode,\n          hovermode: updatedHoverMode,\n          dragmode: updatedDragMode,\n        },\n      }\n    })\n    // We want to reload these options whenever the element id changes\n    // or the selection modes change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    isSelectionActivated,\n    isPointsSelectionActivated,\n    isBoxSelectionActivated,\n    isLassoSelectionActivated,\n    disabled,\n  ])\n\n  let calculatedWidth =\n    width === -1\n      ? // In some situations - e.g. initial loading of tabs - the width is set to -1\n        // before its able to determine the real width. We want to keep the previous\n        // width in this case.\n        plotlyFigure.layout?.width\n      : Math.max(\n          element.useContainerWidth\n            ? width\n            : Math.min(initialFigureSpec.layout.width ?? width, width),\n          // Apply a min width to prevent the chart running into issues with negative\n          // width values if the browser window is too small:\n          MIN_WIDTH\n        )\n\n  let calculatedHeight = initialFigureSpec.layout.height\n\n  if (isFullScreen) {\n    calculatedWidth = width\n    calculatedHeight = height\n  }\n\n  if (\n    plotlyFigure.layout.height !== calculatedHeight ||\n    plotlyFigure.layout.width !== calculatedWidth\n  ) {\n    // Update the figure with the new height and width (if they have changed)\n    setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n      return {\n        ...prevFigure,\n        layout: {\n          ...prevFigure.layout,\n          height: calculatedHeight,\n          width: calculatedWidth,\n        },\n      }\n    })\n  }\n\n  /**\n   * Callback to handle selections on the plotly chart.\n   */\n  const handleSelectionCallback = useCallback(\n    (event: Readonly<Plotly.PlotSelectionEvent>): void => {\n      handleSelection(event, widgetMgr, element, fragmentId)\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  /**\n   * Callback resets selections in the chart and\n   * sends out an empty selection state.\n   */\n  const resetSelectionsCallback = useCallback(\n    (resetSelectionInFigure = true): void => {\n      sendEmptySelection(widgetMgr, element, fragmentId)\n\n      if (resetSelectionInFigure) {\n        // We need to do this reset with a short timeout, because otherwise\n        // the onUpdate callback seems to overwrite the selection state\n        // that we set here. The timeout will make sure that this is executed\n        // after the onUpdate callback.\n        setTimeout(() => {\n          // Reset the selection info within the plotly figure\n          setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n            return {\n              ...prevFigure,\n              data: prevFigure.data.map((trace: any) => {\n                return {\n                  ...trace,\n                  // Set to null to clear the selection an empty\n                  // array here would still show everything as opaque\n                  selectedpoints: null,\n                }\n              }),\n              layout: {\n                ...prevFigure.layout,\n                // selections is not part of the plotly typing:\n                selections: [],\n              },\n            }\n          })\n        }, 50)\n      }\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  // This is required for the form clearing functionality:\n  useEffect(() => {\n    if (!element.formId || !isSelectionActivated) {\n      // We don't need the form clear functionality if its not in a form\n      // or if selections are not activated.\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    // On form clear, reset the selections (in chart & widget state)\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetSelectionsCallback\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [\n    element.formId,\n    widgetMgr,\n    isSelectionActivated,\n    resetSelectionsCallback,\n  ])\n\n  useEffect(() => {\n    if (!isSelectionActivated) {\n      return\n    }\n    // The point selection during the lasso or box selection seems\n    // to be a bit buggy. Sometimes, points gets unselected without\n    // triggering an onDeselect event.\n    // Therefore, we are deactivating the event+select clickmode\n    // if the dragmode is set to select or lasso.\n    let clickmode: \"event+select\" | \"event\" | \"none\"\n    if (\n      plotlyFigure.layout?.dragmode === \"select\" ||\n      plotlyFigure.layout?.dragmode === \"lasso\"\n    ) {\n      clickmode = \"event\"\n    } else {\n      // Reset to either none or event+select based on if points selection mode\n      // is activated or not.\n      clickmode = isPointsSelectionActivated ? \"event+select\" : \"none\"\n    }\n\n    if (plotlyFigure.layout?.clickmode !== clickmode) {\n      setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n        return {\n          ...prevFigure,\n          layout: {\n            ...prevFigure.layout,\n            clickmode: clickmode,\n          },\n        }\n      })\n    }\n    // We only want to trigger this effect if the dragmode changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plotlyFigure.layout?.dragmode])\n\n  return (\n    <Plot\n      key={isFullScreen ? \"fullscreen\" : \"original\"}\n      className=\"stPlotlyChart\"\n      data={plotlyFigure.data}\n      layout={plotlyFigure.layout}\n      config={plotlyConfig}\n      frames={plotlyFigure.frames ?? undefined}\n      style={{\n        // Hide the plotly chart if the width is not defined yet\n        // to prevent flickering issues.\n        visibility:\n          plotlyFigure.layout?.width === undefined ? \"hidden\" : undefined,\n      }}\n      onSelected={isSelectionActivated ? handleSelectionCallback : () => {}}\n      // Double click is needed to make it easier to the user to\n      // reset the selection. The default handling can be a bit annoying\n      // sometimes.\n      onDoubleClick={\n        isSelectionActivated ? () => resetSelectionsCallback() : undefined\n      }\n      onDeselect={\n        isSelectionActivated\n          ? () => {\n              // Plotly is also resetting the UI state already for\n              // deselect events. So, we don't need to do it on our side.\n              // Thats why the flag is false.\n              resetSelectionsCallback(false)\n            }\n          : undefined\n      }\n      onInitialized={figure => {\n        widgetMgr.setElementState(element.id, \"figure\", figure)\n      }}\n      // Update the figure state on every change to the figure itself:\n      onUpdate={figure => {\n        // Save the updated figure state to allow it to be recovered\n        widgetMgr.setElementState(element.id, \"figure\", figure)\n        setPlotlyFigure(figure)\n      }}\n    />\n  )\n}\n\nexport default withFullScreenWrapper(PlotlyChart, true)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenButtonProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenButton =\n  styled.button<StyledFullScreenButtonProps>(({ isExpanded, theme }) => {\n    const variableProps = isExpanded\n      ? {\n          right: \"0.4rem\",\n          top: \"0.5rem\",\n          backgroundColor: \"transparent\",\n        }\n      : {\n          right: \"-3.0rem\",\n          top: \"-0.375rem\",\n          opacity: 0,\n          transform: \"scale(0)\",\n          backgroundColor: theme.colors.lightenedBg05,\n        }\n\n    return {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n      zIndex: theme.zIndices.sidebar + 1,\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      border: \"none\",\n      color: theme.colors.fadedText60,\n      borderRadius: \"50%\",\n\n      ...variableProps,\n\n      \"&:focus\": {\n        outline: \"none\",\n      },\n\n      \"&:active, &:focus-visible, &:hover\": {\n        opacity: 1,\n        outline: \"none\",\n        transform: \"scale(1)\",\n        color: theme.colors.bodyText,\n        transition: \"none\",\n      },\n    }\n  })\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    \"&:hover\": {\n      [StyledFullScreenButton as any]: {\n        opacity: 1,\n        transform: \"scale(1)\",\n        transition: \"none\",\n      },\n    },\n\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: \"2.875rem\", // Old header height to avoid addtl cascading visual/snapshot changes\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { FullscreenEnter, FullscreenExit } from \"@emotion-icons/open-iconic\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  StyledFullScreenFrame,\n  StyledFullScreenButton,\n} from \"./styled-components\"\n\nexport type Size = {\n  width: number\n  expanded: boolean\n  height?: number\n  expand: () => void\n  collapse: () => void\n}\n\n/*\n * Function responsible for rendering children.\n * This function should implement the following signature:\n * ({ height, width }) => PropTypes.element\n */\nexport interface FullScreenWrapperProps {\n  children: (props: Size) => React.ReactNode\n  width: number\n  height?: number\n  theme: EmotionTheme\n  disableFullscreenMode?: boolean\n}\n\ninterface State {\n  expanded: boolean\n  fullWidth: number\n  fullHeight: number\n}\n\n/*\n * A component that draws a button on the top right of the\n * wrapper element. OnClick, change the element container\n * to fixed and cover all screen, updating wrapped element height and width\n */\nclass FullScreenWrapper extends PureComponent<FullScreenWrapperProps, State> {\n  public context!: React.ContextType<typeof LibContext>\n\n  public static contextType = LibContext\n\n  public constructor(props: FullScreenWrapperProps) {\n    super(props)\n    this.state = {\n      expanded: false,\n      ...this.getWindowDimensions(),\n    }\n  }\n\n  public componentDidMount(): void {\n    window.addEventListener(\"resize\", this.updateWindowDimensions)\n    document.addEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  public componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions)\n    document.removeEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  private controlKeys = (event: any): void => {\n    const { expanded } = this.state\n\n    if (event.keyCode === 27 && expanded) {\n      // Exit fullscreen\n      this.zoomOut()\n    }\n  }\n\n  private zoomIn = (): void => {\n    document.body.style.overflow = \"hidden\"\n    this.context.setFullScreen(true)\n    this.setState({ expanded: true })\n  }\n\n  private zoomOut = (): void => {\n    document.body.style.overflow = \"unset\"\n    this.context.setFullScreen(false)\n    this.setState({ expanded: false })\n  }\n\n  private convertScssRemValueToPixels = (scssValue: string): number => {\n    const remValue = parseFloat(scssValue)\n    return (\n      remValue *\n      parseFloat(getComputedStyle(document.documentElement).fontSize)\n    )\n  }\n\n  private getWindowDimensions = (): Pick<\n    State,\n    \"fullWidth\" | \"fullHeight\"\n  > => {\n    const padding = this.convertScssRemValueToPixels(\n      this.props.theme.spacing.md\n    )\n    const paddingTop = this.convertScssRemValueToPixels(\n      // Old header height to avoid addtl cascading visual/snapshot changes\n      \"2.875rem\"\n    )\n\n    return {\n      fullWidth: window.innerWidth - padding * 2, // Left and right\n      fullHeight: window.innerHeight - (padding + paddingTop), // Bottom and Top\n    }\n  }\n\n  private updateWindowDimensions = (): void => {\n    this.setState(this.getWindowDimensions())\n  }\n\n  public render(): JSX.Element {\n    const { expanded, fullWidth, fullHeight } = this.state\n    const { children, width, height, disableFullscreenMode } = this.props\n\n    let buttonImage = FullscreenEnter\n    let buttonOnClick = this.zoomIn\n    let buttonTitle = \"View fullscreen\"\n\n    if (expanded) {\n      buttonImage = FullscreenExit\n      buttonOnClick = this.zoomOut\n      buttonTitle = \"Exit fullscreen\"\n    }\n\n    return (\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid={\"stFullScreenFrame\"}\n      >\n        {!disableFullscreenMode && (\n          <StyledFullScreenButton\n            data-testid=\"StyledFullScreenButton\"\n            onClick={buttonOnClick}\n            title={buttonTitle}\n            isExpanded={expanded}\n          >\n            <Icon content={buttonImage} />\n          </StyledFullScreenButton>\n        )}\n        {expanded\n          ? children({\n              width: fullWidth,\n              height: fullHeight,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })\n          : children({\n              width,\n              height,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })}\n      </StyledFullScreenFrame>\n    )\n  }\n}\n\nexport default withTheme(FullScreenWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent, ComponentType, ReactNode } from \"react\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport FullScreenWrapper from \"./FullScreenWrapper\"\n\nexport interface Props {\n  width: number\n  height?: number\n  disableFullscreenMode?: boolean\n}\n\n// Our wrapper takes the wrapped component's props, plus \"width\", \"height?\".\n// It will pass \"isFullScreen\" to the wrapped component automatically\n// (but the wrapped component is free to ignore that prop).\ntype WrapperProps<P> = Omit<P & Props, \"isFullScreen\" | \"collapse\" | \"expand\">\n\nfunction withFullScreenWrapper<P>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>,\n  forceDisableFullScreenMode = false\n): ComponentType<React.PropsWithChildren<WrapperProps<P>>> {\n  class ComponentWithFullScreenWrapper extends PureComponent<WrapperProps<P>> {\n    public static readonly displayName = `withFullScreenWrapper(${\n      WrappedComponent.displayName || WrappedComponent.name\n    })`\n\n    public render = (): ReactNode => {\n      const { width, height, disableFullscreenMode } = this.props\n\n      return (\n        <FullScreenWrapper\n          width={width}\n          height={height}\n          disableFullscreenMode={\n            forceDisableFullScreenMode || disableFullscreenMode\n          }\n        >\n          {({ width, height, expanded, expand, collapse }) => (\n            // `(this.props as P)` is required due to a TS bug:\n            // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n            <WrappedComponent\n              {...(this.props as P)}\n              width={width}\n              height={height}\n              isFullScreen={expanded}\n              expand={expand}\n              collapse={collapse}\n            />\n          )}\n        </FullScreenWrapper>\n      )\n    }\n  }\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["replaceTemporaryColors","spec","theme","elementTheme","replaceAll","getIncreasingGreen","getDecreasingRed","hasLightBackgroundColor","colors","blue80","blue40","getGray30","getGray70","getGray90","bgColor","fadedText05","bgMix","replaceGOSpecificColors","CATEGORY_0","CATEGORY_1","CATEGORY_2","CATEGORY_3","CATEGORY_4","CATEGORY_5","CATEGORY_6","CATEGORY_7","CATEGORY_8","CATEGORY_9","categoryColors","getCategoricalColorsArray","replaceCategoricalColors","SEQUENTIAL_0","SEQUENTIAL_1","SEQUENTIAL_2","SEQUENTIAL_3","SEQUENTIAL_4","SEQUENTIAL_5","SEQUENTIAL_6","SEQUENTIAL_7","SEQUENTIAL_8","SEQUENTIAL_9","sequentialColors","getSequentialColorsArray","replaceSequentialColors","DIVERGING_0","DIVERGING_1","DIVERGING_2","DIVERGING_3","DIVERGING_4","DIVERGING_5","DIVERGING_6","DIVERGING_7","DIVERGING_8","DIVERGING_9","DIVERGING_10","divergingColors","getDivergingColorsArray","replaceDivergingColors","applyStreamlitTheme","layout","genericFonts","fontSizes","streamlitTheme","font","color","family","bodyFont","size","twoSmPx","title","headingColor","subtitleColor","bodyText","headingFont","mdPx","pad","l","spacing","twoXSPx","xanchor","x","legend","side","valign","bordercolor","transparent","borderwidth","nonePx","paper_bgcolor","plot_bgcolor","yaxis","ticklabelposition","zerolinecolor","smPx","standoff","twoXLPx","tickcolor","tickfont","gridcolor","minor","automargin","xaxis","showgrid","xlPx","zeroline","rangeselector","bgcolor","margin","r","hoverlabel","fadedText10","coloraxis","colorbar","thickness","xpad","outlinecolor","outlinewidth","len","y","ternary","aaxis","linecolor","baxis","caxis","merge","applyStreamlitThemeTemplateLayout","template","e","err","ensureError","logError","text","concat","FULLSCREEN_EXPAND_ICON","width","height","name","path","FULLSCREEN_COLLAPSE_ICON","applyTheming","plotlyFigure","chartTheme","JSON","parse","stringify","themeDefaults","secondaryBg","layoutWithThemeDefaults","handleSelection","event","widgetMgr","element","fragmentId","selectionState","selection","points","point_indices","box","lasso","selectedPointIndices","Set","selectedBoxes","selectedLassos","selectedPoints","selections","forEach","point","push","legendgroup","data","undefined","fullData","notNullOrUndefined","pointIndex","add","pointIndices","length","item","type","xAndy","x0","x1","y0","y1","parseBoxSelection","returnSelection","xref","yref","pathData","replace","split","xVal","yVal","map","Number","parseLassoPath","Array","from","keysToSnakeCase","selectionMode","includes","PlotlyChartProto","currentSelectionState","getStringValue","newSelectionState","setStringValue","fromUi","withFullScreenWrapper","_ref","_plotlyFigure$layout","_initialFigureSpec$la","_plotlyFigure$layout5","_plotlyFigure$frames","_plotlyFigure$layout6","disabled","isFullScreen","expand","collapse","disableFullscreenMode","useTheme","initialFigureSpec","useMemo","frames","id","setPlotlyFigure","useState","initialFigureState","getElementState","isSelectionActivated","isLassoSelectionActivated","isBoxSelectionActivated","isPointsSelectionActivated","plotlyConfig","config","modeBarButtonsToAdd","icon","click","modeBarButtonsToRemove","displaylogo","useEffect","prevState","updatedClickMode","clickmode","updatedHoverMode","hovermode","updatedDragMode","dragmode","calculatedWidth","Math","max","useContainerWidth","min","calculatedHeight","prevFigure","handleSelectionCallback","useCallback","resetSelectionsCallback","resetSelectionInFigure","arguments","sendEmptySelection","setTimeout","trace","selectedpoints","formId","formClearHelper","FormClearHelper","manageFormClearListener","disconnect","_plotlyFigure$layout2","_plotlyFigure$layout3","_plotlyFigure$layout4","_jsx","Plot","className","style","visibility","onSelected","onDoubleClick","onDeselect","onInitialized","figure","setElementState","onUpdate","StyledFullScreenButton","_styled","target","isExpanded","variableProps","right","top","backgroundColor","opacity","transform","lightenedBg05","position","display","alignItems","justifyContent","zIndex","zIndices","sidebar","transition","border","fadedText60","borderRadius","outline","StyledFullScreenFrame","_ref2","left","bottom","background","fullscreenWrapper","padding","md","paddingTop","overflow","FullScreenWrapper","PureComponent","constructor","props","super","context","controlKeys","expanded","this","state","keyCode","zoomOut","zoomIn","document","body","setFullScreen","setState","convertScssRemValueToPixels","scssValue","parseFloat","getComputedStyle","documentElement","fontSize","getWindowDimensions","fullWidth","window","innerWidth","fullHeight","innerHeight","updateWindowDimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","children","buttonImage","FullscreenEnter","buttonOnClick","buttonTitle","FullscreenExit","_jsxs","onClick","Icon","content","contextType","LibContext","withTheme","WrappedComponent","forceDisableFullScreenMode","ComponentWithFullScreenWrapper","displayName","hoistNonReactStatics","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}