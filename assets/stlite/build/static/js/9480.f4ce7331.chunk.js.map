{"version":3,"file":"static/js/9480.f4ce7331.chunk.js","mappings":"0NAsHA,QA/DA,SAAwBA,GACtB,MAAM,SAAEC,EAAQ,QAAEC,EAAO,UAAEC,EAAS,MAAEC,EAAK,UAAEC,EAAS,WAAEC,GAAeN,EACjEO,EAAQ,CAAEH,UAEdI,WAAW,wBAAEC,GAA0B,IACrCC,EAAAA,WAAiBC,EAAAA,GAEfC,EACa,YAAjBV,EAAQW,KACJC,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,UAEAC,GAAeC,EAAAA,EAAAA,MAsBfC,GAAaf,EAAQgB,MAAOd,EAElC,OACEe,EAAAA,EAAAA,KAAA,OACEC,UAAU,8BACV,cAAY,mBACZb,MAAOA,EAAMc,UAEbF,EAAAA,EAAAA,KAACG,EAAAA,EAAiB,CAACJ,KAAMhB,EAAQgB,KAAKG,UACpCF,EAAAA,EAAAA,KAACI,EAAAA,GAAU,CACTX,KAAMA,EACNY,KAAMC,EAAAA,GAAAA,MACNxB,SAAUA,EACVyB,QAjCgCC,KAKtC,GAFAxB,EAAUyB,gBAAgB1B,EAAS,CAAE2B,QAAQ,GAAQvB,GAEjDJ,EAAQ4B,IAAIC,WAAW,UAEzB,YADAC,EAAAA,EAAAA,IAAuBjB,EAAcb,EAAQ4B,KAI/C,MAAMG,EAzCH,SACL5B,EACAyB,EACArB,GAEA,MAAMwB,EAAOC,SAASC,cAAc,KAC9BC,EAAM/B,EAAUgC,cAAcP,GAQpC,OAPAG,EAAKK,aAAa,OAAQF,GACtB3B,EACFwB,EAAKK,aAAa,SAAU,UAE5BL,EAAKK,aAAa,SAAU,SAE9BL,EAAKK,aAAa,WAAY,IACvBL,CACT,CA0BiBM,CACXlC,EACAH,EAAQ4B,IACRrB,GAEFwB,EAAKO,OAAO,EAmBNvB,aAAYf,EAAQuC,mBAAoBxB,EAAmBI,UAE3DF,EAAAA,EAAAA,KAACuB,EAAAA,GAAiB,CAChBC,OAAQzC,EAAQ0C,MAChBC,WAAW,EACXC,SAAO,EACPC,aAAW,EACXC,cAAY,SAMxB,C","sources":["../../../streamlit/frontend/lib/src/components/widgets/DownloadButton/DownloadButton.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { DownloadButton as DownloadButtonProto } from \"@streamlit/lib/src/proto\"\nimport BaseButton, {\n  BaseButtonTooltip,\n  BaseButtonKind,\n  BaseButtonSize,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { useStliteKernel, downloadFileFromStlite } from \"@stlite/kernel\"\n\nexport interface Props {\n  endpoints: StreamlitEndpoints\n  disabled: boolean\n  element: DownloadButtonProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nexport function createDownloadLink(\n  endpoints: StreamlitEndpoints,\n  url: string,\n  enforceDownloadInNewTab: boolean\n): HTMLAnchorElement {\n  const link = document.createElement(\"a\")\n  const uri = endpoints.buildMediaURL(url)\n  link.setAttribute(\"href\", uri)\n  if (enforceDownloadInNewTab) {\n    link.setAttribute(\"target\", \"_blank\")\n  } else {\n    link.setAttribute(\"target\", \"_self\")\n  }\n  link.setAttribute(\"download\", \"\")\n  return link\n}\n\nfunction DownloadButton(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, width, endpoints, fragmentId } = props\n  const style = { width }\n  const {\n    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests\n  } = React.useContext(LibContext)\n\n  const kind =\n    element.type === \"primary\"\n      ? BaseButtonKind.PRIMARY\n      : BaseButtonKind.SECONDARY\n\n  const stliteKernel = useStliteKernel()\n\n  const handleDownloadClick: () => void = () => {\n    // Downloads are only done on links, so create a hidden one and click it\n    // for the user.\n    widgetMgr.setTriggerValue(element, { fromUi: true }, fragmentId)\n\n    if (element.url.startsWith(\"/media\")) {\n      downloadFileFromStlite(stliteKernel, element.url)\n      return\n    }\n\n    const link = createDownloadLink(\n      endpoints,\n      element.url,\n      enforceDownloadInNewTab\n    )\n    link.click()\n  }\n\n  // When useContainerWidth true & has help tooltip,\n  // we need to pass the container width down to the button\n  const fluidWidth = element.help ? width : true\n\n  return (\n    <div\n      className=\"row-widget stDownloadButton\"\n      data-testid=\"stDownloadButton\"\n      style={style}\n    >\n      <BaseButtonTooltip help={element.help}>\n        <BaseButton\n          kind={kind}\n          size={BaseButtonSize.SMALL}\n          disabled={disabled}\n          onClick={handleDownloadClick}\n          fluidWidth={element.useContainerWidth ? fluidWidth : false}\n        >\n          <StreamlitMarkdown\n            source={element.label}\n            allowHTML={false}\n            isLabel\n            largerLabel\n            disableLinks\n          />\n        </BaseButton>\n      </BaseButtonTooltip>\n    </div>\n  )\n}\n\nexport default DownloadButton\n"],"names":["props","disabled","element","widgetMgr","width","endpoints","fragmentId","style","libConfig","enforceDownloadInNewTab","React","LibContext","kind","type","BaseButtonKind","stliteKernel","useStliteKernel","fluidWidth","help","_jsx","className","children","BaseButtonTooltip","BaseButton","size","BaseButtonSize","onClick","handleDownloadClick","setTriggerValue","fromUi","url","startsWith","downloadFileFromStlite","link","document","createElement","uri","buildMediaURL","setAttribute","createDownloadLink","click","useContainerWidth","StreamlitMarkdown","source","label","allowHTML","isLabel","largerLabel","disableLinks"],"sourceRoot":""}