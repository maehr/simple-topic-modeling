{"version":3,"file":"static/js/9914.7d00aae5.chunk.js","mappings":"2JAGA,MAAM,eACJA,EAAc,gBACdC,EAAe,aACfC,EAAY,KACZC,GACEC,EAAAA,GAEE,KAAEC,GAASC,EAAAA,OAEXC,EAAc,eAAeC,KAAKC,OAAOC,aAExC,MAAMC,EACXC,WAAAA,GAA8B,IAAjBC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAClBG,KAAKJ,KAAOA,EACZI,KAAKC,KAAO,MACd,CAEA,aAAMC,GACJ,MAAM,IAAIjB,KAAgBG,EAC5B,CAEA,iBAAMe,CAAYC,GAChB,OAAOJ,OAASI,CAClB,CAKA,oBAAMC,GAA8B,IAAAC,EAAA,IAAdC,EAAOV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,MAAMW,QAAkC,QAA7BF,EAAMG,UAAUC,qBAAa,IAAAJ,OAAA,EAAvBA,EAAyBK,mBACpCC,EAAOC,SAASC,cAAc,KAC9BC,EAAK,IAAI/B,EACTgC,EAAOD,EAAGE,SAIhB,GAFAL,EAAKM,SAAWlB,KAAKJ,KAEjBN,IAAgBkB,EAAI,CAEtB,IAAIW,EAAS,GACbJ,EAAGK,SAASC,OAAO,IAAItC,EAAe,CACpCuC,KAAAA,CAAOC,GACLJ,EAAOK,KAAK,IAAItC,EAAK,CAACqC,IACxB,EACAE,KAAAA,GACE,MAAMC,EAAO,IAAIxC,EAAKiC,EAAQ,CAAEQ,KAAM,4CACtCR,EAAS,GACTP,EAAKgB,KAAOC,IAAIC,gBAAgBJ,GAChCd,EAAKmB,QACLC,YAAW,IAAMH,IAAII,gBAAgBrB,EAAKgB,OAAO,IACnD,IAEJ,KAAO,CACL,MAAM,SAAEX,EAAQ,aAAEiB,GAAiB,IAAIC,EAAqBpD,GAEtDqD,EAAWC,mBAAmBrC,KAAKJ,MAAM0C,QAAQ,SAAUC,QAAQD,QAAQ,MAAO,OAClFE,EAAU,CACd,sBAAuB,gCAAkCJ,EACzD,eAAgB,6CACZ7B,EAAQkC,KAAO,CAAE,iBAAkBlC,EAAQkC,MAAS,CAAC,GAGrDC,EAAYV,YAAW,IAAMxB,EAAGmC,OAAOC,YAAY,IAAI,KAE7D7B,EAAGK,SAASyB,YAAY,IAAI7D,EAAgB,CAC1C8D,SAAAA,CAAWvB,EAAOwB,GAChB,GAAIxB,aAAiByB,WAAY,OAAOD,EAAKE,QAAQ1B,GACrD,MAAM2B,EAAS,IAAIC,SAAS5B,GAAO6B,KAAKC,YAClCC,EAAOC,GAAKL,EAAOM,OAAOC,MAAKC,GAAKA,EAAEC,KAAO,EAAIL,EAAKP,EAAKE,QAAQS,EAAEE,UAC3E,OAAON,GACT,KACEjC,OAAOJ,GAAU4C,SAAQ,KAC3BC,cAAcpB,EAAU,IAI1BlC,EAAGmC,OAAOC,YAAY,CACpBmB,IAAKvD,EAAGwD,MAAQ5B,EAChBI,UACAN,gBACC,CAACA,IAGJ,MAAM+B,EAASpD,SAASC,cAAc,UACtCmD,EAAOC,QAAS,EAChBD,EAAOE,IAAM3D,EAAGwD,MAAQ5B,EACxBvB,SAASuC,KAAKgB,YAAYH,EAC5B,CAEA,OAAOjD,EAAKqD,WACd,EAYF,MAAMC,EAEJ3E,WAAAA,CAAa4E,GACXA,EAAKC,UAAYC,GAASzE,KAAK0E,WAAWD,EAAME,MAChD3E,KAAK4E,MAAQL,EACbvE,KAAK6E,aACP,CAEAC,KAAAA,CAAOC,GAGL,OAFA/E,KAAKgF,YAAcD,EAEZ/E,KAAKiF,aACd,CAEA3D,KAAAA,CAAOC,GACL,MAAM2D,EAAU,CAAEvD,KArBR,EAqBqBJ,SAS/B,OANAvB,KAAK4E,MAAMhC,YAAYsC,EAAS,CAAC3D,EAAM4D,SAGvCnF,KAAK6E,cAGE7E,KAAKiF,aACd,CAEAxD,KAAAA,GACEzB,KAAK4E,MAAMhC,YAAY,CAAEjB,KA9Bf,IA+BV3B,KAAK4E,MAAMnD,OACb,CAEA2D,KAAAA,CAAOC,GACLrF,KAAK4E,MAAMhC,YAAY,CAAEjB,KApCf,EAoC4B0D,WACtCrF,KAAK4E,MAAMnD,OACb,CAEAiD,UAAAA,CAAYQ,GA1CD,IA2CLA,EAAQvD,MAAe3B,KAAKsF,gBA1CtB,IA2CNJ,EAAQvD,MAAgB3B,KAAKuF,SAASL,EAAQG,OACpD,CAEAE,QAAAA,CAAUF,GACRrF,KAAKgF,YAAYQ,MAAMH,GACvBrF,KAAKyF,aAAaJ,GAClBrF,KAAK4E,MAAMnD,OACb,CAEAoD,WAAAA,GACE7E,KAAKiF,cAAgB,IAAIS,SAAQ,CAACC,EAASC,KACzC5F,KAAK6F,cAAgBF,EACrB3F,KAAK8F,aAAeF,CAAM,IAE5B5F,KAAK+F,eAAgB,CACvB,CAEAT,aAAAA,GACEtF,KAAK6F,gBACL7F,KAAK+F,eAAgB,CACvB,CAEAN,YAAAA,CAAcJ,GACPrF,KAAK+F,eAAe/F,KAAK6E,cAC9B7E,KAAKiF,cAAce,OAAM,SACzBhG,KAAK8F,aAAaT,GAClBrF,KAAK+F,eAAgB,CACvB,EAGF,MAAM5D,EACJxC,WAAAA,CAAaZ,GACX,MAAMkH,EAAU,IAAIC,eACpBlG,KAAKkC,aAAe+D,EAAQE,MAC5BnG,KAAKiB,SAAW,IAAIlC,EAClB,IAAIuF,EAAgB2B,EAAQG,OAEhC,E","sources":["../../../node_modules/native-file-system-adapter/src/adapters/downloader.js"],"sourcesContent":["import { errors } from '../util.js'\nimport config from '../config.js'\n\nconst {\n  WritableStream,\n  TransformStream,\n  DOMException,\n  Blob\n} = config\n\nconst { GONE } = errors\n// @ts-ignore - Don't match newer versions of Safari, but that's okay\nconst isOldSafari = /constructor/i.test(window.HTMLElement)\n\nexport class FileHandle {\n  constructor (name = 'unkown') {\n    this.name = name\n    this.kind = 'file'\n  }\n\n  async getFile () {\n    throw new DOMException(...GONE)\n  }\n\n  async isSameEntry(other) {\n    return this === other\n  }\n\n  /**\n   * @param {object} [options={}]\n   */\n  async createWritable (options = {}) {\n    const sw = await navigator.serviceWorker?.getRegistration()\n    const link = document.createElement('a')\n    const ts = new TransformStream()\n    const sink = ts.writable\n\n    link.download = this.name\n\n    if (isOldSafari || !sw) {\n      /** @type {Blob[]} */\n      let chunks = []\n      ts.readable.pipeTo(new WritableStream({\n        write (chunk) {\n          chunks.push(new Blob([chunk]))\n        },\n        close () {\n          const blob = new Blob(chunks, { type: 'application/octet-stream; charset=utf-8' })\n          chunks = []\n          link.href = URL.createObjectURL(blob)\n          link.click()\n          setTimeout(() => URL.revokeObjectURL(link.href), 10000)\n        }\n      }))\n    } else {\n      const { writable, readablePort } = new RemoteWritableStream(WritableStream)\n      // Make filename RFC5987 compatible\n      const fileName = encodeURIComponent(this.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A')\n      const headers = {\n        'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n        'content-type': 'application/octet-stream; charset=utf-8',\n        ...(options.size ? { 'content-length': options.size } : {})\n      }\n\n      const keepAlive = setTimeout(() => sw.active.postMessage(0), 10000)\n\n      ts.readable.pipeThrough(new TransformStream({\n        transform (chunk, ctrl) {\n          if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk)\n          const reader = new Response(chunk).body.getReader()\n          const pump = _ => reader.read().then(e => e.done ? 0 : pump(ctrl.enqueue(e.value)))\n          return pump()\n        }\n      })).pipeTo(writable).finally(() => {\n        clearInterval(keepAlive)\n      })\n\n      // Transfer the stream to service worker\n      sw.active.postMessage({\n        url: sw.scope + fileName,\n        headers,\n        readablePort\n      }, [readablePort])\n\n      // Trigger the download with a hidden iframe\n      const iframe = document.createElement('iframe')\n      iframe.hidden = true\n      iframe.src = sw.scope + fileName\n      document.body.appendChild(iframe)\n    }\n\n    return sink.getWriter()\n  }\n}\n\n// Want to remove this postMessage hack, tell them u want transferable streams:\n// https://bugs.webkit.org/show_bug.cgi?id=215485\n\nconst WRITE = 0\nconst PULL = 0\nconst ERROR = 1\nconst ABORT = 1\nconst CLOSE = 2\n\nclass MessagePortSink {\n  /** @param {MessagePort} port */\n  constructor (port) {\n    port.onmessage = event => this._onMessage(event.data)\n    this._port = port\n    this._resetReady()\n  }\n\n  start (controller) {\n    this._controller = controller\n    // Apply initial backpressure\n    return this._readyPromise\n  }\n\n  write (chunk) {\n    const message = { type: WRITE, chunk }\n\n    // Send chunk\n    this._port.postMessage(message, [chunk.buffer])\n\n    // Assume backpressure after every write, until sender pulls\n    this._resetReady()\n\n    // Apply backpressure\n    return this._readyPromise\n  }\n\n  close () {\n    this._port.postMessage({ type: CLOSE })\n    this._port.close()\n  }\n\n  abort (reason) {\n    this._port.postMessage({ type: ABORT, reason })\n    this._port.close()\n  }\n\n  _onMessage (message) {\n    if (message.type === PULL) this._resolveReady()\n    if (message.type === ERROR) this._onError(message.reason)\n  }\n\n  _onError (reason) {\n    this._controller.error(reason)\n    this._rejectReady(reason)\n    this._port.close()\n  }\n\n  _resetReady () {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyResolve = resolve\n      this._readyReject = reject\n    })\n    this._readyPending = true\n  }\n\n  _resolveReady () {\n    this._readyResolve()\n    this._readyPending = false\n  }\n\n  _rejectReady (reason) {\n    if (!this._readyPending) this._resetReady()\n    this._readyPromise.catch(() => {})\n    this._readyReject(reason)\n    this._readyPending = false\n  }\n}\n\nclass RemoteWritableStream {\n  constructor (WritableStream) {\n    const channel = new MessageChannel()\n    this.readablePort = channel.port1\n    this.writable = new WritableStream(\n      new MessagePortSink(channel.port2)\n    )\n  }\n}\n"],"names":["WritableStream","TransformStream","DOMException","Blob","config","GONE","errors","isOldSafari","test","window","HTMLElement","FileHandle","constructor","name","arguments","length","undefined","this","kind","getFile","isSameEntry","other","createWritable","_navigator$serviceWor","options","sw","navigator","serviceWorker","getRegistration","link","document","createElement","ts","sink","writable","download","chunks","readable","pipeTo","write","chunk","push","close","blob","type","href","URL","createObjectURL","click","setTimeout","revokeObjectURL","readablePort","RemoteWritableStream","fileName","encodeURIComponent","replace","escape","headers","size","keepAlive","active","postMessage","pipeThrough","transform","ctrl","Uint8Array","enqueue","reader","Response","body","getReader","pump","_","read","then","e","done","value","finally","clearInterval","url","scope","iframe","hidden","src","appendChild","getWriter","MessagePortSink","port","onmessage","event","_onMessage","data","_port","_resetReady","start","controller","_controller","_readyPromise","message","buffer","abort","reason","_resolveReady","_onError","error","_rejectReady","Promise","resolve","reject","_readyResolve","_readyReject","_readyPending","catch","channel","MessageChannel","port1","port2"],"sourceRoot":""}